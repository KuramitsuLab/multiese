
# 基本定義

内=内|中|の中|      # 例. データフレーム[内]の
存在する=ある@3|存在する
ファイル名=ファイル名@3|ファイル@2|ファイルパス@2|パス

先頭=最初|先頭
末尾=最後|末尾

確認する=確認する|見る|調べる|表示する|表示してみる # @check

# ローカル定義

データフレーム=データフレーム|表|表データ
カラム=コラム|列|表属性|カラム

カラム名=カラム名|列の名前|列名
インデックス名=インデックス名|行の名前|行名

インプレースする=置き換える|書き換える|インプレースする
インプレースで=置き換えで|書き換えで|破壊的に


# 確認系

を選択する=を選択する|を抽出する|@5

df.head()         @check @dot @it:その
df(データフレーム)の[最初の|先頭の|先頭|上|]5行
[とりあえず|]df(データフレーム)の内容を確認する

df.head(10)        @check @dot @it:その
df(データフレーム)の[最初の|先頭の|先頭|上|]10行

df.tail()          @check @dot @it:その
df(データフレーム)の[最後の|末尾の|末尾|下]5行

df.tail(10)          @check @dot @it:その
df(データフレーム)の[最初の|末尾の|末尾|下]10行

df[100:106]        @check @dot
df(データフレーム)の100行[目|]から106行[目|]まで

df[100:]       @check @dot
df(データフレーム)の100行[目|]から[末尾]まで

df[:100]       @check @dot
df(データフレーム)の[先頭]から100行[目|]まで

df['age']         @check @dot
df(データフレーム)の'age'(カラム)[を選択する]

df[['name','age']]      @check @dot
df(データフレーム)のカラム'name'と'age'[を選択する]

df[['name','age','GPA']]        @check @dot
df(データフレーム)のカラム'name'、'age'、'GPA'[を選択する]

df[['name','age','GPA', 'addr']]      @check @dot
df(データフレーム)のカラム'name'、'age'、'GPA'、'addr'[を選択する]

df.loc[100]   @get @it:その
df[内]のindexが100の行

df.iloc[[1,2,4],[0,2]]   @get @it:その
df[内]の1,2,4行目の0,2列目

df.info()  @check @it:その
df(データフレーム)の[データの性質|データの詳細]

df.describe()  @check @it:その
df(データフレーム)の[統計情報|要約統計量]

df.describe(include='O')  @check @it:その
df(データフレーム)の[オブジェクトデータ|数値データ以外]の[要約統計量|統計情報]

df['age'].describe()     @check @it:その
df(データフレーム)の'age'についての要約統計量
(df['age'])の要約統計量

df['age'].mean()      @get @it:その
df(データフレーム)の'age'についての平均値 #を取得
(df['age'])の平均値

df['age'].median()      @get @it:その
df(データフレーム)の'age'についての中央値 #を取得
(df['age'])の中央値

df['age'].mode()      @get @it:その
df(データフレーム)の'age'についての最頻値 #を取得
(df['age'])の最頻値

df['age'].std()     @get @it:その
df(データフレーム)の'age'(カラム)についての標準偏差
(df['age'])の標準偏差

df['age'].var()     @get @it:その
df(データフレーム)の'age'(カラム)についての分散
(df['age'])の分散

df.columns   @let:columns @check @it:その
df(データフレーム)のカラム名

df.index   @let:idx @check @it:その
df(データフレーム)のインデックス名

df.values   @let:val @check @it:その
df(データフレーム)の[バリュー|要素]

df['G3'].values   @check
df(データフレーム)の'G3'(カラム)の[バリュー|要素]

df.dtypes   @check @it:その
df(データフレーム)の[データ型]

df.shape   @check @it:その
df(データフレーム)の[形状|行数や列数|行数と列数]

df['weather'].value_counts()   @check @it:その
df(データフレーム)の'weather'(カラム)の[それぞれのデータの|各要素の|][出現頻度|出現回数]

df['remarks'].unique()   @check @it:その
df(データフレーム)の'remarks'(カラム)の[ユニーク値|一意の値|データの種類|ユニークな要素]

df['remarks'].nunique()   @check @it:その
df(データフレーム)の'remarks'(カラム)の[ユニークな要素の個数|ユニークな要素数]


# 設定系

df.rename(columns={'y': 'sales'})   @let_self @inplace @let:df_r @it:その
df(データフレーム)のカラム名を'y'から'sales'に[変更する|リネームする]
df(データフレーム)の'y'(カラム)の名前を'sales'に[変更する|リネームする]

df.rename(columns={'y': 'sales', 'z': 'profit'})   @let_self @inplace @let:df_r @it:その
df(データフレーム)のカラム名を'y'から'sales'に、'z'から'profit'に[変更する|リネームする]
df(データフレーム)の'y'(カラム)の名前を'sales'に、'z'(カラム)の名前を'profit'に[変更する|リネームする]

df.rename(index={'ONE': 'Row_1'})   @let_self @inplace @let:df_r @it:その
df(データフレーム)のインデックス名を'ONE'から'Row_1'に[変更する|リネームする]
df(データフレーム)の'ONE'(インデックス)の名前を'Row_1'に[変更する|リネームする]

df.set_index('datetime')   @let_self @inplace @let:df_s @it:その
df(データフレーム)の'datetime'(カラム)をインデックス[とする|に設定する|として設定する]

df.reset_index()   @let_self @inplace @let:df_r @it:その
df(データフレーム)のインデックスを[振り直す|リセットする]

df.reset_index(drop=True)   @let_self @inplace @let:df_r @it:その
df(データフレーム)の元のインデックスを[振り直す|リセットする]
df(データフレーム)の[振り直|リセット]して、元のインデックスを削除する


# datetime

pd.to_datetime(df['date'])
df(データフレーム)の'date'(カラム)を[datetime型|年月日の形式|日付型]に変換する

pd.to_datetime(df['date'], format='%Y-%m-%d')
フォーマットを指定して、df(データフレーム)の'date'(カラム)を[datetime型|年月日の形式|日付型]に変換する

df['date'].dt.year     @check @let: df['year'] @it:その
df(データフレーム)の'date'(カラム)の年

df['date'].dt.month     @check @let: df['month'] @it:その
df(データフレーム)の'date'(カラム)の月

df['date'].dt.day     @check @let: df['day'] @it:その
df(データフレーム)の'date'(カラム)の日にち

df['date'].dt.hour     @check @let: df['hour'] @it:その
df(データフレーム)の'date'(カラム)の時間

df['date'].dt.minute     @check @let: df['minute'] @it:その
df(データフレーム)の'date'(カラム)の分

df['date'].dt.second     @check @let: df['second'] @it:その
df(データフレーム)の'date'(カラム)の秒

df['date'].dt.weekday_name     @check @let: df['weekday'] @it:その
df(データフレーム)の'date'(カラム)の曜日

df['date'].dt.dayofweek     @check @let: df['dayofweek'] @it:その
df(データフレーム)の'date'(カラム)の曜日の数値型


# 演算処理系

df['temperature'].diff(periods=1)   @let: df['diff'] @calc
df(データフレーム)の'temperature'(カラム)[内]の前後の行の差分

df.corr()    @check @it:その
df(データフレーム)の[相関|相関係数]

df[['kcal', 'sales']].corr()    @check
df(データフレーム)の'kcal'(カラム)と'sales'(カラム)の[相関|相関係数]


# 行列操作

df.T
df(データフレーム)の行と列[を入れ替える]
df(データフレーム)の行列を入れ替える
df(データフレーム)を転置する


# フィルター

df[df['city'] == 'Tokyo']   @get
df(データフレーム)の'city'(カラム)が'Tokyo'の[データ]

df[df['year'] > 1990]   @get
df(データフレーム)の'year'(カラム)が1990より[大きい|多い][データ]

df[df['year'] >= 1990]   @get
df(データフレーム)の'year'(カラム)が1990以上の[データ]

df[df['year'] < 1990]   @get
df(データフレーム)の'year'(カラム)が1990より[小さい|少ない][データ]

df[df['year'] <= 1990]   @get
df(データフレーム)の'year'(カラム)が1990以下[データ]

df[df['city'].isin(['Tokyo', 'Osaka'])]   @get
df(データフレーム)の'city'(カラム)が'Tokyo'[もしくは|または|か]'Osaka'の[データ]


# ドロップ・欠損値処理

ドロップする=削除する|消す|落とす|ドロップする|ドロップ|削除

df.drop(0)   @let_self @let:df_d @inplace
df(データフレーム)の0行目をドロップする

df.drop('price', axis=1)   @let_self @let:df_d @inplace
df(データフレーム)の'price'(カラム)をドロップする
'price'(カラム)という列をドロップする

df.drop(['price', 'year'], axis=1)   @let_self @let:df_d @inplace
df(データフレーム)の'price'(カラム)と'year'(カラム)をドロップする

欠損値=欠損値|欠損|NaN|未記入の値|未入力の値

df.dropna()   @let_self @let:df_d @inplace
df(データフレーム)[内]の欠損値が[存在する|ある]行をドロップする
df(データフレーム)[内]の欠損値[を含む行|]をドロップする

df.fillna(symbol)   @let_self @let:df_f @inplace
df(データフレーム)[内]の欠損値をsymbol[に置き換える|に置換する|とする]
df(データフレーム)[内]の欠損値をsymbol[に置き換える|に置換する|とする|で埋める]

df.fillna(method='ffill')   @let_self @let:df_f @inplace
df(データフレーム)[内]の欠損値を直前の行の値で[埋める|補う]

df.fillna(df.mean())   @let_self @let:df_f @inplace
df(データフレーム)[内]の欠損値をdf(データフレーム)の平均値で[埋める|補う]

df.replace('?', np.nan).dropna()   @let_self @let:df_d @inplace
df(データフレーム)[内]の'?'を欠損値に置換し、欠損値が[存在する|ある]行をドロップする

df.replace('?', np.nan)   @let_self @let:df_r @inplace
df(データフレーム)[内]に[存在する|ある]'?'を欠損値[に置き換える|に置換する|とする]


# マージ (TODO: 絶対こんな入力しない)

マージする=結合する|一つにまとめる|マージする

pd.merge(df1, df2)   @let:df
df1(データフレーム)とdf2(データフレーム)をマージする
df1(データフレーム)とdf2(データフレーム)を[横に|横方向に]マージする
df1(データフレーム)とdf2(データフレーム)を[横に|横方向に]くっつける

pd.merge(df1, df2, on='id')   @let:df
'id'(カラム)をキーとして、df1(データフレーム)とdf2(データフレーム)をマージする
'id'(カラム)をキーとしてデータを[内部|]結合する
df1(データフレーム)とdf2(データフレーム)に対して、'id'(カラム)をキーとしてデータを[内部|]結合する

pd.merge(df1, df2, how='outer')   @let:df
[全結合で]df1(データフレーム)とdf2(データフレーム)をマージする
両方の列を使ってdf1(データフレーム)とdf2(データフレーム)をマージする
df1(データフレーム)とdf2(データフレーム)のどちらにも存在するデータでマージする
片方のテーブルにしかないデータも全て残してdf1(データフレーム)とdf2(データフレーム)をマージする

pd.merge(df1, df2, left_index=True, right_on='index_num')   @let:df
インデックスと'index_num'(カラム)をキーとしてdf1(データフレーム)とdf2(データフレーム)をマージする
左側のデータのインデックスと右側のデータの'index_num'(カラム)をキーとして、df1(データフレーム)とdf2(データフレーム)をマージする
左側のデータのインデックスと右側のデータの'index_num'(カラム)をキーとして2つのデータをマージする

pd.merge(df1, df2, how='left')   @let:df
[左外部結合で]df1(データフレーム)とdf2(データフレーム)をマージする
左側のデータ[フレーム|]に合わせてデータをマージする
左側のデータ[フレーム|]を全て残してデータをマージする

pd.concat([df1, df2])   @let:df
df1(データフレーム)とdf2(データフレーム)を縦方向でマージする
df1(データフレーム)とdf2(データフレーム)を縦結合する
df1(データフレーム)とdf2(データフレーム)を[縦方向|縦向き|縦]にマージする
df1(データフレーム)とdf2(データフレーム)を[縦方向|縦向き|縦]にくっつける
df1(データフレーム)とdf2(データフレーム)を[縦方向|縦向き|縦]に連結


# ピボットテーブル (TODO: 大変難しい、aggfuncなど)

df.pivot_table(index='Pclass', columns='Sex')   @let:df_p
df(データフレーム)の'Pclass'(カラム)をインデックス、'Sex'(カラム)をカラムとしたピボットテーブルを作成する

df.pivot_table(index='Pclass', columns='Sex', values='Age')   @let:df_p
df(データフレーム)の'Age'(カラム)について、'Pclass'(カラム)をインデックス、'Sex'(カラム)をカラムとしたピボットテーブルを作成する


# ピボット操作 (TODO:転置との違いがひっかかる)

df.stack()
ピボット操作でdf(データフレーム)の列を行に変更する

df.unstack()
ピボット操作でdf(データフレーム)の行を列に変更する

重複した=重複した|重複する|重複している
行数の合計=行の数|行数|行の合計|行数の合計
確認する=確認する|チェックする|確認|チェック|
あるのかどうか=あるのか|あるかどうか|あるのかどうか|あるか|存在するのか
# 重複

df.duplicated()   @check
df(データフレーム)[内]に重複[が|は][あるのかどうか][確認する]
df(データフレーム)[内]の重複を[確認する]
df(データフレーム)に重複があるかどうか
df(データフレーム)に重複があるかどうか[を判定する|を確認する|を検出する|]
df(データフレーム)に重複があるかどうかを[TF|真偽値]で返す
df(データフレーム)のそれぞれの行[について|において|に対して]重複があるかどうか[を判定する|を確認する|を検出する|]
df(データフレーム)の[行ごと|各行]に重複があるかどうか[を判定する|を確認する|検出する|]
df(データフレーム)の重複行を[判定する|確認する|検出する]
df(データフレーム)の行の重複を[判定する|確認する|検出する]

df.duplicated().sum()    @check
df(データフレーム)[内][で|の][重複した][行数の合計]
df(データフレーム)[内]で[重複した][行数の合計]
df(データフレーム)[内]の重複した[行の数|行数]

df[df.duplicated()]    @get
df(データフレーム)[内]の重複しているデータ
df(データフレーム)[内][で|の][重複した][データ|もの]

df.duplicated(subset='state')    @check
df(データフレーム)[内]の'state'(カラム)に重複があるかどうか
df(データフレーム)[内]の'state'(カラム)に重複[が|は][あるのかどうか][確認する]
'state'(カラム)に重複[が|は][あるのかどうか][確認する]

df.duplicated(subset=['state', 'point'])    @check
df(データフレーム)[内]の'state'(カラム)と'point'(カラム)に重複があるかどうか
df(データフレーム)[内]の'state'(カラム)と'point'(カラム)に重複を判定する
df(データフレーム)[内]の'state'(カラム)と'point'(カラム)に重複[が|は][あるのかどうか][確認する]
'state'(カラム)と'point'(カラム)に重複[が|は][あるのかどうか][確認する]

df.drop_duplicates()   @let:df_d @let_self @inplace
df(データフレーム)[内]の重複している行をドロップする
df(データフレーム)[内]の[重複した]行を[ドロップする]
[重複した]行を[ドロップする]
df(データフレーム)[内]の重複している行をドロップする
df(データフレーム)[内]の[重複している|重複する][値がある|]行を[ドロップする|削除する|取り除く]
df(データフレーム)から[重複している|重複する][値がある|]行を[ドロップする|削除する|取り除く]
df(データフレーム)の全ての列[で重複している|の重複する][値がある|]行を[ドロップする|削除する|取り除く]
df(データフレーム)[内]の重複要素がある行を[ドロップする|削除する|取り除く]

df.drop_duplicates(keep=False)   @let:df_d @let_self @inplace
重複した最後の行を残してdf(データフレーム)[内]の重複している行をドロップする
[重複した]最後の行を残してdf(データフレーム)[内]の[重複した]行を[ドロップする]

df.drop_duplicates(subset='state')   @let:df_d @let_self @inplace
df(データフレーム)[内]の'state'(カラム)に重複がある行をドロップする
'state'(カラム)に重複がある行を[ドロップ|drop|削除][する|]


# ビン (TODO:なんか冗長)

pd.cut(df['birth_year'], data_bins)  @let:df_cut
境界値をdata_bins(リスト)として、df(データフレーム)の'birth_year'(カラム)を[ビン|]分割する

pd.cut(df['birth_year'], bins_num)  @let:df_cut
[分割数|ビン数]をbins_numとして、df(データフレーム)の'birth_year'(カラム)を[ビン|]分割する

pd.cut(df['birth_year'], bins_num, label=group_names)  @let:df_cut
[分割数|ビン数]をbins_num、ビンの[名前|ラベル]をgroup_names(リスト)として、df(データフレーム)の'birth_year'(カラム)を[ビン|]分割する

pd.cut(df['birth_year'], bins_num, label=False)  @let:df_cut
[分割数|ビン数]をbins_num、ビンの[名前|ラベル]を[インデックス|整数値|0始まりの連番]として、df(データフレーム)の'birth_year'(カラム)を[ビン|]分割する

pd.qcut(df['birth_year'], 2)  @let:df_cut
df(データフレーム)の'birth_year'(カラム)を中央値で[ビン|]分割する

pd.qcut(df['birth_year'], 4)  @let:df_cut
df(データフレーム)の'birth_year'(カラム)を四分位数ごとで[ビン|]分割する

pd.qcut(df['birth_year'], bins_num)  @let:df_cut
[分割数|ビン数]をbins_numとして、df(データフレーム)の'birth_year'(カラム)を[ビンに含まれる個数|要素数]が等しくなるように[ビン|]分割する


# グループ化

データ数=データの数|データ数

df.groupby('flg-50K').size()    @calc
df(データフレーム)の'flg-50K'(カラム)をグループ化して、値ごとの[データ数|データ件数]

df.groupby(['month', 'period'])['sales'].sum()    @calc
df(データフレーム)の'month'(カラム)と'period'(カラム)ごとに'sales'(カラム)の値の[和|合計|合計値]

df.groupby(['weather'])['temperature'].mean()   @calc
df(データフレーム)の'weather'(カラム)ごとに'temperature'(カラム)の[平均|平均値]

df.groupby(['week'])['soldout'].count()   @calc
df(データフレーム)の'week'(カラム)ごとに'soldout'(カラム)の[数|個数]


# ソート

ソートする=ソート|並び替える|ソートする
降順に=逆順に|大きい順に|大から小へと|値が大きい順に
昇順に=順に|順番になるように|小さい順に|小から大へと|値が小さい順に

df.sort_index()   @inplace @let_self @let:df_s
df(データフレーム)をインデックスで[ソートする]
df(データフレーム)をインデックスでソートする
df(データフレーム)[全体|]をインデックスでソートする
df(データフレーム)[全体|]をインデックスを元にソートする
df(データフレーム)[全体|]をインデックスを元に昇順でソートする
df(データフレーム)[全体|]をインデックスに基づいてソートする
df(データフレーム)[全体|]をインデックスに沿ってソートする
df(データフレーム)[全体|]をインデックスを軸にソートする
dfのインデックスを[軸に|]ソートする
dfのインデックスを[軸に|]昇順でソートする

df.sort_values(['sales', 'temperature'], ascending=False)   @inplace @let_self @let:df_s
df(データフレーム)の'sales'(カラム)と'temperature'(カラム)を[降順に]ソートする
[df(データフレーム)の|]'sales'(カラム)と'temperature'(カラム)を[降順に][ソートする]
[df(データフレーム)の|]'sales'(カラム)と'temperature'(カラム)を[降順に]する

df.sort_values('sales')   @inplace @let_self @let:df_s
[df(データフレーム)の|]'sales'(カラム)を[昇順に][ソートする]
[df(データフレーム)の|]'sales'(カラム)を[ソートする]
[df(データフレーム)の|]'sales'(カラム)を[昇順に]する
df(データフレーム)の'sales'(カラム)を[昇順に|]ソートする
df(データフレーム)[全体|]を'sales'(カラム)[の値|]でソートする
df(データフレーム)[全体|]を'sales'(カラム)[の値|]を元にソートする
df(データフレーム)[全体|]を'sales'(カラム)[の値|]を元に昇順でソートする
df(データフレーム)[全体|]を'sales'(カラム)[の値|]に基づいてソートする
df(データフレーム)[全体|]を'sales'(カラム)[の値|]に沿ってソートする
df(データフレーム)[全体|]を'sales'(カラム)[の値|]を軸にソートする
dfの'sales'(カラム)[の値|]を[軸に|]ソートする
dfの'sales'(カラム)[の値|]を[軸に|]昇順でソートする

# null判定

df.isnull().sum()   @calc @check
df(データフレーム)[内]の[欠損値]の[数|合計]
df(データフレーム)[内]の欠損値の[数|合計]
df(データフレーム)[内]の欠損値の[数|合計|個数]
df(データフレーム)[内]にいくつ欠損値があるか確認する
df(データフレーム)[内]の欠損値をカウントする
df(データフレーム)[内]の欠損したセル数をカウントする

df.isin(['?']).sum()   @calc @check
df(データフレーム)[内]のそれぞれの[カラム|列]に[存在する|ある]'?'の個数[の合計値|の合計|]
df(データフレーム)[内]の[カラム|列][それぞれ|]に[存在する|ある]'?'の個数[の合計値|の合計|]
df(データフレーム)[内][のそれぞれのカラム]に[存在する]'?'の個数の合計値


# ダミー処理

ダミー変数化する=ダミー変数化する|one-hot表現に変換する|one-hot表現にする|ダミー変数にする|ダミー変数に変換する|数値データで置き換える|数値データに変換する|数値データにする
pd.get_dummies(df)   @let:df
df(データフレーム)[内]のカテゴリ変数を[ダミー変数化する]
df(データフレーム)についてダミー変数を[作成する|生成する|作る|つくる]
df(データフレーム)を[ダミー変数化する]
df(データフレーム)[内]のカテゴリ変数をダミー変数に変換する
df(データフレーム)についてダミー変数を[作成する|生成する]

pd.get_dummies(df['sex'])   @let:df
df(データフレーム)の'sex'(カラム)を[ダミー変数化する|one-hot表現に変換する]
[df(データフレーム)の|]'sex'(カラム|列)を[ダミー変数化する]
[df(データフレーム)の|]'sex'(カラム|列)についてダミー変数を[作成する|生成する|作る|つくる]
