# 設定
from importlib import import_module


operator = import_module('operator')

element = 10
a, b, c = 1, 2, 3
n = 2
n2 = 3
n3 = -1
start = 1
step = 10
aList = [1, 2, 3]
i = 0
j = 1

iterable = [0, 1, 2, 4]
iterable2 = [7, 8, 9]
selectors = [1, 0, 1, 0]
x = 0.0
y = 1.0
z = -1.0


def predicate(a): return a > 0

##


value = 0
value2 = 0
value3 = 0

# プリント

print()
'''
@alt(プリントする|表示する|出力する)
@prefix(value;[[文字列|数値|リスト|値]|[変数|実行結果]])

空行をプリントする
改行する
'''

print(value)
'''
valueをプリントする
'''

print(value, value2)
'''
２つのvalueを[順に|]プリントする
'''

print(value, value2, value3)
'''
３つのvalueを[順に|]プリントする
'''

s = ''

end = s
'''
＜オプション＞{改行[|する]の代わりに|sを}用いる
'''

end = ''
'''
＜オプション＞改行しない[|ように設定する]
＜オプション＞改行なし
'''

print(value, end='')
'''
@alt(改行なしに|改行せず[|に]|改行しな[いで|くて])

{改行なしに|valueを}プリントする
valueの出力を改行なしに行う
'''

print(value, value2, end='')
'''
@alt(改行なしに|改行せず[|に]|改行しな[いで|くて])

{改行なしに|２つのvalueを}プリントする
'''

aList = aTuple = []

print(*aList)
'''
aList[を展開して|の[値|要素]のみ]プリントする
'''

print(*aTuple)
'''
aTuple[を展開して|の[値|要素]だけ]プリントする
'''

__X__ = ','

sep = __X__
'''
@X(','|'\t'|':'|'/'|'\n'|s)
@Y(カンマ|タブ|コロン|スラッシュ|改行|文字列)
@alt(セパレータ|区切り[|記号]|分割記号)

＜オプション＞セパレータを__Y__にする
＜オプション＞__Y__をセパレータで使う
'''

sep = ''
'''
＜オプション＞セパレータを使わない
'''

print(value, value2, sep=__X__)
'''
{２つのvalueを|__Y__で区切って}プリントする
'''

print('Hello World')
'''
[ハローワールド|こんにちは世界][と|を]プリントする
{試しに|何か}動か[す|してみる]
[最初の|初めての]プログラムを書く
'''

print(f'\033[__X__m{value}\033[0m')
'''
@X(30;31;32;33;34;35;36;37;1;4)
@Y(黒色;赤色;緑色;黄色;青色;[マゼンタ|紫色];[シアン|水色];白色;太[|文]字;[下線|アンダーライン]付き)
{valueを|__Y__で}プリントする
'''

f'\033[__X__m{value}\033[0m'
'''
valueを__Y__で[プリント|表示]できる文字列に変換する
valueを__Y__[に|化]する
'''

x = 0.11

__X__ = ':.3f'
print(__X__.format(x))
'''
@X(':.1f'|':.2f'|':.3f'|':.4f'|':.5f')
@Y('1'|'2'|'3'|'4'|'5')
xの小数点以下__Y__桁まで[を|]プリントする
'''

__X__.format(x)
'''
xの小数点以下__Y__桁[まで|]の文字列に変換する
'''

# 入力

input()
'''
標準入力から1行[読み取る|受け取る]
[ユーザ|標準入力]から入力される
'''

int(input())
'''
[ユーザの]入力を整数として受け取る
ユーザが整数を入力する
ユーザから入力される
'''


##


x = n
'''
変数を定義する
'''

x, y = y, x
'''
@alt(スワップする|入れ替える)

変数[|の値]をスワップする
'''

aList[i], aList[j] = aList[j], aList[i]
'''
aListの要素をスワップする
'''

x = y = n
'''
２つの変数を同じ値にする
'''

x, y = i, j
'''
２つの変数をそれぞれ定義する
'''

x, y, z = n, n2, n3
'''
x, y, zをそれぞれn, n2, n3とする
x, y, zにそれぞれn, n2, n3を代入する
x, y, zをそれぞれn, n2, n3に設定する
'''

# 組み込み関数（計算）

abs(x)
'''
xの絶対値[|を求める]
'''

bool(x)
'''
@alt(論理値|ブール値)

xを論理値に変換する
xが真かどうか
'''

complex(x, y)
'''
[x, yの|]複素数[|を求める]
'''

divmod(x, y)
'''
[xとyの|]商と余りを同時に求める
'''

float(x)
'''
[xを|]浮動小数点数に変換する
'''

int(x)
'''
[xを|]整数に変換する
'''

# 組み込み関数（文字列）

ascii(x)
'''
[xを|]印字できる文字列にする
[xの|]印字可能な文字列
'''


hash(x)
'''
[xの|]ハッシュ値[|を求める]
'''


max(x, y)
'''
@alt(最大値|[最も大きい値|最大の値|一番小さい値])
２[変数|数|つ]の最大値[|を求める]
'''

min(x, y)
'''
@alt(最小値|[最も小さい値|最小の値|一番小さい値])
２[変数|数|つ]の最小値[|を求める]
'''

max(x, y, z)
'''
３[変数|数|つ]の最大値[|を求める]
'''

min(x, y, z)
'''
３[変数|数|つ]の最小値[|を求める]
'''

float(x)
'''
xを[浮動小数点数型|浮動小数点数|実数]に変換する
'''

int(x)
'''
xを整数に変換する
'''

str(x)
'''
xを文字列に変換する
'''

# 論理演算

n and n2
'''
nかつn2
'''

n or n2
'''
nまたはn2
'''

not n
'''
nではない
[nを|]否定する
'''

True
'''
真
'''

False
'''
偽
'''

None
'''
[null|NULL|nil]に等しい[値|識別子|もの]
未定値
'''
