# 設定
from importlib import import_module

operator = import_module('operator')

element = 10
a, b, c = 1, 2, 3
n = 2
n2 = 3
n3 = -1
start = 1
step = 10
aList = [1, 2, 3]
i = 0
j = 1
文字列 = ''

iterable = [0, 1, 2, 4]
iterable2 = [7, 8, 9]
selectors = [1, 0, 1, 0]
x = 0.0
y = 1.0
z = -1.0


def predicate(a): return a > 0

##


x = 0
y = 0
z = 0

# プリント

print()
'''
@alt(プリントする|表示する|出力する)

[空行を|改行[だけ|のみ]]プリントする
改行する
'''

__X__ = 1
'''
@X(変数名;数値;式;文字列)
@Y(変数[|の値];数値;計算結果;文字列)
'''

print(__X__)
'''
__Y__をプリントする
'''

print(__X__, __X__)
'''
２つの__Y__を[順に|]プリントする
'''

print(__X__, __X__, __X__)
'''
[３つ|複数]の__Y__を[順に|]プリントする
'''

print(x)
'''
xをプリントする
'''

print(x, y)
'''
xとyを[順に|]プリントする
'''

print(x, y, z)
'''
x,y,zを[順に|]プリントする
'''

end = 文字列
'''
option: {改行[|する]の代わりに|文字列を}用いる
option: {[プリント|出力]の終端に|文字列を}用いる
'''

end = ''
'''
option: 改行しない[|ように設定する]
option: 改行なし
'''

print(__X__, end='')
'''
@alt(改行なしに|改行せず[|に]|改行しな[いで|くて])

{改行なしに|__Y__を}プリントする
{__Y__の出力を|改行なしに}行う
'''

print(__X__, __X__, end='')
'''
{改行なしに|[２つの|複数の]__Y__を}プリントする
'''

print(x, end='')
'''
{改行なしに|xを}プリントする
{xの出力を|改行なしに}行う
'''

print(x, y, end='')
'''
{改行なしに|xとyを|[|順に]}プリントする
'''

リスト = タプル = []

print(*リスト)
'''
リスト[[の要素|]を展開して|の[値|要素]のみ]プリントする
'''

print(*タプル)
'''
タプル[[の要素|]を展開して|の[値|要素]だけ]プリントする
'''

__X__ = ','

sep = __X__
'''
@X(','|'\t'|':'|'/'|'\n'|s)
@Y(カンマ|タブ|コロン|スラッシュ|改行|文字列)
@alt(セパレータ|区切り[|記号]|分割記号)

option: セパレータを__Y__にする
option: __Y__をセパレータで使う
'''

sep = ''
'''
option: セパレータを使わない
'''

print(x, y, sep=__X__)
'''
{xとyを|__Y__で区切って}プリントする
'''

print('Hello World')
'''
[ハローワールド|こんにちは世界][と|を]プリントする
{試しに|何か}動か[す|してみる]
[最初の|初めての]プログラムを書く
'''

print(f'\033[__X__m{x}\033[0m')
'''
@X(30;31;32;33;34;35;36;37;1;4)
@Y(黒色;赤色;緑色;黄色;青色;[マゼンタ|紫色];[シアン|水色];白色;太[|文]字;[下線|アンダーライン]付き)
{xを|__Y__で}プリントする
'''

f'\033[__X__m{x}\033[0m'
'''
[xを|]__Y__で[プリント|表示]できる文字列に変換する
[xを|]__Y__[に|化]する
'''

x = 0.11

__X__ = ':.3f'
print(__X__.format(x))
'''
@X(':.1f'|':.2f'|':.3f'|':.4f'|':.5f')
@Y('1'|'2'|'3'|'4'|'5')
[xの|]小数点以下__Y__桁まで[を|]プリントする
'''

__X__.format(x)
'''
[xの|]小数点以下__Y__桁[まで|]の文字列に変換する
'''

# 入力

input()
'''
標準入力から1行[読み取る|受け取る]
[ユーザ|標準入力]から入力される
'''

int(input())
'''
[ユーザの]入力を整数として受け取る
ユーザが整数を入力する
ユーザから入力される
'''


##

x = n
'''
変数を定義する
'''

x, y = y, x
'''
@alt(スワップする|入れ替える)

変数[|の値]をスワップする
'''

リスト[x], リスト[y] = リスト[y], リスト[x]
'''
リストの要素をスワップする
'''

# 組み込み関数（計算）

abs(x)
'''
xの絶対値[|を求める]
'''

bool(x)
'''
@alt(論理値|ブール値)

xを論理値に変換する
xが真かどうか
'''

complex(x, y)
'''
[x, yの|]複素数[|を求める]
'''

divmod(x, y)
'''
[xとyの|]商と余りを同時に求める
'''

float(x)
'''
[xを|]浮動小数点数に変換する
'''

int(x)
'''
[xを|]整数に変換する
'''

# 組み込み関数（文字列）

ascii(x)
'''
[xを|]印字できる文字列にする
[xの|]印字可能な文字列
'''

hash(x)
'''
[xの|]ハッシュ値[|を求める]
'''

max(x, y)
'''
@alt(最大値|[最も大きい値|最大の値|一番小さい値])
２[変数|数|つ]の最大値[|を求める]
'''

min(x, y)
'''
@alt(最小値|[最も小さい値|最小の値|一番小さい値])
２[変数|数|つ]の最小値[|を求める]
'''

max(x, y, z)
'''
３[変数|数|つ]の最大値[|を求める]
'''

min(x, y, z)
'''
３[変数|数|つ]の最小値[|を求める]
'''

float(x)
'''
xを[浮動小数点数型|浮動小数点数|実数]に変換する
'''

int(x)
'''
xを整数に変換する
'''

str(x)
'''
xを文字列に変換する
'''

# 論理演算
条件 = True
条件2 = True
条件3 = True

条件 and 条件2
'''
@alt(二つ|ふたつ)
@alt(三つ|みっつ)

条件が二つとも[|同時に]成り立つ
二つの条件が[|同時に]成り立つ
条件かつ条件
'''

条件 and 条件2 and 条件3
'''
条件が三つとも[|同時に]成り立つ
[複数の|三つの]条件が[|同時に]成り立つ
条件または条件
'''

条件 or 条件2
'''
@alt(いずれか|何れか|何か)

二つの条件[が|のうち]いずれか成り立つ
'''

条件 or 条件2 or 条件3
'''
[複数の|三つ]の条件[が|のうち]いずれか成り立つ
'''

not 条件
'''
条件が成り立たない
[条件を|]否定する
'''

True
'''
真
'''

False
'''
偽
'''

None
'''
[null|NULL|nil]に等しい[値|識別子|もの]
未定値
'''
