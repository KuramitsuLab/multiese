import numpy as np
import pandas as pd
'''
@alt(表データ=[データフレーム|データフレーム|表[データ|]])
@alt(カラム=[列|列|カラム])
@alt(インデックス|行)
@alt(欠損値|NaN|未入力値)
@alt(変更する|増やす|減らす)
@alt(抽出する|取り出す|[選択する|選ぶ])
@alt(全ての|すべての|全)
@alt(の名前|名)
@alt(の一覧|一覧|[|の]リスト)

@prefix(df;[データフレーム|表データ])
@prefix(ds;[データ列|データフレームの[列|カラム]])
@prefix(column;[列|カラム];[列|カラム])
@prefix(value;[文字列|日付|])

表データを使う
表データをインポートする
'''

import seaborn as sns

n = 1
n2 = 3

excelfile = 'test.csv'
csvfile = 'file.csv'
tsvfile = 'file.tsv'
jsonfile = 'file.json'
jsonlfile = 'file.json'

column, column2, column3 = 'A', 'B', 'C'
df = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])
df2 = pd.DataFrame(data={'A': [1, 2], 'B': [2, 1]})
ds, ds2 = df['列A'], df[column2]

# 確認系

df.head()
'''
df[|の内容]を見る
dfの[先頭|最初][|を見る]
'''

__X__ = n
'''
@X(n;5;10;100)
@Y(n;5;10;100)
'''

df.head(__X__)
'''
dfの[先頭|最初|上]__Y__行[|を抽出する]
dfの[先頭|最初|上]__Y__行[|を見る]
'''

df.tail()
'''
dfの[末尾|最後][|を見る]
'''

df.tail(__X__)
'''
dfの[末尾|最後|下]__Y__行を抽出する
'''

df.sample()
'''
{dfから|ランダムに|[|一行[を|、]]}抽出する
dfを[|ランダム]サンプリングする
'''

df.sample(__X__)
'''
{dfから|ランダムに|__Y__行を}抽出する
dfから__Y__行、[|ランダム]サンプリングする
'''

df.sample(__X__, replace=True)
'''
@alt(重複ありで|重複を認めて)

{dfから|重複ありで|ランダムに|__Y__行を}サンプリングする
'''

start = 0
end = 2

df[start:end]
'''
{dfの行を|[範囲指定して|]}抽出する
dfのstart行目からend行目まで[|を]抽出する
'''

df[n:]
'''
dfのn行[|目][以降|より後ろ][|を]抽出する
'''

df[:n]
'''
dfのn行[|目][まで|より前][|を]抽出する
'''

df['列A']
'''
@alt(あるカラム|[|指定した|与えられた]カラム)

dfのあるカラム[を抽出する|]
'''

df['列A'].values
'''
dfのあるカラムを配列に変換する
{dfのあるカラムを|配列として}抽出する
'''

df['列A'].values.tolist()
'''
dfのあるカラムをリストに変換する
{dfのあるカラムを|リストとして}抽出する
'''

df[['列A']]
'''
dfからカラムを１つ[|のみ|だけ]選択する
dfから１つのカラム[を|のみ|だけ]抽出する
'''

df[['列A', '列B']]
'''
dfからカラムを２つ[|のみ|だけ]選択する
df[から|の]指定した２[つの|]カラム[を|のみ|だけ]抽出する
'''

df[['列A', '列B', '列C']]
'''
dfからカラムを３つ[|のみ|だけ]選択する
df[から|の]指定した３[つの|]カラム[を|のみ|だけ]抽出する
'''

columns = ['列A', '列B']
df[columns]
'''
@prefix(columns;[[カラムの名前|列名]一覧|[名前|列名]リスト])

dfから列名を複数指定して選択する
df[の|から]指定したcolumnsの列[を|のみ|だけ][抽出する|選択する]
'''

df.loc[n]
'''
dfのn[行目|番目の行]を抽出する
dfのインデックスがnの行を抽出する
'''

# df.iloc[[1,2,4],[0,2]]   @@get @@it
# @type(df)内の1,2,4行目の0,2列目

df.info()
'''
[dfの|]カラム[の一覧|概要][|を見る]
[dfの|]カラムの種類[|を見る]
'''

df.columns
'''
[dfの|]カラムの名前の一覧[を得る|]
[dfの|]カラムの名前を列挙する
'''

df.columns = columns
'''
[dfの|]カラム名を[リストで|]置き換える
'''

df.select_dtypes('object').columns
'''
@alt(カテゴリーデータ|[質的データ|数値データ以外])

dfからカテゴリデータのカラム名の一覧[を得る|]
dfからカテゴリデータのカラム名を列挙する
'''

型 = int

df.select_dtypes(型).columns
'''
dfから
dfから指定したデータ型のカラム名の一覧[|を得る]
dfの指定したデータ型のカラム名を列挙する
カラム名の一覧をデータ型でフィルタする
'''

df.index
'''
dfのインデックス[|の名前]の一覧[|を得る]
'''

df.values
'''
dfを配列に変換する
'''

df.dtypes
'''
dfのデータ型の一覧[|を得る]
'''

typeList = [int]

df.select_dtypes(include=typeList)
'''
@prefix(typeList;型リスト)

dfからtypeList[で指定した]データ型のカラム[を|のみ|だけ]抽出する
'''

df.select_dtypes(exclude=typeList)
'''
dfからtypeList[で指定した|の]データ型のカラム[を|のみ|だけ]除外する
'''

__X__ = 'object'
'''
@X('object';'number';ty)
@Y(カテゴリデータ;数値データ;ty[|型])
'''

df.select_dtypes(__X__)
'''
dfから__Y__[のカラム][を|のみ|だけ]抽出する
'''

df.shape
'''
dfの[シェイプ|形状][|を見る]
dfの[次元[の大きさ|数]|行数と列数][|を見る]

'''

df.T
'''
dfを転置する
dfの[行と列|行列]を[入れ替える|ひっくり返す]
'''

__X__ = df
'''
@X(df;df[['列A', '列B']])
@Y(df;dfの選択したカラム)
@alt(選択した|一部の)
'''

df.corr()
'''
@alt(まとめて|一度に|[全部、|全て])
dfのカラム間の[相関行列|相関[係数|]]を[まとめて|]求める
'''

__X__.corr()
'''
__Y__の相関行列[|を求める]
'''

__X__.corr(method='pearson')
'''
{[ピアソン|[|積率]相関係数]で_|__Y__の相関行列を}求める
'''

__X__.corr(method='kendall')
'''
{[ケンドール[|順位]相関係数|]で_|__Y__の相関行列を}求める
'''

__X__.corr(method='spearman')
'''
{スピアマン[[|順位]相関係数|]で_|__Y__の相関行列を}求める
'''

sns.heatmap(df.corr())
'''
@alt(描画する|グラフ化する)

{dfの相関行列を|[ヒートマップで_|]}描画する
{dfの相関行列を|[ヒートマップで_|]}可視化する
'''

df.round()
'''
@alt(丸める|四捨五入する)
@alt(丸めて|四捨五入して)
@alt[まとめて|全て|]
@alt(インプレイスする|更新する|置き換える)
df[の数値|]をまとめて[|整数に]丸める
'''

df.round(n)
'''
df[の数値|]をまとめて小数点以下n桁で丸める
'''

# 変更する

df.rename(columns={'列A': '列a', '列B': '列b'})
'''
@alt(リネームする|名前[|を]変更する)
@alt(付け直す|変更する)

dfのカラムをリネームする
dfのカラムの名前を付け直す
'''

df.columns = [str(x).replace(s, s2) for x in df.columns]
'''
@alt(まとめて|一度に|全て)

{dfのカラムの名前を|まとめて}[|文字列]置換する
'''

df.rename(index={x: y})
'''
dfのインデックスの名前をまとめて付け直す
'''

df.set_index('列A')
'''
dfのあるカラムをインデックスに設定する
'''

df.reset_index()
'''
dfのインデックスを[リセットする|振り直す]
'''

# datetime

df[df['列A'] == x]
'''
'A'カラムの値がxに等しい[行|データ]を抽出する
'''

# フィルター
x = 1.0
y = 2.0

df[df['列A'] == x]
'''
@alt(を抽出する|[のみ|だけ]残す|を選択する)
@alt(フィルタする|消す|取り除く)

[dfの|]あるカラムの値がxに等しい[行|データ]を抽出する
'''

df[df['列A'] != x]
'''
@alt(を抽出する|[のみ|だけ]残す|を選択する)
@alt(フィルタする|消す|取り除く)

[dfの|]あるカラムの値がxに等しくない[行|データ]を抽出する
'''

df[(df['列A'] == x) & (df['列B'] == y)]
'''
dfの[行|データ]を条件でフィルタする
あるカラムの値がxに等しく、[かつ|]別のカラムの値がyに等しい[行|データ]を抽出する
'''

df[df['列A'] < x]
'''
[dfの|]あるカラムの値がxより[小さい|少ない][行|データ]を抽出する
'''

df[df['列A'] <= x]
'''
[dfの|]あるカラムの値がx以下の[行|データ]を抽出する
'''

df[df['列A'] > x]
'''
[dfの|]あるカラムの値がxより[大きい|多い][行|データ]を抽出する
'''

df[df['列A'] >= x]
'''
[dfの|]あるカラムの値がx以上の[行|データ]を抽出する
'''

df[(x < df['列A']) & (df['列A'] < y)]
'''
あるカラムの値がxより大きく、yより小さい[行|データ]を抽出する
'''

df[(x <= df['列A']) & (df['列A'] <= y)]
'''
あるカラムの値がx以上、y以下の[行|データ]を抽出する
'''

df[(x <= df['列A']) & (df['列A'] < y)]
'''
あるカラムの値がx以上、y未満の[行|データ]を抽出する
'''

リスト = ['A', 'B']

df[df['列A'].isin(リスト)]
'''
あるカラムにリストの値が含まれる[行|データ]を抽出する
'''

df = pd.DataFrame(data={'列A': ['A', 'B'], '列B': ['B', 'A']})

部分文字列 = 'A'
正規表現 = '.'

df[df['列A'].str.contains(部分文字列)]
'''
あるカラムの文字列に部分文字列が[含まれる|ある|存在する][行|データ]を抽出する
'''

df[~df['列A'].str.contains(部分文字列)]
'''
あるカラムの文字列に部分文字列が[含まれない|ない|存在しない][行|データ]を抽出する
'''

df[df['列A'].str.match(正規表現)]
'''
あるカラムの文字列が正規表現にマッチする[行|データ]を抽出する
'''

df[~df['列A'].str.match(正規表現)]
'''
あるカラムの文字列が正規表現sにマッチしない[行|データ]を抽出する
'''

df[df['列A'].str.startswith(部分文字列)]
'''
あるカラムの文字列が部分文字列で始まる[行|データ]を抽出する
'''

df[~ df['列A'].str.startswith(部分文字列)]
'''
あるカラムの文字列が部分文字列で始まらない[行|データ]を抽出する
'''

df[df['列A'].str.endswith(部分文字列)]
'''
あるカラムの文字列が部分文字列で終わる[行|データ]を抽出する
'''

df[~ df['列A'].str.endswith(部分文字列)]
'''
あるカラムの文字列が部分文字列で終わらない[行|データ]を抽出する
'''


# ドロップ・欠損値処理

df.style.highlight_null()
'''
@alt(付け|つけ)

dfの欠損値が[含まれる|ある][箇所|部分][に[色を付ける]|を[色付けする]]
'''

df.drop(n, axis=0)
'''
@alt(ドロップする|[削除する|消す]|[除く|取り除く])

dfのn行目をドロップしてみる
'''

df.drop(n, axis=0, inplace=True)
'''
@alt(破壊的に|インプレイスで)

dfのn行目を[|破壊的に]ドロップする
'''

df.drop('列A', axis=1)
'''
[dfの|]あるカラムをドロップしてみる
'''

df.drop('列A', axis=1, inplace=True)
'''
@alt(_変更を反映する|入れ替える|更新する)

[dfの|]あるカラムを[|破壊的に]ドロップする
'''

df = pd.DataFrame(data={'A': ['A', 'B'], 'B': ['B', 'A']})

df.drop(['列A', '列B'], axis=1)
'''
dfの[複数の|二つの]カラムをドロップしてみる
'''

df.drop(['列A', '列B'], axis=1, inplace=True)
'''
dfの[複数の|二つの]カラムをドロップする
'''

df = pd.DataFrame(data={'列A': ['A', 'B'], '列B': ['B', 'A']})

df.drop(columns, axis=1, inplace=True)
'''
dfのcolumnsで指定したカラムをドロップする
'''

# 欠損値

df.dropna()
'''
@alt(の中|の内)
df[中|]の欠損値をドロップしてみる
欠損値が[ある|存在する]行をドロップしてみる
'''

df.dropna(inplace=True)
'''
df[中|]の欠損値を[|破壊的に]ドロップする
欠損値[が|の][ある|存在する]行を[|破壊的に]ドロップする
'''

# 重複

df = pd.DataFrame(data={'列A': [1, 1], '列B': [1, 1]})

df.duplicated()
'''
@alt(重複した|重複する)

dfの重複を見る
dfに重複があるか見る
dfが重複しているかどうか
dfの重複した行をマスクする
'''

df.duplicated().sum()
'''
dfの重複[した行|]を数える
df[は|が]何行重複するか見る
'''

df[df.duplicated(keep=False)]
'''
[dfの|]重複した行[のみ|だけ|][を抽出する|]
'''

df[~ df.duplicated(keep=False)]
'''
[dfの|]重複していない行[のみ|だけ|][を抽出する|]
'''

df.duplicated(subset='列A')
'''
指定したカラム[のみ|だけ|ついて]、dfの重複を見る
'''

df.duplicated(subset=['列A', '列B'])
'''
指定したカラムリスト[のみ|だけ|ついて]、dfの重複を見る
'''

df.drop_duplicates(inplace=True)
'''
dfから重複を[|破壊的に]ドロップする
dfから同じ[内容の|][行|データ]を[|破壊的に]ドロップする
'''


df.drop_duplicates(keep=False)
'''
dfから重複を残さず重複をドロップする
dfから重複した[行|データ]を残さずドロップする
'''

df.drop_duplicates(subset='列A', inplace=True)
'''
[dfの中で|]あるカラムに重複があれば、ドロップする
'''

df.drop_duplicates(subset=['列A', '列B'], inplace=True)
'''
[|dfの]カラムを[指定して|選んで]重複をドロップする
[dfの|]指定のカラムに重複があれば、ドロップする
'''
