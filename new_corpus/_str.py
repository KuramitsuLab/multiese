## 文字列

s = 'ABC abc 123'
s2 = 'a'
s3 = '123'
ch = ','
n = 1
start = 1
end = 3



''
'''
空文字
'''

'\n'
'''
改行[|文字]
'''

'\t'
'''
タブ[|文字]
'''

' '
'''
空白[|文字]
'''

chr(n)
'''
文字コードnの文字
'''

ord(ch)
'''
chの文字コード
'''

bin(n)
'''
整数nの[2|二|２]進数[文字列|表現|表記]
'''

oct(n)
'''
整数nの[8|八|８]進数[文字列|表現|表記]
'''

hex(n)
'''
整数nの[16|十六|１６]進数[文字列|表現|表記]
'''

n.to_bytes()
'''
整数nをバイト列に変換する
'''

s.upper()
'''
sを[全て|][英]大文字に変換する
s[内の|の中の|の][英]小文字を[英]大文字に変換する
'''

s.lower()   
'''
sを[全て|][|英]小文字に変換する
s[内の|の中の|の][|英]大文字を[|英]小文字に変換する
'''

list(s)
'''
sを文字[の|]リストに変換する
sの文字リスト
'''  

s.split()
'''
@return(文字列リスト)
{sを|空白で}[分割して|区切って][文字列|]リストに変換する
{sを|空白で}[分割する|区切る]
'''

map(int, s.split())
'''
{sを|空白で}[分割して|区切って]整数リストに変換する
'''

s.split(c)
'''
@return(文字列リスト)
{sを|cで}[分割して|区切って][文字列|]リストに変換する
{sを|cで}[分割する|区切る]
'''

s.split(',')
'''
@return(文字列リスト)
{sを|カンマで}[分割して|区切って][文字列|]リストに変換する
{sを|カンマで}[分割する|区切る]
'''

s.splitlines()
'''
@return(文字列リスト)
{sを|改行で}[分割して|区切って][文字列|]リストに変換する
{sを|改行で}[分割する|区切る]
'''

s.rsplit()
'''
@return(文字列リスト)
{sを|[末尾|最後|右]から|空白で}[分割する|区切る]
'''

s.rsplit(s2)   
'''
@return(文字列リスト)
{sを|[末尾|最後|右]から|s2で}[分割する|区切る]
'''

s.partition(s2)
'''
@return(文字列タプル)
{sを|最初のs2で}[分割する|区切る]
'''

s.rpartition(s2)
'''
@return(文字列タプル)
{sを|最後のs2で}[分割する|区切る]
'''

s.partition(s2)[0]
'''
{sを|最初のs2で}[分割し|区切り]、[最初の|先頭の]文字列を得る
'''

s.partition(s2)[2]
'''
{sを最初のs2で}[分割し|区切り]、残りの文字列を得る
'''

s.replace(s2, s3)   
'''
@return(文字列)
s[内|中]のs2をs3に[全て|]置き換える
sにおいてs2をs3に[全て|]置き換える
'''

s.replace(s2, s3, 1)   
'''
@return(文字列)
{s[内|中]のs2を|[最大]ひとつ[だけ|のみ]|s3に}置き換える
{s[内|中]のs2を|[最大]1回[だけ|のみ]|s3に}置き換える
'''

s.replace(s2, '')   
'''
@return(文字列)
s[内|中]のs2を[取り除く|除く|除去する|消す]
sからs2を[全て|]取り除く
'''

s.expandtabs(tabsize=n)
'''
@return(文字列)
s[内|中]のタブ文字をn個の空白に置き換える
'''

s.strip()
'''
sの両端から[空白|改行|不要な空白|余分な空白]を[取り除く|除く|除去する|消す]
sをトリムする
'''  

s.strip(s2)
'''
@return(文字列)
sの両端からs2を[取り除く|除く|除去する|消す]
'''

s.strip('\n')
'''
@return(文字列)
sの両端から改行を[取り除く|除く|除去する|消す]
'''

s.lstrip()
'''
@return(文字列)
sの[左側|先頭]から[[不要な|余分な|]空白|改行]を[取り除く|除く|除去する|消す]
sを左トリムする
'''

s.lstrip(s2)
'''
@return(文字列)
sの[左側|先頭]からs2を[取り除く|除く|除去する|消す]
'''

s.rstrip()
'''
@return(文字列)
sの[右側|末尾]から[[不要な|余分な|]空白|改行]を[取り除く|除く|除去する|消す]
'''

s.rstrip(s2)
'''
@return(文字列)
sの[右側|末尾]からs2を[取り除く|除く|除去する|消す]
sを右トリムする
'''

s.zfill(n)   
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}[パディング|ゼロ埋め]する
'''

str(n).zfill(n2)   
'''
@return(文字列)
{整数nを|ゼロ[パディング|埋め]で}n2桁にする
'''

s.center(n)   
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}[センタリング|中央寄せ][に|]する
'''

s.ljust(n)   
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}左寄せ[に|]する
'''

s.rjust(n)
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}右寄せ[に|]する
'''

s.capitalize()
'''
@return(文字列)
sをキャピタライズする
'''

s.swapcase()
'''
@return(文字列)
sの大文字と小文字を[交換する|逆にする|入れ替える]
'''

s2 in s
'''
{s[の中|]に|s2[が|は]}[含まれる|存在する|ある]かどうか
'''

s.find(s2)
'''
@return(位置)
{s[の中|]から|s2を}[探す|見つける]
{sの[最初から|先頭から|左側から]|s2を}[探す|見つける]
'''

s.find(s2)
'''
@return(位置)
{s[の中|]から|s2を}[探す|見つける]
{sの[最初から|先頭から|左側から]|s2を}[探す|見つける]
'''

s.find(s2, start)   
'''
@return(位置)
{sのstart[番目|]から|s2を}探す
'''

s.find(s2, start, end)
'''
@return(位置)
{sのstartからend[まで|]の間で|s2を}探す
'''

s.rfind(s2)
'''
@return(位置)
{sの[末尾|後ろ|右側]から|s2を}[探す|見つける]
'''

ss = ['A', 'B', 'C']
''.join(ss)
'''
@return(文字列)
ssを連結する
'''

iterable = [1, 1, 2]
''.join(map(str, iterable))
'''
@return(文字列)
{iterableを|文字列として}連結する
'''

','.join(map(str, iterable))
'''
@return(文字列)
{iterableを|カンマ区切りで}連結する
'''

s.join(map(str, iterable))
'''
@return(文字列)
{iterableを|sで}連結する
'''

s.count(s2)
'''
s[内|中]のs2の[出現回数|登場回数]
s[内|中]のs2を[数える|カウントする]
'''

s.count(s2, start, end)
'''
sのstartからendの範囲でのs2の[出現回数|登場回数]
sのstartからendの範囲でs2を[数える|カウントする]
'''

s.startswith(s2)
'''
{sが|s2で}[始まる|開始する]かどうか
sの[先頭|接頭辞|プレフィックス][が|は]s2かどうか
'''

s.startswith(s2, start)
'''
{sのstart番目が|s2で}[始まる|開始する]かどうか
'''

s.endswith(s2)
'''
{sが|s2で}[終わる|終端する]かどうか
sの[末尾|接尾辞|サッフィックス][が|は]s2かどうか
'''

s.removeprefix(s2)
'''
@return(文字列)
{[エラーなく|安全に]|sの[先頭|接頭辞|プレフィックス]から|s2を}取り除く
'''

s.removesuffix(s2)
'''
@return(文字列)
{[エラーなく|安全に]|sの[末尾|接尾辞|サッフィックス]から|s2を}取り除く
'''

filename='file.txt'
filename.endswith('.csv')
'''
{filenameが|CSV[ファイル]}かどうか
'''

s.isupper()
'''
sが[全て|][英|]大文字かどうか
'''

s.islower()
'''
sが[全て|][英|]小文字かどうか
'''

s.isdigit()
'''
sが[全て|]数字かどうか
'''

s.isalpha()
'''
sが[全て|][アルファベット|英字]かどうか
'''

s.isalnum()
'''
sが[全て|]英数字かどうか
'''

s.isspace()
'''
sが[全て|]空白[文字|][からなるか|か]どうか
'''

s.isascii()
'''
sが[全て|][アスキー文字|ASCII文字]かどうか
'''

s.isdecimal()
'''
s[は|が][全て|]十進数字かどうか
'''

s.isnumeric()
'''
s[は|が][全て|]数値かどうか
'''

s.isidentifier()
'''
s[は|が][全て|]識別子名かどうか
'''

import keyword
keyword.iskeyword(s)
'''
s[は|が]キーワードかどうか
'''

s.isprintable()
'''
s[は|が][全て|]印字できるかどうか
'''

s.istitle()
'''
s[は|が]タイトルケースかどうか
'''

s.encode(encoding='utf-8', errors='strict')
'''
sを[UTF8で]バイト列に変換する
'''

s.encode(encoding='sjis', errors='ignore')
'''
sをSJIS[の|で]バイト列に変換する
'''

s.encode(encoding='unicode_escape')
'''
{sを|ユニコードエスケープで}バイト列に変換する
'''


encoding='utf-8'

s.encode(encoding)
'''
{sを|encodingで}バイト列に変換する
'''

s.encode(errors='ignore')
'''
{エラーを無視して|sを}バイト列に変換する
'''

args=[]
s.format(*args)
'''
sを書式として、argsをフォーマットする
'''

mapping={}
s.format_map(mapping)
'''
sを書式として、mappingをフォーマットする
'''

len(s)
'''
sの[長さ|文字数|大きさ]
'''

s[0]
'''
sの[先頭|最初][|の文字]
'''

s[-1]
'''
sの[末尾|最後][|の文字]
'''

s2[n]
'''
s2のn番目[|の文字]
'''

s == s2
'''
sとs2[は|が][同じ|等しい]かどうか
s[が|は]s2と[同じ|等しい]かどうか
'''

## Tips

# 片仮名 -> [片仮名|カタカナ]
# 平仮名 -> [平仮名|ひらがな]

("ァ" <= ch <= "ン")  @not @if @while
'''
chが片仮名かどうか
'''

("ぁ" <= ch <= "ん")
'''
chが平仮名かどうか
'''

("一" <= ch <= "鿐")
'''
chが漢字かどうか
'''

import re
re.search('[\u4E00-\u9FD0]', s)
'''
{s[|内|中]に|漢字が}[含まれる|使われている]かどうか
'''

re.search('[あ-んア-ン一-鿐]', s)
'''
{s[|内|中]に|日本語が}[含まれる|使われている]かどうか
'''

''.join([chr(ord(ch) - 96) if ("ァ" <= ch <= "ン") else ch for ch in s])
'''
sの片仮名を平仮名に変換する
'''

''.join([chr(ord(ch) + 96) if ("ぁ" <= ch <= "ん") else ch for ch in s])
'''
sの平仮名を片仮名に変換する
'''

s.translate(str.maketrans("０１２３４５６７８９", "0123456789"))
'''
sの全角数字を半角数字に変換する
'''
