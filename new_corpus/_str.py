# 文字列

import re
import keyword
import string

from torch import align_tensors
s = 'ABC abc 123'  # 文字列 s, s2, s3
s2 = 'a'
s3 = '123'
n = 1  # 整数 n, n1, n2
n2 = 3

filename = 'file.txt'  # テキストファイル name

ss = ['A', 'B', 'C']  # 文字列(リスト|タプル)

''
'''
空文字[|を得る]
'''

'\n'
'''
改行[|文字][|を得る]
'''

'\t'
'''
タブ[|文字][|を得る]
'''

' '
'''
空白[|文字][|を得る]
'''


string.ascii_letters
'''
@test(import string;_)
@alt(全ての|全)
全ての[アルファベット|英字][|を[得る|使う]]
'''

string.ascii_lowercase
'''
@test(import string;_)
全ての小文字[|を[得る|使う]]
'''

string.ascii_uppercase
'''
@test(import string;_)
全ての大文字[|を[得る|使う]]
'''

string.digits
'''
@test(import string;_)
全ての数字[|を[得る|使う]]
'''

string.hexdigits
'''
@test(import string;_)
全ての十六進数字[|を[得る|使う]]
'''

string.octdigits
'''
@test(import string;_)
全ての[８|八]進数字[|を[得る|使う]]
'''

string.punctuation
'''
@test(import string;repr(_))
全ての句読点文字[|を[得る|使う]]
'''

string.printable
'''
@test(import string;repr(_))
全ての印字[|可能な]文字[|を[得る|使う]]
'''

string.whitespace
'''
@test(import string;repr(_))
全ての空白文字[|を[得る|使う]]
'''

chr(n)
'''
文字コードnを文字[|列]に変換する
[文字コード|ユニコード|ASCIIコード]nの文字[|を得る]
'''

ord(s2)
'''
s2の文字コード[|を得る]
'''

s.upper()
'''
@alt(大文字|英大文字)
@alt(の_|[内|中]の)
sを[全て|]大文字に変換する
sの_小文字を大文字に変換する
'''

s.lower()
'''
@alt(小文字|英小文字)
sを[全て|]小文字に変換する
sの_大文字を小文字に変換する
'''

s.casefold()
'''
@alt(小文字|英小文字)
sを[全て|]小文字に変換する
sを[積極的に|特殊文字も含め]小文字に変換する
'''

list(s)
'''
@alt(文字リスト|文字のリスト)
sを文字リストに変換する
sの文字リスト[|を得る]
'''

s.split()
'''
@alt(区切る|分割する)
@alt(区切って|分割し[、|て])
@alt(で_|によって|を[用い|使っ]て)
@alt(文字列リスト|文字列のリスト|リスト)
{sを|空白で}区切って文字列リストに変換する
{sを|空白で_}区切る
'''

map(int, s.split())
'''
@test(list(_))
@alt(整数リスト|整数のリスト|[|整]数列)
{sを|空白で_}区切って整数リストに変換する
'''

s.split(s2)
'''
{sを|s2で}区切って文字列リストに変換する
{sを|s2で_}区切る
'''

__X__ = ','
s.split(__X__)
'''
@X(','|':')
@Y(カンマ|コロン)
{sを|__Y__で}[分割し|区切り]、文字列リストに変換する
{sを|__Y__で_}区切る
'''

s.splitlines()
'''
{sを|改行で}[分割し|区切り]、文字列リストに変換する
{sを|改行で_}区切る
'''

s.rsplit()
'''
{sを|[末尾|最後|右]から|空白で}区切る
'''

s.rsplit(s2)
'''
{sを|[末尾|最後|右]から|s2で}区切る
'''

s.partition(s2)
'''
@alt(二分する|[二|]分割する|二つに分ける)
@return(文字列タプル)
{sを|[|最初の]s2で}二分する
'''

s.rpartition(s2)
'''
@return(文字列タプル)
{sを|最後のs2で}二分する
'''

s.partition(s2)[0]
'''
@alt(とき|時|場合)
@alt(二分し|二つに区切って)
@alt(分けた|に分割した)
{sを|[|最初の]s2で}二分し、[前半の|最初の|先頭の]文字列を得る
{sを|[|最初の]s2で}分けたときの[前半の|最初の|先頭の]文字列[|を得る|を取り出す]
'''

s.partition(s2)[-1]
'''
{sを[|最初の]s2で}二分し、、[後半の|残りの]文字列を得る
{sを|[|最初の]s2で}分けたときの[後半の|残りの]文字列[|を得る|を取り出す]
'''

s.rpartition(s2)[0]
'''
{sを|最後のs2で}二分し、[前半の|最初の|先頭の]文字列を得る
{sを|最後のs2で}分けたときの[前半の|最初の|先頭の]文字列[|を得る|を取り出す]
'''

s.rpartition(s2)[-1]
'''
{sを最後のs2で}二分し、、[後半の|残りの]文字列を得る
{sを最後のs2で}分けたときの[後半の|残りの]文字列[|を得る|を取り出す]
'''

s.replace(s2, s3)
'''
@alt(置き換える|置換する)
{sの_s2を|s3に}[全て|]置き換える
sにおいて{s2を|s3に}[全て|]置き換える
'''

s.replace(s2, s3, n)
'''
{s[内|中]のs2を|[|最大]n回[だけ|のみ]|s3に}置き換える
'''

s.replace(s2, '')
'''
@alt(取り除く|除く|除去する|消す)
sからs2を[全て|]取り除く
'''

s.expandtabs(tabsize=n)
'''
sの_タブ文字をn個の空白に[置き換える|する]
'''

s.strip()
'''
sの両端から[|不要な|余分な][空白|改行]を取り除く
sをトリムする
'''

s.strip(s2)
'''
sの両端からs2を取り除く
'''

s.strip('\n')
'''
sの両端から改行を取り除く
'''

s.lstrip()
'''
sの[左[側|端]|先頭]から[|不要な|余分な][空白|改行]を取り除く
sを左トリムする
'''

s.lstrip(s2)
'''
sの[左[側|端]|先頭]からs2を取り除く
'''

s.rstrip()
'''
sの[右[側|端]|末尾]から[|不要な|余分な][空白|改行]を取り除く
'''

s.rstrip(s2)
'''
sの[右[側|端]|末尾]からs2を取り除く
sを右トリムする
'''

s.zfill(n)
'''
{sを|[長さ|文字数|幅]nで}[パディング|ゼロ埋め]する
'''

str(n).zfill(n2)
'''
{整数nを|ゼロ[パディング|埋め]で_}n2桁の文字列に変換する
'''

s.center(n)
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}[センタリング|中央寄せ][に|]する
'''

s.ljust(n)
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}左寄せ[に|]する
'''

s.rjust(n)
'''
@return(文字列)
{sを|[長さ|文字数|幅]nで}右寄せ[に|]する
'''

s.capitalize()
'''
@return(文字列)
sをキャピタライズする
sの先頭だけ大文字化する
'''

s.swapcase()
'''
@return(文字列)
sの大文字と小文字を[交換する|逆にする|入れ替える]
'''

s in alist
'''
sがalist内のいづれかどうか
'''


s2 in s
'''
@alt(含まれる|ある|存在する)
@alt(の中|[|中|内])
{sの中に|s2が}含まれるかどうか
'''

s2 not in s
'''
@alt(含まれない|ない|存在しない)
{sの中に|s2が}含まれないかどうか
'''

s.find(s2)
'''
@alt(先頭|最初|左[側|端])
@alt(末尾|最後|後ろ|右[側|端])
{s[の中|]から|s2を}[探す|見つける]
{sの先頭から|s2を}[探す|見つける]
'''

s.find(s2, start=n) != -1
'''
{sのn[|番目][以降に|より後に|から先に]|s2が}含まれるかどうか
'''

s.find(s2, start=n) == -1
'''
{sのn番目[以降に|より後に|から先に]|s2が}含まれないかどうか
'''

s.find(s2, end=n) != -1
'''
{sのn番目[より前に|以前に]|s2が}含まれるかどうか
'''

s.find(s2, end=n) == -1
'''
{sのn番目[より前に|以前に]|s2が}含まれないかどうか
'''

s.find(s2, start=n, end=n2) != -1
'''
{sのn番目とn2番目の間に|s2が}含まれるかどうか
{sのn[|番目]からとn2[|番目]までの[間|範囲]に|s2が}含まれるかどうか
'''

s.find(s2, start=n, end=n2) == -1
'''
sのn番目とn2番目の間にs2が含まれないかどうか
{sのn[|番目]からとn2[|番目]までの[間|範囲]に|s2が}含まれないかどうか
'''

s.find(s2, start=n)
'''
{sのn[番目|]から|s2を}探す
'''

s.find(s2, start=n, end=n2)
'''
{sのnからn2[まで|]の[間|範囲]で|s2を}探す
'''

s.rfind(s2)
'''
@return(位置)
{sの末尾から|s2を}[探す|見つける]
'''

''.join(ss)
'''
@alt(連結する|結合する|繋げる)
ssを連結する
'''

iterable = [1, 1, 2]
''.join(map(str, iterable))
'''
{iterableを|文字列[に変換し|とし]て}連結する
'''

','.join(map(str, iterable))
'''
{iterableを|カンマ区切りで}連結する
'''

s.join(map(str, iterable))
'''
@return(文字列)
{iterableを|sで}連結する
'''

s.count(s2)
'''
@alt(カウントする|数える)
sの_s2の[出現回数|登場回数][|をカウントする]
sの_s2をカウントする
'''

s.count(s2, start=n, end=n2)
'''
@alt(までの範囲|の[範囲|間])
sのnからn2までの範囲でs2の[出現回数|登場回数][|をカウントする]
sのnからn2までの範囲でs2をカウントする
'''

s.startswith(s2)
'''
@alt(接頭辞|先頭|プレフィックス|左[側|端])
@alt(始まる|開始する)
{sが|s2で}始まるかどうか
sの接頭辞が_s2かどうか
'''

s.startswith(s2, n)
'''
{sのn番目が|s2で}始まるかどうか
'''

s.endswith(s2)
'''
@alt(接尾辞|末尾|サフィックス|右[側|端])
@alt(終わる|終了する)
{sが|s2で}終わるかどうか
sの接尾辞が_s2かどうか
'''

s.removeprefix(s2)
'''
@alt(安全に|エラーなく)
{[|安全に]|sの接頭辞から|s2を}取り除く
'''

s.removesuffix(s2)
'''
@return(文字列)
{[|安全に]|sの接尾辞から|s2を}取り除く
'''

filename.endswith('.csv')
'''
{ファイル名filenameが|CSVファイル}かどうか
'''

s.isupper()
'''
sが[全て|]大文字かどうか
'''

s.islower()
'''
sが[全て|]小文字かどうか
'''

s.isdigit()
'''
sが[全て|]数字かどうか
'''

s.isalpha()
'''
sが[全て|][アルファベット|英字]かどうか
'''

s.isalnum()
'''
sが[全て|]英数字かどうか
'''


s.isascii()
'''
@alt(アスキー文字|ASCII文字)
sが[全て|]アスキー文字かどうか
'''


s.isspace()
'''
sが[全て|]空白[文字|][からなる|]かどうか
'''


s.isdecimal()
'''
s[は|が][全て|]十進数字かどうか
'''

s.isnumeric()
'''
s[は|が][全て|]数値かどうか
'''


any(c.__X__() for c in s)
'''
@alt(含まれる|ある)
@X(isupper|islower|isdigit|isalpha|isalnum|isspace|アスキー文字)
@Y(大文字|小文字|数字|アルファベット|英数字|空白|isascii)
{s内に|[ひとつでも|]__Y__が}含まれるかどうか
'''

any(not c.isascii() for c in s)
'''
{s内に|[ひとつでも|]非アスキー文字が}含まれるかどうか
'''

s.isidentifier()
'''
s[は|が][全て|]識別子名かどうか
'''

keyword.iskeyword(s)
'''
@test(import keyword;_)
s[は|が]キーワードかどうか
'''

s.isprintable()
'''
s[は|が][全て|]印字できるかどうか
'''

s.istitle()
'''
s[は|が]タイトルケースかどうか
'''

s.encode(encoding='utf-8', errors='strict')
'''
sを[UTF8で]バイト列に変換する
'''

s.encode(encoding='sjis', errors='ignore')
'''
sをSJIS[の|で]バイト列に変換する
'''

s.encode(encoding='unicode_escape')
'''
{sを|ユニコードエスケープで}バイト列に変換する
'''


encoding = 'utf-8'

s.encode(encoding=name)
'''
@alt(エンコーディング|文字コード)
{sを|エンコーディングnameで}バイト列に変換する
'''

s.encode(errors='ignore')
'''
{エラーを無視して|sを}バイト列に変換する
'''

args = []
text.format(*alist)
'''
@test(text='<{}>';_)
@alt(フォーマットする|文字列整形する)
書式textを{alistを|引数として}フォーマットする
'''

mapping = {}
text.format_map(mapping)
'''
@test(text='<{}>';mapping={};_)
書式textをmappingでフォーマットする
'''

len(s)
'''
sの[長さ|文字数|大きさ][|を得る]
'''

s[0]
'''
sの[先頭|最初][|の文字][|を得る]
'''

s[-1]
'''
sの[末尾|最後][|の文字][|を得る]
'''

s[n]
'''
sのn番目[|の文字][|を得る]
'''

s == s2
'''
sとs2を比較する
sとs2[は|が][同じ|等しい]かどうか
sが_s2と[同じ|等しい]か比較する
'''

s.casefold() == s2.casefold()
'''
sとs2を[大文字小文字|ケース]を無視して比較する
'''

# Tips

('ァ' <= s <= 'ン')
'''
@alt(片仮名|カタカナ)
@alt(平仮名|ひらがな)
sが片仮名かどうか
'''

('ぁ' <= s <= 'ん')
'''
sが平仮名かどうか
'''

('一' <= s <= '鿐')
'''
sが漢字かどうか
'''

re.search('[\u4E00-\u9FD0]', s)
'''
{s[|内|中]に|漢字が}[含まれる|使われている]かどうか
'''

re.search('[あ-んア-ン一-鿐]', s)
'''
{s[|内|中]に|日本語が}[含まれる|使われている]かどうか
'''

''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
'''
sの片仮名を平仮名に変換する
'''

''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
'''
sの平仮名を片仮名に変換する
'''

s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
'''
sの全角数字を半角数字に変換する
'''


"""
# 正規表現

re.search(x, y)
{y(文字列)にx(正規表現)がマッチする}最初の位置

re.match(x, y)
y(文字列)に/x(正規表現)がマッチするかどうか

re.fullmatch(x, y)
x(正規表現)が/y(文字列)全体にマッチするかどうか

re.split(x, y)
y(文字列)に[対し | おいて | ついて]、x(正規表現)でスプリットする
x(正規表現)でy(文字列)をスプリットする

箇所 = 部分 | 部分文字列 | 箇所

re.sub(x, y, z)
y(文字列)に[対し | おいて | ついて]、x(正規表現)でマッチした[箇所]をzにリプレースする
x(正規表現)でy(文字列)のマッチした[箇所]をzにリプレースする
{x(正規表現)にマッチした}{yの[箇所]}をzにリプレースする

re.subn(x, y, z)
y(文字列)に[対し | おいて | ついて]、x(正規表現)にマッチした[箇所]をzにリプレースする
{x(正規表現)でマッチした}{yの[箇所]}をzにリプレースする

re.findall(x, y)
y(文字列)に[対し | おいて | ついて]、x(正規表現)でマッチした[箇所]を[リストにする | 抽出する]
{x(正規表現)にマッチした}{yの[箇所]}を[リストにする | 抽出する]

re.compile(x)
x(正規表現)をコンパイルする

# sys


# os

"""
