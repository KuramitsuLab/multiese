# 文字列

import keyword
from importlib import import_module
import re

import string
'''
[文字列モジュール|string[|モジュール]]をインポートする

@prefix(部分文字列;部分文字列)
@alt(先頭|最初|左[側|端])
@alt(末尾|最後|後ろ|右[側|端])
@alt(左側|左)
@alt(右側|右)
'''

string = import_module('string')
keyword = import_module('keyword')

文字列 = 'ABC'
文字列2 = 'a'

n = 1


文字列リスト = ['A', 'B', 'C']  # 文字列(リスト|タプル)

''
'''
空文字[|列][|を得る]
'''

'\n'
'''
改行[|文字][|を得る]
'''

'\t'
'''
タブ[|文字][|を得る]
'''

' '
'''
[空白|スペース][|文字][|を得る]
'''

string.ascii_letters
'''
@alt(全ての|全)
@alt(全部|全て|)
@alt(アルファベット|英字)

アルファベットの文字列
アルファベットを全部得る
'''

string.ascii_lowercase
'''
[アルファベットの|]小文字列
[アルファベットの|]小文字を全部得る
'''

string.ascii_uppercase
'''
[アルファベットの|]大文字列
[アルファベットの|]大文字を全部得る
'''

string.digits
'''
全ての数字
数字を全部得る
'''

string.hexdigits
'''
全ての十六進数字
十六進数字を全部得る
'''

string.octdigits
'''
全ての[８|八]進数字
[８|八]進数字を全部得る
'''

string.punctuation
'''
@alt(句読点|句点)

全ての句読点文字
句読点文字を全部得る
'''

string.printable
'''
@alt(印字可能な文字|印字できる文字|印字)

全ての印字可能な文字
印字可能な文字を全部得る
'''

string.whitespace
'''
全ての空白文字
空白文字を全部得る
'''

文字コード = ord('A')

chr(文字コード)
'''
@alt(文字コード|ユニコード)

文字コード[から|を]文字[へ|に]変換する
文字コードに[相当|対応]する文字[|を得る]
'''

文字 = 'A'

ord(文字)
'''
@prefix(ch;文字)
@alt(ユニコード=[文字コード|ユニコード|[ASCII|アスキー]コード])

文字をユニコードに変換する
文字のユニコード[|を得る]
'''

ord(文字列[n])
'''
文字列のn番目をユニコードに変換する
'''

[ord(ch) for ch in 文字列]
'''
文字列をユニコード[のリスト|列]に変換する
'''

文字列.upper()
'''
文字列を[全て|]大文字に変換する
[文字列中の|]小文字を大文字に変換する
'''

文字列.lower()
'''
文字列を[全て|]小文字に変換する
[文字列中の|]大文字を小文字に変換する
'''

文字列.casefold()
'''
@alt(ケース|大文字小文字)

文字列のケースを[変換する|整える]
文字列を[全て|]小文字に変換する
文字列を[積極的に|特殊文字も含め]小文字に変換する
'''

list(文字列)
'''
@alt(文字リスト|文字のリスト)

文字列を文字リストに変換する
文字列中の文字を列挙する
文字列から一つずつ文字を列挙する
'''

文字列.split()
'''
@alt(区切る|分割する)
@alt(で_|によって|を[用い|使っ]て)

{文字列を|空白で}区切って、[文字列リストに変換する|列挙する]
{文字列を|空白で_}区切る
'''

list(map(int, 文字列.split()))
'''
@alt(整数リスト|整数のリスト|[|整]数列)

{文字列を|空白で_}区切って、整数リストに変換する
'''

文字列.splitlines()
'''
{文字列を|改行で}[分割し|区切り]、文字列リストに変換する
{文字列を|改行で_}区切る
'''

文字列.rsplit()
'''
{文字列を|[末尾|最後|右]から|空白で}区切る
'''

# セパレータ

部分文字列 = セパレータ = ';'
__X__ = ','
'''
@X(',';':';部分文字列;セパレータ)
@Y(カンマ;コロン;部分文字列;[区切り[記号|文字]|セパレータ])
'''

文字列.split(__X__)
'''
{文字列を|__Y__で}[分割して|区切って]、文字列リストに変換する
{文字列を|__Y__で_}区切って、列挙する
'''

文字列.rsplit(__X__)
'''
{文字列を|[末尾|最後|右]から|__Y__で}区切る
'''

文字列.partition()
'''
@alt(二分する|[二|]分割する|二つに分ける)

{文字列を|空白で}二分する
'''

文字列.partition(__X__)
'''
{文字列を|[|最初の]__Y__で_}二分する
'''

文字列.rpartition(__X__)
'''
{文字列を|最後の__Y__で_}二分する
'''

文字列.partition(__X__)[0]
'''
@alt(とき|時|場合)
@alt(二分し|二つに区切って)
@alt(分けた|分割した)

{文字列を|[|最初の]__Y__で}二分して、[前半|前の方]を得る
'''

文字列.partition(__X__)[-1]
'''
{文字列を|[|最初の]__Y__で}二分して、[残り|後半|後ろの方]を得る
'''

文字列.rpartition(__X__)[0]
'''
{文字列を|最後の__Y__で}二分して、[前半|最初の方]を得る
'''

文字列.rpartition(__X__)[-1]
'''
{文字列を最後の__Y__で}二分して、[残り|後半|後ろの方]を得る
{文字列を最後の__Y__で}分けたときの[後半の|残りの]文字列[|を得る|を取り出す]
'''

部分文字列 = 'A'
置換後の文字列 = 'a'

文字列.replace(部分文字列, 置換後の文字列)
'''
@alt(置き換える|置換する)
@prefix(newsub;[新しい|別の]文字列)

文字列を置き換える
[文字列中の|]部分文字列を置き換える
[文字列中の|]部分文字列を[新しい|別の]文字列[に|へ]置き換える
[文字列中の|]文字を[新しい|別の]文字[に|へ]置き換える
'''


文字列.replace(部分文字列, 置換後の文字列, n)
'''
{文字列を|n回だけ}置き換える
{文字列を|回数制限して}置き換える
{[文字列中の|]文字を|n回だけ}置き換える
'''

文字列.expandtabs(tabsize=n)
'''
文字列中のタブ[文字|]を[|n個の]空白に[置き換える|する]
'''

文字列.strip()
'''
@alt(不要な=[|不要な|余分な])

文字列の両端から不要な[空白|空白と改行]を取り除く
文字列をトリムする
'''

文字列.lstrip()
'''
文字列の先頭[から|の]不要な[空白|空白やタブ]を取り除く
文字列を左トリムする
'''

文字列.rstrip()
'''
文字列の[右[側|端]|末尾]から[|不要な|余分な][空白|改行]を取り除く
文字列を右トリムする
'''

# 文字/部分文字列

__X__ = 部分文字列
'''
@X(部分文字列;文字;'\t';'\n')
@Y(部分文字列;[指定した|]文字;[タブ|空白];改行)
'''

文字列.replace(__X__, '')
'''
@alt(取り除く|除く|除去する|消す)

文字列から__Y__を[全て|]取り除く
'''


文字列.strip(__X__)
'''
文字列の両端から__Y__を取り除く
'''

文字列.lstrip(__X__)
'''
文字列の[左[側|端]|先頭]から__Y__を取り除く
'''

文字列.rstrip(__X__)
'''
文字列の[右[側|端]|末尾]から__Y__を取り除く
'''

文字列幅 = 10

文字列.zfill(文字列幅)
'''
@alt(ゼロ埋めする|パディングする)

文字列をゼロ埋めする
'''

str(n).zfill(文字列幅)
'''
[整数|数値]をゼロ埋めした文字列に変換する
'''

文字列.center(文字列幅)
'''
文字列を[センタリング|中央寄せ][に|]する
'''

文字列.ljust(文字列幅)
'''
文字列を左寄せ[に|]する
'''

文字列.rjust(文字列幅)
'''
文字列を右寄せ[に|]する
'''

文字列.capitalize()
'''
文字列をキャピタライズする
文字列の先頭だけ大文字化する
'''

文字列.swapcase()
'''
[文字列の|]大文字と小文字を[交換する|逆にする|入れ替える]
文字列のケースを[入れ替える|交換する|逆にする]
'''

# 包含

別の文字列 = 文字列
__X__ = 別の文字列
'''
@X(['A', 'B', 'C']; 別の文字列)
@Y(リスト;別の文字列)
@alt(含まれる|ある|存在する)
@alt(含まれない|ない|存在しない)
'''

文字列 in リスト
'''
文字列がリストに含まれるかどうか
文字列がリストのいずれかどうか
'''

文字列 not in リスト
'''
文字列がリストに含まれないかどうか
文字列がリストのいずれでもないかどうか
'''

文字列 in 別の文字列
'''
文字列が[別の|指定した]文字列に含まれるかどうか
'''

文字列 not in 別の文字列
'''
文字列が[別の|指定した]に含まれるかどうか
'''

文字 in 文字列
'''
文字が[別の|指定した]文字列に含まれるかどうか
'''

文字 not in 文字列
'''
文字が[別の|指定した]文字列に含まれないかどうか
'''

文字列 = 'ABCDEFG'
部分文字列 = 'C'
開始位置 = 1
終了位置 = 3


文字列.find(部分文字列)
'''
{文字列[中|]から|部分文字列[の位置|]を}探す
{文字列の先頭から|部分文字列[の位置|]を}探す
'''

文字列.find(部分文字列, 開始位置) != -1
'''
{文字列の[開始|指定した]位置[以降に|より後に|先に]|部分文字列が}含まれるかどうか
'''

文字列.find(部分文字列, 開始位置) == -1
'''
{文字列の[開始|指定した]位置[以降に|より後に|から先に]|部分文字列が}含まれないかどうか
'''

文字列.find(部分文字列, 0, 終了位置) != -1
'''

{文字列の[終了|指定した]位置[より前に|以前に]|部分文字列が}含まれるかどうか
'''

文字列.find(部分文字列, 0, 終了位置) == -1
'''
{文字列の[終了|指定した]位置[より前に|以前に]|部分文字列が}含まれないかどうか
'''


文字列.find(部分文字列, 開始位置, 終了位置) != -1
'''
{文字列の指定した[範囲|区間][位置の間]に|部分文字列が}含まれるかどうか
'''

文字列.find(部分文字列, 開始位置, 終了位置) == -1
'''
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか
{文字列の開始位置[|番目]からと終了位置[|番目]までの[間|範囲]に|部分文字列が}含まれないかどうか
'''

文字列.find(部分文字列, 開始位置)  # 見つからない場合は-1
'''
文字列の後半から部分文字列[の位置|]を探す
開始位置を指定して部分文字列[の位置|]を探す
'''

文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
'''
文字列の前半から部分文字列[の位置|]を探す
終了位置[を指定して|まで]部分文字列[の位置|]を探す
'''

文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
'''
{部分文字列を|範囲を指定して}探す
{文字列の開始位置から終了位置まで|部分文字列を}探す
'''

文字列.rfind(部分文字列)  # 見つからない場合は-1
'''
{文字列の末尾から|部分文字列を}探す
'''

文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
'''
{部分文字列を|範囲を指定して|後方から}探す
{文字列の末尾から|範囲を指定して部分文字列を}探す
'''

文字列リスト = ['A', 'B', 'C']

''.join(文字列)
'''
@alt(連結する|結合する|つなげる|一つにする)

文字列リストを連結する
文字列リストを[連結して|]一つの文字列にする
'''

sep = ','

sep.join(文字列リスト)
'''
{文字列リストを|sepを区切りとして}連結する
{文字列リストを|sepを区切りにして}一つの文字列にする
'''

リスト = [1, 2, 3]

__X__.join(map(str, リスト))
'''
@X(' ';',';'\t';'\n';文字;文字列)
@Y(空白;カンマ;タブ;'改行;[指定した|]文字;[指定した|]文字列)
リスト[|の要素]を文字列として、__Y__で_連結する
'''


文字列.count(文字)
'''
@alt(カウントする|数える)
@alt(出現数=出現[|回数]|登場[|回数])

文字列中の[指定した|]文字の出現数
文字列中の[指定した|]文字をカウントする
文字列[|中]に[指定した|]文字がいくつあるか調べる
'''

文字列.count(部分文字列)
'''
文字列中の部分文字列の出現数[をカウントする|]
文字列中の部分文字列をカウントする
文字列中に部分文字列がいくつか含まれるか[調べる|カウントする]
'''

文字列.count(部分文字列, 開始位置, 終了位置)
'''
@alt(までの範囲|の[範囲|間])

[文字列中の|]部分文字列の出現数を範囲を指定してカウントする
開始位置から終了位置までに部分文字列がいくつか含まれるか調べる
'''

文字列.startswith(部分文字列)
'''
@alt(接頭辞|先頭|プレフィックス|左[側|端])
@alt(始まる|開始する)

{部分文字列が|subで}始まるかどうか
文字列の接頭辞[が|は]subかどうか
'''

文字列.startswith(部分文字列, 開始位置)
'''
{文字列の開始位置以降が|subで}始まるかどうか
'''

文字列.endswith(部分文字列)
'''
@alt(接尾辞|末尾|サフィックス|右[側|端])
@alt(終わる|終了する)

{文字列が|指定した文字列で}終わるかどうか
文字列の接尾辞[が|は]かどうか
'''

文字列.removeprefix(部分文字列)
'''
@alt(安全に|エラーなく)
{[|安全に]|文字列の接頭辞から|部分文字列を}取り除く
文字列から接尾辞を取り除[く|いた文字列]
'''

文字列.removesuffix(部分文字列)
'''
{[|安全に]|文字列の接尾辞から|部分文字列を}取り除く
文字列から接尾辞を取り除[く|いた文字列]
'''

filename = 'file.txt'  # ファイル name
__X__ = '.csv'
filename.startswith(__X__)
'''
@X('.csv';'.txt';'.tsv';'.json')
@Y(CSV;テキスト;TSV;JSON)
@prefix(filename;ファイル名)

{filenameが|__Y__ファイル}かどうか
'''

文字列.isupper()
'''
文字列が[全て|]大文字かどうか
'''

文字列.islower()
'''
文字列が[全て|]小文字かどうか
'''

文字列.isdigit()
'''
文字列が[全て|]数字かどうか
'''

文字列.isalpha()
'''
文字列が[全て|]アルファベットかどうか
'''

文字列.isalnum()
'''
文字列が[全て|]英数字かどうか
'''

文字列.isascii()
'''
@alt(アスキー文字|ASCII文字)

文字列が[全て|]アスキー文字かどうか
'''


文字列.isspace()
'''
文字列が[全て|]空白[文字|][からなる|]かどうか
'''


文字列.isdecimal()
'''
文字列[は|が][全て|]十進数字かどうか
'''

文字列.isnumeric()
'''
文字列[は|が][全て|]数値かどうか
'''

any(c.__X__() for c in 文字列)
'''
@X(isupper|islower|isdigit|isalpha|isalnum|isspace|isascii)
@Y(大文字|小文字|数字|アルファベット|英数字|空白|アスキー文字)

{文字列中に|[ひとつでも|]__Y__が}含まれるかどうか
'''

any(not c.__X__() for c in 文字列)
'''
{文字列中に|[ひとつも|]__Y__が}含まれないかどうか
{文字列中に|[ひとつでも|]非__Y__が}含まれるかどうか
'''

文字列.isidentifier()
'''
文字列[は|が][全て|][識別子|変数名]かどうか
'''

keyword.iskeyword(文字列)
'''
文字列[は|が][Pythonの|]キーワードかどうか
'''

文字列.isprintable()
'''
文字列[は|が][全て|]印字できるかどうか
'''

文字列.istitle()
'''
文字列[は|が]タイトルケースかどうか
'''

文字列.encode(encoding='utf-8', errors='strict')
'''
{文字列を|[UTF8で|]}バイト列に変換する
'''

文字列.encode(encoding='sjis', errors='ignore')
'''
{文字列を|SJISで}バイト列に変換する
'''

文字列.encode(encoding='unicode_escape')
'''
{文字列を|ユニコードエスケープで}バイト列に変換する
'''

encoding = 'utf-8'

文字列.encode(encoding=encoding)
'''
@prefix(encoding;[エンコーディング|文字コード])

{文字列を|encodingで_}バイト列に変換する
'''

文字列.encode(errors='ignore')
'''
{エラーを無視して|文字列を}バイト列に変換する
'''

args = []
書式 = ''

書式.format(*args)
'''
@alt(フォーマットする|文字列整形する)
@alt(書式|テンプレ[ート|]|書式文字列)

書式を{arg文字列を|引数として}フォーマットする
'''

辞書 = {'A': '1'}
書式 = '{A}'

書式.format_map(辞書)
'''
@test(text='<{}>';mapping={};$$)
書式を辞書でフォーマットする
'''

len(文字列)
'''
文字列の[長さ|文字数|大きさ][|を得る]
'''

文字列[0]
'''
文字列の[先頭|最初][|の文字][|を得る]
'''

文字列[-1]
'''
文字列の[末尾|最後][|の文字][|を得る]
'''

文字列[n]
'''
文字列のn番目[|の文字][|を得る]
'''

文字列 == 文字列2
'''
２つの文字列[は|が][同じ|等しい]かどうか
'''

文字列 != 文字列2
'''
２つの文字列[は|が][等しく|同じで]ないかどうか
'''

文字列 < 文字列2
'''
{２つの文字列を|辞書順で}比較する
{文字列[が|は]s2より|辞書順で}前かどうか
'''

文字列 > 文字列2
'''
{文字列[が|は]s2より|辞書順で}後かどうか
'''

文字列.casefold() == 文字列2.casefold()
'''
@alt(ケースを無視して|大文字小文字を無視して)
２つの文字列[が|は]ケースを無視して同じか
'''

文字列.casefold() < 文字列2.casefold()
'''
２つの文字列をケースを無視して比較する
'''

# Tips
('ァ' <= 文字 <= 'ン')
'''
@alt(片仮名|カタカナ)
@alt(平仮名|ひらがな)
文字[が|は]片仮名かどうか
'''

('ぁ' <= 文字 <= 'ん')
'''
文字[が|は]平仮名かどうか
'''

('\u4E00' <= 文字 <= '\u9FD0')
'''
文字[が|は]漢字かどうか
'''

re.search('[\u4E00-\u9FD0]', 文字列)
'''
{文字列[|内|中]に|漢字が}[含まれる|使われている]かどうか
'''

re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
'''
{文字列[|内|中]に|日本語が}[含まれる|使われている]かどうか
'''

''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
'''
[文字列中の|]片仮名を平仮名に変換する
'''

''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
'''
[文字列中の|]平仮名を片仮名に変換する
'''

文字列.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
'''
[文字列中の|]全角数字を半角数字に変換する
'''
