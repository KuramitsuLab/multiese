# 整数

整数 = 2
n = 2
整数 = 4
整数2 = -1
文字列 = '1101'

__X__ = 2
'''
@X(2;8;16;n)
@Y(二進[数|];八進[数|];十六進[数|];n進[数|])
@alt(に変換する|[化|に]する)
@alt(二進|2進)
@alt(八進|8進)
@alt(十六進|16進)
'''

int(文字列, __X__)
'''
__Y__文字列を整数に変換する
'''

整数 = 2
バイト数 = 256

int(文字列, __X__).to_bytes(length=バイト数, byteorder='big')
'''
@alt(バイト列|バイナリ)

__Y__文字列をバイト列に変換する
'''

__X__ = bin
'''
@X(bin|oct|hex)
@Y(二進|八進|十六進)
'''

__X__(整数)
'''
@alt(表現|表記|リテラル)

整数の__Y__[数|]表現[|を得る]
整数を__Y__[数|]表現に変換する
'''

__X__(整数)[2:]
'''
整数の__Y__[数|]文字列[|を得る]
整数を__Y__[数|]文字列に変換する
'''

整数.bit_length()
'''
整数のビット長[|を見る]
'''

(整数.bit_length() + 7) // 8
'''
整数のバイト長[|を見る]
'''

整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
'''
整数をバイト列に変換する
'''

整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
'''
{整数を|符号付きで}バイト列に変換する
'''

整数.to_bytes(length=バイト数, byteorder='big')
'''
{整数を|[|符号なしで]}バイト列に変換する
'''

整数.to_bytes(length=バイト数, byteorder='big', signed=True)
'''
{整数を|符号付きで}バイト列に変換する
'''

整数 + 整数2
'''
@alt(求める|計算する|算出する|が欲しい)

整数に整数を[加える|加算する]
整数[プラス|足す|＋]整数[|を求める]
[二つの|]整数の和[|を求める]
'''

整数 - 整数2
'''
整数から整数を[引く|減算する]
整数[マイナス|引く|ー]整数[|を求める]
[二つの|]整数の差[|を求める]
'''

整数 * 整数2
'''
整数に整数を[かける|掛ける]
整数[かける|掛ける|×]整数[|を求める]
[二つの|]整数の積[|を求める]
'''

整数 / 整数2
'''
整数を整数で[割る|わる]
整数[わる|割る|÷]整数[|を求める]
[二つの|]整数の商[|を求める]
'''

整数 // 整数2
'''
整数を整数で割って[小数点以下|その結果]を切り捨てる
整数を[|整数で]整数除算する
'''

__X__ = 2
'''
@X(2;3;4;5;8;n)
@Y([二|2];[三|3];[四|4];[五|5];[八|8];n)
'''

整数 ** __X__
'''
整数の__Y__乗[|を求める]
'''

整数 / __X__
'''
整数の__Y__分の[一|1][|を求める]
'''

整数 % 整数2
'''
整数を整数で割った[余り|モジュロ|剰余|mod][|を求める]
[整数の|][割り算の余り|モジュロ][|を求める]
'''

(整数 + 整数2 - 1) // 整数2
'''
整数を整数で割って[小数点以下|その結果]を切り上げる
整数[除算|割り算]の切り上げ[|を求める]
'''

整数 & 整数2
'''
@alt(整数同士|２つの整数|整数と整数)
整数同士の[論理|ビット]積[|を求める]
'''

整数 | 整数2
'''
整数同士の[論理|ビット]和[|を求める]
'''

整数 ^ 整数2
'''
整数同士の[排他的論理和|XOR][|を求める]
'''

整数 << n
'''
整数を[nだけ|]左シフトする
整数の左シフト[|を求める]
'''

整数 >> n
'''
整数を[nだけ|]右シフトする
整数の右シフト[|を求める]
'''

変数 = 2

変数 += 整数
'''
@alt(変数|変数の値)

変数を[|整数だけ][増加させる|大きくする|増やす]
'''

変数 -= 整数
'''
変数を[|整数だけ][減少させる|小さくする|減らす]
'''

変数 *= 整数
'''
変数を整数倍にする
'''

変数 **= 整数
'''
変数を[整数|累]乗に増やす
'''

変数 /= 整数
'''
変数を整数分の１にする
'''

変数 /= 2
'''
変数を半分にする
'''

変数 //= 整数
'''
{変数を|切り捨てながら}整数分の[一|1]にする
変数を整数分の[一|1]にする
'''

変数 //= 2
'''
{変数を|切り捨てながら}半分にする
変数を半分にする
'''

変数 %= 整数
'''
変数を整数で割った余りにする
'''

整数 == 整数2
'''
nと整数が[等しい|同じ値]かどうか
n[が|は]整数と等しいかどうか
n[が|は]整数かどうか
'''

整数 > 整数2
'''
整数が整数2より大きいかどうか
整数が整数2よりも大きいかどうか
'''

整数 < 整数2
'''
整数が整数2より小さいかどうか
整数が整数2よりも小さいかどうか
'''

整数 >= 整数2
'''
整数が整数2以上かどうか
'''

整数 <= 整数2
'''
整数が整数2以下かどうか
'''

整数 < 整数2 or 整数 >= n3
'''
整数が整数2未満、[または|もしくは|それか]n3以上かどうか
'''

整数 <= 整数2 or 整数 >= n3
'''
整数が整数2以下、[または|もしくは|それか]、n3以上かどうか
'''

整数 <= 整数2 and 整数2 <= n3
'''
整数2がn以上、かつ、n3以下かどうか
'''

整数 < 整数2 and 整数2 < n3
'''
整数2がnより大きく、かつ、n3[未満|より小さい]かどうか
'''

整数 % 2 == 0
'''
整数が偶数かどうか
整数が2で割り切れるかどうか
'''

整数 % 2 == 1
'''
整数が奇数かどうか
整数が2で割り切れないかどうか
'''

整数 % 3 == 0
'''
整数が3の倍数かどうか
整数が3で割り切れるかどうか
'''

整数 % 5 == 0
'''
整数が5の倍数かどうか
整数が5で割り切れるかどうか
'''

整数 % n == 0
'''
整数がnの倍数かどうか
整数がnで割り切れるかどうか
'''

整数 % n != 0
'''
整数がnの倍数でないかどうか
整数がnで割り切れないかどうか
'''

整数 > 0
'''
整数が正の[数|整数]かどうか
'''

整数 >= 0
'''
整数が非負数でないかどうか
'''

整数 < 0
'''
整数が負の[数|整数]かどうか
'''

-9 <= 整数 <= 9
'''
整数が一桁の[数|整数]かどうか
整数が-9以上、9以下かどうか
'''

0 <= 整数 <= 9
'''
整数が一桁の[数|整数]かどうか
'''

__X__ = [0, 1, 2]
整数 in __X__
'''
@X(aList;aSet;aTuple;aArray)
@Y(aList;aSet;aTuple;aArray)
整数[が|は] __Y__の[どれか|いづれか|一つ[|である]]かどうか
'''

整数 == 1 or 整数 == 2
'''
整数が1、もしくは2かどうか
'''

整数 == 1 or 整数 == 2 or 整数 == 3
'''
整数が1、もしくは2、もしくは3に等しいかどうか
'''

len(str(整数))
'''
整数の桁数[|を求める]
整数[が|は]何桁か
'''

整数 = 123

sum(map(int, str(整数)))
'''
@alt(総和|和)

整数の[各|それぞれの]桁の総和[|を求める|が欲しい]
'''

-9 <= 整数 <= 9
'''
整数が一桁[の[数|整数]|]かどうか
整数が-9以上、9以下かどうか
'''

0 <= 整数 <= 9
'''
整数が一桁の正の[数|整数]かどうか
'''

整数 == 1 or 整数 == 2
'''
整数が1、もしくは2かどうか
'''

整数 == 1 or 整数 == 2 or 整数 == 3
'''
整数が1、もしくは2、もしくは3に等しいかどうか
'''
