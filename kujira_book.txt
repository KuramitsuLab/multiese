
# くじら飛行機の入門書から得た

print("Hello World")
"Hello World"とプリントする
「[ハローワールド|こんにちは世界]」とプリントする
[試しに|]何か動かす
最初のプログラム

3+8
3足す8
3に8を加算する
3と8の和

1+2+3
1足す2足す3
1,2,3の和

100-70
100から70を引く

5 * 12
5かける12

10 / 5
10を5で割る

10 // 5
10を5で割った商

10 % 5
10を5で割った余り

10 ** 5
10の5乗

"abc" + "ABC"
文字列"abc"と"ABC"を[連結する|結合する|繋ぐ]
"abc"と"ABC"を[連結する|結合する|繋ぐ]

str(1)
1を文字列に変換する
1を文字列にする
1を変換した文字列

"X" * 3
文字列"X"を3回繰り返す
文字列"X"を3回繰り返す

x = input()
ユーザから入力を得る
ユーザが入力した文字列をxとする
[ユーザから|]入力された文字列

x = input("X")
"X"というプロンプトを表示し、ユーザに文字列を入力させる
"X"という問い合わせに対し、ユーザから/入力を得る

float(x)
xを浮動小数点数に変換する
xを浮動小数点数にする
xを変換した浮動小数点数

int(x)
xを整数に変換する
xを整数にする
xを変換した整数

x = int(input())
[ユーザが入力した|入力された]整数をxとする
入力された整数

x = float(input())
ユーザが入力した浮動小数点数をxとする
入力された浮動小数点数

type(x)   @@check
xの[型|クラス]

a == b      @@not?.if @@not?.andor @@while
aとbが等しいかどうか
aがbと等しいかどうか
aがbかどうか

a > b      @@not?.if @@not?.andor @@while
aがbより大きいかどうか

a < b      @@not?.if @@not?.andor @@while
aがbより小さいかどうか

a >= b      @@not?.if @@not?.andor @@while
aがb以上かどうか

a <= b      @@not?.if @@not?.andor @@while
aがb以下かどうか

a % 2 == 0      @@not?.if @@not?.andor @@while
aが偶数かどうか

a % 2 == 1      @@not?.if @@not?.andor @@while
aが奇数かどうか

a % n == 0      @@not?.if @@not?.andor @@while
aがnの倍数かどうか
aがnで割り切れるかどうか

pass
何もしない
パスする

quit()
プログラムの実行を[途中で|]終了する
プログラムの実行を中断する

True
真

False
偽

if age < 6 or age >= 60:
[もし|]ageが6未満、[または|もしくは]60以上のとき
もし6才未満、または60才以上のとき

if age < 6 and age >= 60:
もしageが6未満、かつ60以上のとき

weight / (height / 100) ** 2    @@calc
BMIを求めたい
@type(weight, 体重)と@type(height, 身長)からBMI
@type(height)と@type(weight)からBMI

random.randint(1,6)
サイコロの[目|出目]
サイコロを振った[目|値]
1から6までの乱数

time.sleep(3)
3秒[間|]、プログラムの実行を停止する
3秒[間|]、待つ
3秒[間|]、止める

while True: pass
無限ループ
とりあえず、繰り返す

for i in range(5):
５回、繰り返す

break
繰り返しを中断する
繰り返しから[強制的に|]抜け出す

continue
繰り返しの先頭に戻る
もう一[回|度]、繰り返す

[0] * n
大きさnの配列

for a in [1,2,3]:
リスト`[1,2,3]`の各要素を処理する
リスト`[1,2,3]`の要素を繰り返すたびにaに代入する

a.append(x)
@type(a, リスト)の末尾にxを追加する

del(a[2])
@type(a) から2番目の[要素|値]を削除する

a[start:end]
@type(a) の一部分を取り出す

sum(a)
@type(a)の合計[値|]
@type(a)の総和

sum(a)/len(a)
@type(a)の平均[値|]

random.suffle(a)
@type(a)をシャッフルする

d.keys()
@type(d, 辞書)のキーの一覧を得る
@type(d)のキーの一覧

d[key]
@type(d)のキーkeyの[データ|値]を参照する
@type(d)のキーkeyの[データ|値]

for key in d.keys(): value = d[key]
@type(d)に入っている[データ|値]を[一つずつ|]処理する

math.ceil(x)
実数xの小数点以下を切り上げる
xの小数点以下を切り上げた整数

key in d
@type(d)に@type(key, キー)が[存在する|含まれている|ある]かどうか

key not in date
@type(d)にキーkeyが[存在しない|含まれていない|ない]かどうか

s.strip()
@type(s, 文字列)の前後の空白を[除去する|取り除く]
@type(s)の[余分な|]改行を除去する

s.split(',')
@type(s)を[カンマ|',']で[区切る|分割する]
@type(s)をカンマで[区切った|分割した]文字列のリスト

sorted(a)
aを[昇順に|小さい順に][ソートする|整列する|並べる|並べ直す|並べ変える]
aを昇順に[ソートした|整列した|並べた|並べ直した|並べ替えた]列

sorted(a, reverse=True)
aを[降順に|大きい順に|逆順に]ソートする
aを降順にソートした列

datetime.date.today()
プログラムを実行した日付
[本日|今日]の日付

datetime.date.today().year
プログラムを実行した年
本日の年

datetime.date.today().month
プログラムを実行した月
本日の月

datetime.date.today().day
プログラムを実行した日
本日の日

x.year  @@it
xの年

x.month  @@it
xの月

x.day  @@it
xの日

datetime.datetime.now()
[Python|プログラム]を実行した[タイムスタンプ|エポック|エポックタイム|エポック秒]
本日のタイムスタンプ
