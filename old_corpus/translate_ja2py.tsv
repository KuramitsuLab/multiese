translate: x2をxとする	x = x2	translate: x2をxとする	_;x	3.0
translate: x2をx[に[代入|]する|とする]	x = x2	translate: x2をxに代入する	_;x	3.0
translate: x2をx[に設定する|に変更する|に[セット|指定]する|にする]	x = x2	translate: x2をxに設定する	_;x	3.0
translate: xはx2である	x = x2	translate: xはx2である	_;x	3.0
translate: xとx2[の値|]を[スワップする|入れ替える]	x, x2 = x2, x	translate: xとx2の値をスワップする	_;x	3.0
translate: xとx2の両方ともnとする	x = x2 = n	translate: xとx2の両方ともnとする	_;x	1
translate: xとx2の両方にnを代入する	x = x2 = n	translate: xとx2の両方にnを代入する	_;x	1
translate: xとx2の両方をn[に設定する|に変更する|に[セット|指定]する|にする]	x = x2 = n	translate: xとx2の両方をnに設定する	_;x	1
translate: xとx2をそれぞれnとn2とする	x, x2 = n, n2	translate: xとx2をそれぞれnとn2とする	_;x	1
translate: それぞれnとn2をxとx2[に[代入|]する|とする]	x, x2 = n, n2	translate: それぞれnとn2をxとx2に代入する	_;x	1
translate: xとx2をそれぞれnとn2[に設定する|に変更する|に[セット|指定]する|にする]	x, x2 = n, n2	translate: xとx2をそれぞれnとn2に設定する	_;x	1
translate: x, x2, x3をそれぞれn, n2, n3とする	x, x2, x3 = n, n2, n3	translate: x, x2, x3をそれぞれn, n2, n3とする	_;x	1
translate: x, x2, x3にそれぞれn, n2, n3を代入する	x, x2, x3 = n, n2, n3	translate: x, x2, x3にそれぞれn, n2, n3を代入する	_;x	1
translate: x, x2, x3をそれぞれn, n2, n3[に設定する|に変更する|に[セット|指定]する|にする]	x, x2, x3 = n, n2, n3	translate: x, x2, x3をそれぞれn, n2, n3に変更する	_;x	1
translate: xの絶対値	abs(x)	translate: xの絶対値	_	1.5
translate: xを[論理値|ブール値]に[変換|]する	bool(x)	translate: xを論理値に変換する	_	True
translate: xが真[か[|どうか][調べる||[確認|判定|テスト]する]|]	bool(x)	translate: xが真か確認する	_	True
translate: x, x2の複素数[|を[求める|計算する|算出する]]	complex(x, x2)	translate: x, x2の複素数	_	(1.5+3j)
translate: xとx2の商と余りをペアで得る	divmod(x, x2)	translate: xとx2の商と余りをペアで得る	_	(0.0, 1.5)
translate: xを浮動小数点数に[変換|]する	float(x)	translate: xを浮動小数点数に変換する	_	1.5
translate: xを整数に[変換|]する	int(x)	translate: xを整数にする	_	1
translate: xを印字できる文字列にする	ascii(x)	translate: xを印字できる文字列にする	_	1.5
translate: xの印字可能な文字列	ascii(x)	translate: xの印字可能な文字列	_	1.5
translate: xの絶対値[|を[計算する|求める]]	abs(x)	translate: xの絶対値	_	1.5
translate: xの複素数[|を[計算する|求める]]	complex(x)	translate: xの複素数	_	(1.5+0j)
translate: xとx2から[成る|なる]複素数[|を[計算する|求める]]	complex(x, x2)	translate: xとx2から成る複素数	_	(1.5+3j)
translate: xを実部[、|]x2を虚部とした複素数[|を[計算する|求める]]	complex(x, x2)	translate: xを実部、x2を虚部とした複素数	_	(1.5+3j)
translate: 商と余りを同時に[計算する|求める]	divmod(x, x2)	translate: 商と余りを同時に計算する	_	(0.0, 1.5)
translate: xのハッシュ値[|を[計算する|求める]]	hash(x)	translate: xのハッシュ値	_	1152921504606846977
translate: xのx2乗[|を[計算する|求める]]	pow(x, x2)	translate: xのx2乗	_	3.375
translate: xのx2乗のx3剰余[|を[計算する|求める]]	pow(x, x2, x3)	translate: xのx2乗のx3剰余	_	(TypeError('pow() 3rd argument not allowed unless all arguments are integers'), '_')
translate: xのx2乗してx3による余り[|を[計算する|求める]]	pow(x, x2, x3)	translate: xのx2乗してx3による余り	_	(TypeError('pow() 3rd argument not allowed unless all arguments are integers'), '_')
translate: xの小数点[以下]を[丸める|四捨五入する]	round(x)	translate: xの小数点以下を丸める	_	2
translate: xを[の|を]小数点[以下]第一位で[丸める|四捨五入する]	round(x, 1)	translate: xをの小数点以下第一位で丸める	_	1.5
translate: x[の|を]小数点[以下]第n位で[丸める|四捨五入する]	round(x, n)	translate: xの小数点以下第n位で丸める	_	1.5
translate: x[の|を]十の位で[丸める|四捨五入する]	round(x, -1)	translate: xの十の位で丸める	_	0.0
translate: x[の|を]百の位で[丸める|四捨五入する]	round(x, -2)	translate: xの百の位で丸める	_	0.0
translate: x[の|を]千の位で[丸める|四捨五入する]	round(x, -3)	translate: xの千の位で丸める	_	0.0
translate: x[、|]x2[、|]x3の[|中で|うち][最大値|[最も大きい値|最大の値|一番小さい値]][|を[求める|[計算する|求める]|算出する]]	max(x, x2, x3)	translate: x、x2、x3の最大値	_	3.0
translate: x[、|]x2[、|]x3の[|中で|うち][最小値|[最も小さい値|最小の値|一番小さい値]][|を[求める|[計算する|求める]|算出する]]	min(x, x2, x3)	translate: x、x2、x3の最小値	_	0.19
translate: xを[浮動小数点数型|浮動小数点数|実数]に[変換|]する	float(x)	translate: xを浮動小数点数型に変換する	_	1.5
translate: xを[整数型|整数]に[変換|]する	int(x)	translate: xを整数型に変換する	_	1
translate: xを[文字列型|文字列]に[変換|]する	str(x)	translate: xを文字列型に変換する	_	1.5
translate: nかつn2	n and n2	translate: nかつn2	_	3
translate: nまたはn2	n or n2	translate: nまたはn2	_	1
translate: nではない	not n	translate: nではない	_	False
translate: 真	True	translate: 真	_	True
translate: 偽	False	translate: 偽	_	False
translate: 未定値	None	translate: 未定値	_	None
translate: [コレクション|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]|カウンタ|[名前付きタプル|[構造体|簡易クラス]]]を[使う|[使用する|用いる]]	import collections	translate: 両端キューを使う	_;type(collections)	<class 'module'>
translate: {[空の|][両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque()	translate: 空のキューを新しく作る	_	deque([])
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableから|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque(iterable)	translate: リストiterableから両端キューを新しく作る	_	deque([0, 1, 2, 4])
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableを[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]に[変換|]する	collections.deque(iterable)	translate: リストiterableを両端キューに変換する	_	deque([0, 1, 2, 4])
translate: {[最大長|上限[|長||制限された長さ]]をnに[|制限]して|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque(maxlen=n)	translate: 最大長をnにして両端キューを新しく作る	_	deque([], maxlen=1)
translate: {[最大長|上限[|長||制限された長さ]]nの[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque(maxlen=n)	translate: 最大長nの両端キューを新しく作る	_	deque([], maxlen=1)
translate: {[最大長|上限[|長||制限された長さ]]をnに[|制限]して|[[リスト|タプル|配列]|列|イテラブル|]iterableから|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[|[新しく|新たに|]]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque(iterable, maxlen=n)	translate: 最大長をnにしてリストiterableから両端キューを作る	_	deque([4], maxlen=1)
translate: {[最大長|上限[|長||制限された長さ]]nの[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[[リスト|タプル|配列]|列|イテラブル|]iterableから|[|[新しく|新たに|]]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque(iterable, maxlen=n)	translate: リストiterableから最大長nの両端キューを準備する	_	deque([4], maxlen=1)
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableの[テイルフィルタ|tailフィルタ]を[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.deque(iterable, maxlen=n)	translate: リストiterableのテイルフィルタを作る	_	deque([4], maxlen=1)
translate: {[空の|][両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.deque()	translate: 新しく空の両端キューを作って、Xに代入する	_;X	deque([])
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableから|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.deque(iterable)	translate: 新しくリストiterableから両端キューを作って、Xに代入する	_;X	deque([0, 1, 2, 4])
translate: {[最大長|上限[|長||制限された長さ]]をnに[|制限]して|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.deque(maxlen=n)	translate: 最大長をnにして両端キューを新しく作って、Xに代入する	_;X	deque([], maxlen=1)
translate: {[最大長|上限[|長||制限された長さ]]nの[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[新しく|新たに|]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	X = collections.deque(maxlen=n)	translate: 最大長nの両端キューを新しく作る	_;X	deque([], maxlen=1)
translate: {[最大長|上限[|長||制限された長さ]]をnに[|制限]して|[[リスト|タプル|配列]|列|イテラブル|]iterableから|[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[|[新しく|新たに|]]}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.deque(iterable, maxlen=n)	translate: 最大長をnにしてリストiterableから両端キューを作って、Xに代入する	_;X	deque([4], maxlen=1)
translate: {[最大長|上限[|長||制限された長さ]]nの[両端キュー|[双方向キュー|デック]|[キュー|スタック]|deque[|オブジェクト]]を|[[リスト|タプル|配列]|列|イテラブル|]iterableから|[|[新しく|新たに|]]}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.deque(iterable, maxlen=n)	translate: タプルiterableから最大長nの両端キューを作って、Xに代入する	_;X	deque([4], maxlen=1)
translate: {デックdeqの[先頭|最初|左[|側]]に|[文字列|オブジェクト|]elementを}[追加する|[付け|つけ]加える]	deq.appendleft(element)	translate: 文字列elementをデックdeqの先頭に追加する	deq = collections.deque();_;deq	deque([2])
translate: {デックdeqに|[文字列|オブジェクト|]elementを}[エンキューする|enqueueする|データを入れる]	deq.appendleft(element)	translate: デックdeqに文字列elementをエンキューする	deq = collections.deque();_;deq	deque([2])
translate: {デックdeqの[末尾|最後|右[|側]]に|[文字列|オブジェクト|]elementを}[追加する|[付け|つけ]加える]	deq.append(element)	translate: デックdeqの末尾に文字列elementを追加する	deq = collections.deque();_;deq	deque([2])
translate: {デックdeqに|[文字列|オブジェクト|]elementを}[プッシュする|詰む|スタックする]	deq.append(element)	translate: 文字列elementをデックdeqにプッシュする	deq = collections.deque();_;deq	deque([2])
translate: {デックdeqの[先頭|最初|左[|側]]に|[[リスト|タプル|配列]|列|イテラブル|]iterableの[各|][要素|[値|データ]]を[|順に]}[追加する|[付け|つけ]加える]	deq.extendleft(iterable)	translate: デックdeqの先頭にリストiterableの各要素を追加する	deq = collections.deque();_;deq	deque([4, 2, 1, 0])
translate: {デックdeqの[末尾|最後|右[|側]]に|[[リスト|タプル|配列]|列|イテラブル|]iterableの[各|][要素|[値|データ]]を[|順に]}[追加する|[付け|つけ]加える]	deq.extend(iterable)	translate: デックdeqの末尾にリストiterableの各要素を追加する	deq = collections.deque();_;deq	deque([0, 1, 2, 4])
translate: {デックdeqのn番目に|[文字列|オブジェクト|]elementを}[挿入する|[途中|]追加する]	deq.insert(n, element)	translate: デックdeqのn番目に文字列elementを挿入する	deq = collections.deque();_;deq	deque([2])
translate: {デックdeqの[先頭|最初|左[|側]]から|[要素|[値|データ]]を}[取り除く|取り出す|削除する]	deq.popleft()	translate: デックdeqの最初から要素を取り除く	deq = collections.deque([1,2]);_;deq	deque([2])
translate: デックdeqを[デキューする|dequeue|要素を出す]	deq.popleft()	translate: デックdeqをデキューする	deq = collections.deque([1,2]);_;deq	deque([2])
translate: {デックdeqの[末尾|最後|右[|側]]から|[要素|[値|データ]]を}[取り除く|取り出す|削除する]	deq.pop()	translate: 要素をデックdeqの末尾から取り除く	deq = collections.deque([1,2]);_;deq	deque([1])
translate: デックdeq[を|から]ポップする	deq.pop()	translate: デックdeqからポップする	deq = collections.deque([1,2]);_;deq	deque([1])
translate: {デックdeqから|最初の[文字列|オブジェクト|]elementを}[取り除く|取り出す|削除する]	deq.remove(element)	translate: デックdeqから最初の文字列elementを取り除く	deq = collections.deque([1,2]);_;deq	deque([1])
translate: デックdeqを[空にする|クリアする|全て取り除く]	deq.clear()	translate: デックdeqを空にする	deq = collections.deque([1,2]);_;deq	deque([])
translate: {デックdeqの[[要素|[値|データ]]|[順序|順[|番]]]を|[右に|]|[|[ひとつ|一つ]]}[ローテートする|[持ち|]回す|ローテーションする]	deq.rotate()	translate: 右にデックdeqの値をローテートする	deq = collections.deque([1,2]);_;deq	deque([2, 1])
translate: {デックdeqの[[要素|[値|データ]]|[順序|順[|番]]]を|[右に|]|n個分}[ローテートする|[持ち|]回す|ローテーションする]	deq.rotate(n)	translate: デックdeqの要素を右にn個分ローテートする	deq = collections.deque([1,2]);_;deq	deque([2, 1])
translate: {デックdeqの[[要素|[値|データ]]|[順序|順[|番]]]を|左に|n個分}[ローテートする|[持ち|]回す|ローテーションする]	deq.rotate(-n)	translate: 左にn個分デックdeqの要素をローテートする	deq = collections.deque([1,2]);_;deq	deque([2, 1])
translate: デックdeqの[最大長|上限[|長||制限された長さ]][|を得る]	deq.maxlen	translate: デックdeqの最大長	deq = collections.deque([1,2],maxlen=2);_	2
translate: デックdeqの[大きさ|[要素|[値|データ]]数|サイズ|長さ][|を[求める|計算する|算出する]]	len(deq)	translate: デックdeqの大きさを求める	deq = collections.deque([1,2]);_	2
translate: デックdeq[が|は]空[|である][か[|どうか][調べる||[確認|判定|テスト]する]|]	len(deq) == 0	translate: デックdeqが空か調べる	deq = collections.deque([1,2]);_	False
translate: デックdeq[が|は]空でない[か[|どうか][調べる||[確認|判定|テスト]する]|]	len(deq) != 0	translate: デックdeqが空でないか調べる	deq = collections.deque([1,2]);_	True
translate: デックdeq[|の[中|内]]に[文字列|オブジェクト|]element[が|は][含まれてる|存在する|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	element in deq	translate: デックdeqに文字列elementが含まれてるか調べる	deq = collections.deque([1,2]);_	True
translate: デックdeqの[先頭|最初|左[|側]][|の[要素|[値|データ]]][|を得る]	deq[0]	translate: デックdeqの先頭	deq = collections.deque([1,2]);_	1
translate: デックdeqの[末尾|最後|右[|側]][|の[要素|[値|データ]]][|を得る]	deq[-1]	translate: デックdeqの右	deq = collections.deque([1,2]);_	2
translate: デックdeqのn番目[|の[要素|[値|データ]]][|を得る]	deq[n]	translate: デックdeqのn番目	deq = collections.deque([1,2]);_	2
translate: デックdeqのn〜n2の[部分|][要素|[値|データ]][|を得る]	collections.deque(itertools.islice(deq, n, n2))	translate: デックdeqのn〜n2の部分要素	deq = collections.deque([1,2,1,2,1,2]);_	deque([2, 1])
translate: デックdeqのn番目からn2[番目[|まで]]の[部分|][要素|[値|データ]][|を得る]	collections.deque(itertools.islice(deq, n, n2))	translate: デックdeqのn番目からn2番目の部分要素	deq = collections.deque([1,2,1,2,1,2]);_	deque([2, 1])
translate: デックdeq中の[文字列|オブジェクト|]elementの[インデックス|位置][|を得る]	deq.index(element)	translate: デックdeq中の文字列elementのインデックス	deq = collections.deque([1,2]);_	1
translate: デックdeq中の[文字列|オブジェクト|]element[の[数|出現数]を[数える|数える]	deq.count(element)	translate: デックdeq中の文字列element[の数を数える	deq = collections.deque([1,2]);_	1
translate: {デックdeqの[要素|[値|データ]]を|[インプレースに|]}[反転する|逆順にする|逆に並べ直す]	deq.reverse()	translate: デックdeqの要素を反転する	deq = collections.deque([1,2]);_;deq	deque([2, 1])
translate: 逆順のデックdeqを得る	reversed(deq)	translate: 逆順のデックdeqを得る	deq = collections.deque([1,2]);list(_)	[2, 1]
translate: デックdeqをリストに[変換|]する	list(deq)	translate: デックdeqをリストに変換する	deq = collections.deque([1,2]);_	[1, 2]
translate: デックdeqをタプルに[変換|]する	tuple(deq)	translate: デックdeqをタプルにする	deq = collections.deque([1,2]);_	(1, 2)
translate: {[|新しい][空の|][多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ]を|[新しく|新たに|]}[[[作る|作成する]|[|新規]生成する|[用意|準備]する]|用意する]	collections.Counter()	translate: 新しく空の多重集合を作る	_	Counter()
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableから|[|新しい][多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ]を|新規に}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.Counter(iterable)	translate: 多重集合を新規にリストiterableから作る	_	Counter({0: 1, 1: 1, 2: 1, 4: 1})
translate: {[辞書|カウンタ|マッピング]amapから|[|新しい][多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ]を|新規に}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	collections.Counter(amap)	translate: 辞書amapから新規に多重集合を作る	amap={'A':2, 'B':1};_	Counter({'A': 2, 'B': 1})
translate: {[|新しい][空の|][多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ]を|[新しく|新たに|]}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.Counter()	translate: 空の多重集合を新しく作って、Xとする	_;X	Counter()
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableから|[|新しい][多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ]を|新規に}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.Counter(iterable)	translate: リストiterableから多重集合を新規に作って、Xにする	_;X	Counter({0: 1, 1: 1, 2: 1, 4: 1})
translate: {[辞書|カウンタ|マッピング]amapから|[|新しい][多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ]を|新規に}[[作って|作成して]|[|新規]生成して|[用意|準備]して][、|]X[に[代入|]する|とする]	X = collections.Counter(amap)	translate: 辞書amapから多重集合を新規に作って、Xに代入する	amap={'A':2, 'B':1};_;X	Counter({'A': 2, 'B': 1})
translate: カウンタcの[それぞれの|各|][項目|[要素|キー]|[文字列|値]]を[[、|]その|][カウント|出現][の回数|[回|]数|分の回数]だけ[列挙する|リストとして得る]	c.elements()	translate: カウンタcのそれぞれの項目を、そのカウントの回数だけ列挙する	c=collections.Counter(A=2,B=1);list(_)	['A', 'A', 'B']
translate: カウンタcを[カウント|出現][|[の回数|[回|]数|分の回数]][が|の]多い[順に|順番に|方から][列挙する|リストとして得る]	c.most_common()	translate: カウンタcをカウントが多い順に列挙する	c=collections.Counter(A=2,B=1);_	[('A', 2), ('B', 1)]
translate: カウンタcを高頻出[|な][順に|順番に|方から][列挙する|リストとして得る]	c.most_common()	translate: カウンタcを高頻出順に列挙する	c=collections.Counter(A=2,B=1);_	[('A', 2), ('B', 1)]
translate: カウンタcを[カウント|出現][|[の回数|[回|]数|分の回数]][が|の]少ない[順に|順番に|方から][列挙する|リストとして得る]	c.most_common()[::-1]	translate: カウンタcをカウントが少ない順に列挙する	c=collections.Counter(A=2,B=1);_	[('B', 1), ('A', 2)]
translate: カウンタcを低頻出[|な][順に|順番に|方から][列挙する|リストとして得る]	c.most_common()[::-1]	translate: カウンタcを低頻出順に列挙する	c=collections.Counter(A=2,B=1);_	[('B', 1), ('A', 2)]
translate: カウンタcを[上位n個|上位n位まで][カウント|出現][|[の回数|[回|]数|分の回数]][が|の]多い[順に|順番に|方から][列挙する|リストとして得る]	c.most_common(n)	translate: カウンタcを上位n個カウントが多い順に列挙する	c=collections.Counter(A=2,B=1);_	[('A', 2)]
translate: カウンタcから高頻出[|な][項目|[要素|キー]|[文字列|値]]をn個[、|]リストとして得る	c.most_common(n)	translate: カウンタcから高頻出項目をn個、リストとして得る	c=collections.Counter(A=2,B=1);_	[('A', 2)]
translate: カウンタcを[下位n個|下位n位まで][カウント|出現][|[の回数|[回|]数|分の回数]][が|の]少ない[順に|順番に|方から][列挙する|リストとして得る]	c.most_common()[:-n-1:-1]	translate: カウンタcを下位n個カウントが少ない順に列挙する	c=collections.Counter(A=2,B=1);_	[('B', 1)]
translate: カウンタcから低頻出[|な][項目|[要素|キー]|[文字列|値]]をn個[、|]リストとして得る	c.most_common()[:-n-1:-1]	translate: カウンタcから低頻出項目をn個、リストとして得る	c=collections.Counter(A=2,B=1);_	[('B', 1)]
translate: カウンタcから[最頻出|最も頻出|最もカウント数の多い]の[項目|[要素|キー]|[文字列|値]]を[得る|[求める|計算する|算出する]]	c.most_common(0)[0]	translate: カウンタcから最頻出の項目を得る	c=collections.Counter(A=2,B=1);_	(IndexError('list index out of range'), 'c=collections.Counter(A=2,B=1);_')
translate: カウンタcから[最頻出|最も頻出|最もカウント数の多い]の[項目|[要素|キー]|[文字列|値]][の回数|[回|]数|分の回数]を[得る|[求める|計算する|算出する]]	c.most_common(0)[1]	translate: カウンタcから最頻出の項目の回数を得る	c=collections.Counter(A=2,B=1);_	(IndexError('list index out of range'), 'c=collections.Counter(A=2,B=1);_')
translate: {カウンタcに|[[リスト|タプル|配列]|列|イテラブル|]iterable[|の[カウント|出現][|[の回数|[回|]数|分の回数]]]を}[追加する|増やす]	c.update(iterable)	translate: カウンタcにリストiterableを追加する	c=collections.Counter(iterable);_	None
translate: {カウンタcに|[辞書|カウンタ|マッピング]amapを}[追加する|増やす]	c.update(amap)	translate: カウンタcに辞書amapを追加する	c=collections.Counter(A=2,B=1);amap={'A':2, 'B':1};_	None
translate: {カウンタcから|[[リスト|タプル|配列]|列|イテラブル|]iterable[|の[カウント|出現][|[の回数|[回|]数|分の回数]]]を}[引く|減らす]	c.subtract(iterable)	translate: カウンタcからリストiterableを減らす	c=collections.Counter(iterable);_	None
translate: カウンタcから[辞書|カウンタ|マッピング]amapを[引く|減らす]	c.subtract(amap)	translate: カウンタcから辞書amapを引く	c=collections.Counter(A=2,B=1);amap={'A':2, 'B':1};_	None
translate: カウンタc内の[文字列|オブジェクト|]element[項目|[要素|キー]|[文字列|値]]を[|[ひとつ|一つ]]増やす	c[element] += 1	translate: カウンタc内の文字列element項目を増やす	c=collections.Counter(iterable);_;c[element]	2
translate: カウンタc内の[文字列|オブジェクト|]element[項目|[要素|キー]|[文字列|値]]の[カウント|出現][|[の回数|[回|]数|分の回数]][|を得る]	c[element]	translate: カウンタc内の文字列element項目のカウント	c=collections.Counter(iterable);_	1
translate: カウンタcの[トータル|全][カウント|出現][|[の回数|[回|]数|分の回数]][|を得る]	c.total()	translate: カウンタcのトータルカウント	c=collections.Counter(A=2,B=1);_	"(AttributeError(""'Counter' object has no attribute 'total'""), 'c=collections.Counter(A=2,B=1);_')"
translate: カウンタcの全数[|を得る]	c.total()	translate: カウンタcの全数	c=collections.Counter(A=2,B=1);_	"(AttributeError(""'Counter' object has no attribute 'total'""), 'c=collections.Counter(A=2,B=1);_')"
translate: カウンタcの[項目|[要素|キー]|[文字列|値]]一覧[|を得る]	c.keys()	translate: カウンタcの項目一覧	c=collections.Counter(A=2,B=1);_	dict_keys(['A', 'B'])
translate: カウンタcの[項目|[要素|キー]|[文字列|値]]数[|を得る]	len(c)	translate: カウンタcの項目数	c=collections.Counter(A=2,B=1);_	2
translate: カウンタcを[リセット|クリア|ゼロに]する	c.clear()	translate: カウンタcをリセットする	c=collections.Counter(A=2,B=1);_;c	Counter()
translate: カウンタcのユニークな[項目|[要素|キー]|[文字列|値]]を[列挙する|リストとして得る]	list(c)	translate: カウンタcのユニークな項目を列挙する	c=collections.Counter(A=2,B=1);_	['A', 'B']
translate: カウンタcをリストに[変換|]する	list(c)	translate: カウンタcをリストに変換する	c=collections.Counter(A=2,B=1);_	['A', 'B']
translate: カウンタcを[集合|セット]に[変換|]する	set(c)	translate: カウンタcを集合に変換する	c=collections.Counter(A=2,B=1);_	{'B', 'A'}
translate: カウンタcを辞書に[変換|]する	dict(c)	translate: カウンタcを辞書に変換する	c=collections.Counter(A=2,B=1);_	{'A': 2, 'B': 1}
translate: カウンタcをペアリストに[変換|]する	c.items()	translate: カウンタcをペアリストに変換する	c=collections.Counter(A=2,B=1);_	dict_items([('A', 2), ('B', 1)])
translate: ペアリストpairsからカウンタを[[[作る|作成する]|[|新規]生成する|[用意|準備]する]|構築する]	collections.Counter(dict(pairs))	translate: ペアリストpairsからカウンタを作る	pairs=[('A',1)];_	Counter({'A': 1})
translate: カウンタcから0[以下の|][カウント|出現]を[取り除く|取り出す|削除する]	+c	translate: カウンタcから0以下のカウントを取り除く	c=collections.Counter(A=2,B=1);_	Counter({'A': 2, 'B': 1})
translate: カウンタcの正の[数|[カウント|出現]][のみ|だけ]残す	+c	translate: カウンタcの正の数のみ残す	c=collections.Counter(A=2,B=1);_	Counter({'A': 2, 'B': 1})
translate: カウンタcとカウンタc2の[インターセクション|積集合|共通部分|[交わり|交差]|インターセクション][|を[求める|計算する|算出する]|を得る]	c & c2	translate: カウンタcとカウンタc2のインターセクション	c=collections.Counter(A=2,B=1);c2=c;_	Counter({'A': 2, 'B': 1})
translate: カウンタcとカウンタc2に共通する[要素|[値|データ]]からなる[多重集合|カウンタ|多重集合|計数[オブジェクト|ツール]|カウンタ][|を[求める|計算する|算出する]|を得る]	c & c2	translate: カウンタcとカウンタc2に共通する要素からなる多重集合	c=collections.Counter(A=2,B=1);c2=c;_	Counter({'A': 2, 'B': 1})
translate: カウンタc∩カウンタc2 	c & c2	translate: カウンタc∩カウンタc2 	c=collections.Counter(A=2,B=1);c2=c;_	Counter({'A': 2, 'B': 1})
translate: カウンタcとカウンタc2の[ユニオン|和集合][|を[求める|計算する|算出する]|を得る]	c | c2	translate: カウンタcとカウンタc2のユニオン	c=collections.Counter(A=2,B=1);c2=c;_	Counter({'A': 2, 'B': 1})
translate: カウンタc∪カウンタc2 	c | c2	translate: カウンタc∪カウンタc2 	c=collections.Counter(A=2,B=1);c2=c;_	Counter({'A': 2, 'B': 1})
translate: 文字列sの名前を持ち[、|]リストalist3のプロパティ[を持った|のある][名前付きタプル|[構造体|簡易クラス]]を[定義する|[[作る|作成する]|[|新規]生成する|[用意|準備]する]]	collections.namedtuple(s, alist3)	translate: 文字列sの名前を持ち、リストalist3のプロパティを持った名前付きタプルを定義する	_	"(ValueError(""Type names and field names must be valid identifiers: ' ABC abc 123あ'""), '_')"
translate: 文字列sの名前を持ち[、|]文字列s2のプロパティ[を持った|のある][名前付きタプル|[構造体|簡易クラス]]を[定義する|[[作る|作成する]|[|新規]生成する|[用意|準備]する]]	collections.namedtuple(s, s2)	translate: 文字列sの名前を持ち、文字列s2のプロパティを持った名前付きタプルを定義する	_	"(ValueError(""Type names and field names must be valid identifiers: ' ABC abc 123あ'""), '_')"
translate: クラスC[が|は][名前付きタプル|[構造体|簡易クラス]][か[|どうか][調べる||[確認|判定|テスト]する]|]	issubclass(C, tuple)	translate: クラスCが名前付きタプルか調べる	C=collections.namedtuple('C', 'x y z w');_	True
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableから|クラスC[のインスタンス|[オブジェクト]]を|[新しく|新たに|]}[[作る|作成する]|[|新規]生成する|[用意|準備]する]	C._make(iterable)  # issubclass(C, tuple)	translate: リストiterableからクラスCのインスタンスを作る	C=collections.namedtuple('C', 'x y z w');_	C(x=0, y=1, z=2, w=4)
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableをクラスC[のインスタンス|[オブジェクト]]に[変換|]する	C._make(iterable)  # issubclass(C, tuple)	translate: リストiterableをクラスCのインスタンスに変換する	C=collections.namedtuple('C', 'x y z w');_	C(x=0, y=1, z=2, w=4)
translate: [オブジェクト|]objが[名前付きタプル|[構造体|簡易クラス]][|型|[のインスタンス|[オブジェクト]]][か[|どうか][調べる||[確認|判定|テスト]する]|]	hasattr(obj, '_asdict') and hasattr(obj, '_fields')	translate: オブジェクトobjが名前付きタプルか調べる	C=collections.namedtuple('C', 'x y');obj=C(1,2);_	True
translate: [[名前付きタプル|[構造体|簡易クラス]]|][オブジェクト|]objを辞書に[変換|]する	obj._asdict()  # isinstance(obj, NamedTuple)	translate: 名前付きタプルオブジェクトobjを辞書に変換する	C=collections.namedtuple('C', 'x y');obj=C(1,2);_	{'x': 1, 'y': 2}
translate: [[名前付きタプル|[構造体|簡易クラス]]|][オブジェクト|]objのフィールド名の一覧[|を得る]	obj._fields  # isinstance(obj, NamedTuple)	translate: 名前付きタプルオブジェクトobjのフィールド名の一覧	C=collections.namedtuple('C', 'x y');obj=C(1,2);_	('x', 'y')
translate: [空|ルート]の[チェーンマップ|階層化された[マッピング|辞書]]を作成する	collections.ChainMap()	translate: 空のチェーンマップを作成する	_	ChainMap({})
translate: 辞書adictを[チェーンマップ|[階層化された|ネストされた][マッピング|辞書]]に[変換|]する	collections.ChainMap(adict)	translate: 辞書adictをチェーンマップに変換する	_	ChainMap({'A': 1})
translate: 辞書adictを[階層化する|ネスト化する]	collections.ChainMap(adict)	translate: 辞書adictを階層化する	_	ChainMap({'A': 1})
translate: 辞書adictと辞書adict2を[チェーンする|階層的につなぐ|ネストする]	collections.ChainMap(adict, adict2)	translate: 辞書adictと辞書adict2をチェーンする	_	ChainMap({'A': 1}, {'B': 2})
translate: [日付|時刻]を[[使う|[使用する|用いる]]|インポートする]	import datetime	translate: 日付を使う	_	(SyntaxError('invalid syntax', ('<string>', 1, 1, 'import datetime')), '_')
translate: [時間|[タイムスタンプ|エポック[秒|タイム|]|UNIX[時間|時刻|タイム]]]を[[使う|[使用する|用いる]]|インポートする]	import time	translate: タイムスタンプをインポートする	_	(SyntaxError('invalid syntax', ('<string>', 1, 1, 'import time')), '_')
translate: [本日|今日|現在]の[日時|日付と時[間|刻]][|を[求める|計算する|算出する]]	datetime.datetime.now()	translate: 本日の日時	_	2022-03-12 03:45:54.267657
translate: n年の[日時|日付と時[間|刻]][|を[オブジェクト化する|得る|作る]]	datetime.datetime(year=n, month=1, day=1)	translate: n年の日時	n,n2,n3=2022,12,24;_	2022-01-01 00:00:00
translate: n年を[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime(year=n, month=1, day=1)	translate: n年を日時に変換する	n,n2,n3=2022,12,24;_	2022-01-01 00:00:00
translate: n年n2月の[日時|日付と時[間|刻]][|を[オブジェクト化する|得る|作る]]	datetime.datetime(year=n, month=n2, day=1)	translate: n年n2月の日時	n,n2,n3=2022,12,24;_	2022-12-01 00:00:00
translate: n年n2月を[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime(year=n, month=n2, day=1)	translate: n年n2月を日時に変換する	n,n2,n3=2022,12,24;_	2022-12-01 00:00:00
translate: n年n2月n3日の[日時|日付と時[間|刻]][|を[オブジェクト化する|得る|作る]]	datetime.datetime(year=n, month=n2, day=n3)	translate: n年n2月n3日の日時	n,n2,n3=2022,12,24;_	2022-12-24 00:00:00
translate: n年n2月n3日を[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime(year=n, month=n2, day=n3)	translate: n年n2月n3日を日時に変換する	n,n2,n3=2022,12,24;_	2022-12-24 00:00:00
translate: n年n2月n3日n4時の[日時|日付と時[間|刻]][|を[オブジェクト化する|得る|作る]]	datetime.datetime(year=n, month=n2, day=n3, hour=n4)	translate: n年n2月n3日n4時の日時	n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_	2022-12-24 00:00:00
translate: n年n2月n3日n4時を[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime(year=n, month=n2, day=n3, hour=n4)	translate: n年n2月n3日n4時を日時に変換する	n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_	2022-12-24 00:00:00
translate: n年n2月n3日n4時n5分の[日時|日付と時[間|刻]][|を[オブジェクト化する|得る|作る]]	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5)	translate: n年n2月n3日n4時n5分の日時	n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_	"(TypeError(""'minite' is an invalid keyword argument for this function""), 'n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_')"
translate: n年n2月n3日n4時n5分を[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5)	translate: n年n2月n3日n4時n5分を日時に変換する	n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_	"(TypeError(""'minite' is an invalid keyword argument for this function""), 'n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_')"
translate: n年n2月n3日n4時n5分n6秒の[日時|日付と時[間|刻]][|を[オブジェクト化する|得る|作る]]	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5, second=n6)	translate: n年n2月n3日n4時n5分n6秒の日時	n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_	"(TypeError(""'minite' is an invalid keyword argument for this function""), 'n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_')"
translate: n年n2月n3日n4時n5分n6秒を[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5, second=n6)	translate: n年n2月n3日n4時n5分n6秒を日時に変換する	n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_	"(TypeError(""'minite' is an invalid keyword argument for this function""), 'n,n2,n3,n4,n5,n6=2022,12,24,0,0,0;_')"
translate: エポックtimestamp[を|から][日時|日付と時[間|刻]]に[変換|]する	datetime.datetime.fromtimestamp(timestamp)	translate: エポックtimestampを日時に変換する	_	"(NameError(""name 'timestamp' is not defined""), '_')"
translate: [ISO書式|ISO8601[|形式]]の文字列s[を|から][日時|日付と時[間|刻]]に[変換|]する	datetime.datetime.fromisoformat(s)	translate: ISO書式の文字列sを日時に変換する	s='2011-11-04';_	2011-11-04 00:00:00
translate: 文字列s[を|から][ISO書式|ISO8601[|形式]][で|として|を[用いて|使って]][日時|日付と時[間|刻]]に[変換|]する	datetime.datetime.fromisoformat(s)	translate: 文字列sをISO書式で日時に変換する	s='2011-11-04';_	2011-11-04 00:00:00
translate: 文字列sから文字列s2のパターン[で|として|を[用いて|使って]][日時|日付と時[間|刻]]に[変換|]する	datetime.datetime.strptime(s, s2)	translate: 文字列sから文字列s2のパターンで日時に変換する	s='21/11/06 16:30';s2='%d/%m/%y %H:%M';_	2006-11-21 16:30:00
translate: 文字列s2パターンの文字列sを[日時|日付と時[間|刻]]に[変換|]する	datetime.datetime.strptime(s, s2)	translate: 文字列s2パターンの文字列sを日時に変換する	s='21/11/06 16:30';s2='%d/%m/%y %H:%M';_	2006-11-21 16:30:00
translate: [本日|今日|現在]の[|ローカルな][日時|日付と時[間|刻]][|を得る]	datetime.datetime.today()	translate: 本日の日時	type(_)	<class 'datetime.datetime'>
translate: [日時|日付と時[間|刻]]dtを[タイムスタンプ|エポック[秒|タイム|]|UNIX[時間|[時刻|時間]|タイム]]に[変換|]する	dt.timestamp()	translate: 日時dtをタイムスタンプに変換する	_	1670770800.0
translate: [日時|日付と時[間|刻]]dtを[浮動小数点数|数値]に[変換|]する	dt.timestamp()	translate: 日時dtを浮動小数点数に変換する	_	1670770800.0
translate: [日時|日付と時[間|刻]]dtのタイムゾーン[|を得る]	dt.timetz()	translate: 日時dtのタイムゾーン	_	00:00:00
translate: [日時|日付と時[間|刻]]dtの日付[|を得る]	dt.date()	translate: 日時dtの日付	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtの[時刻|時間][|を得る]	dt.time()	translate: 日時dtの時刻	_	00:00:00
translate: n年の日付[|を[オブジェクト化する|得る|作る]]	datetime.date(year=n, month=1, day=1)	translate: n年の日付	n,n2,n3=2022,12,24;_	2022-01-01
translate: n年を日付に[変換|]する	datetime.date(year=n, month=1, day=1)	translate: n年を日付に変換する	n,n2,n3=2022,12,24;_	2022-01-01
translate: n年n2月の日付[|を[オブジェクト化する|得る|作る]]	datetime.date(year=n, month=n2, day=1)	translate: n年n2月の日付	n,n2,n3=2022,12,24;_	2022-12-01
translate: n年n2月を日付に[変換|]する	datetime.date(year=n, month=n2, day=1)	translate: n年n2月を日付に変換する	n,n2,n3=2022,12,24;_	2022-12-01
translate: n年n2月n3日の日付[|を[オブジェクト化する|得る|作る]]	datetime.date(year=n, month=n2, day=n3)	translate: n年n2月n3日の日付	n,n2,n3=2022,12,24;_	2022-12-24
translate: n年n2月n3日を日付に[変換|]する	datetime.date(year=n, month=n2, day=n3)	translate: n年n2月n3日を日付に変換する	n,n2,n3=2022,12,24;_	2022-12-24
translate: [本日|今日|現在]の[|ローカルな]日付[|を得る]	datetime.date.today()	translate: 本日の日付を得る	type(_)	<class 'datetime.date'>
translate: 明日の日付[|を得る]	datetime.date.today() + datetime.timedelta(days=1)	translate: 明日の日付	type(_)	<class 'datetime.date'>
translate: 昨日の日付[|を得る]	datetime.date.today() - datetime.timedelta(days=1)	translate: 昨日の日付	type(_)	<class 'datetime.date'>
translate: 文字列sから文字列s2のパターン[で|として|を[用いて|使って]]日付に[変換|]する	datetime.date.strptime(s, s2)	translate: 文字列sから文字列s2のパターンで日付に変換する	s='21/11/06 16:30';s2='%d/%m/%y %H:%M';_	"(AttributeError(""type object 'datetime.date' has no attribute 'strptime'""), ""s='21/11/06 16:30';s2='%d/%m/%y %H:%M';_"")"
translate: [日時|日付と時[間|刻]]dtの[年数|年][|を得る]	dt.year	translate: 日時dtの年数	_	2022
translate: [日時|日付と時[間|刻]]dt[が|は]何年か知る	dt.year	translate: 日時dtが何年か知る	_	2022
translate: 日付adateの[年数|年][|を得る]	adate.year	translate: 日付adateの年数	_	2022
translate: 日付adate[が|は]何年か知る	adate.year	translate: 日付adateが何年か知る	_	2022
translate: [本日|今日|現在]の[年数|年][|を得る]	datetime.datetime.today().year	translate: 本日の年数	_	2022
translate: [本日|今日|現在][が|は]何年か知る	datetime.datetime.today().year	translate: 本日が何年か知る	_	2022
translate: [日時|日付と時[間|刻]]dtの[月数|月][|を得る]	dt.month	translate: 日時dtの月数	_	12
translate: [日時|日付と時[間|刻]]dt[が|は]何月か知る	dt.month	translate: 日付と時間dtが何月か知る	_	12
translate: 日付adateの[月数|月][|を得る]	adate.month	translate: 日付adateの月数	_	12
translate: 日付adate[が|は]何月か知る	adate.month	translate: 日付adateが何月か知る	_	12
translate: [本日|今日|現在]の[月数|月][|を得る]	datetime.datetime.today().month	translate: 本日の月	_	3
translate: [本日|今日|現在][が|は]何月か知る	datetime.datetime.today().month	translate: 現在が何月か知る	_	3
translate: [日時|日付と時[間|刻]]dtの[日数|日][|を得る]	dt.day	translate: 日時dtの日数	_	12
translate: [日時|日付と時[間|刻]]dt[が|は]何日か知る	dt.day	translate: 日時dtが何日か知る	_	12
translate: 日付adateの[日数|日][|を得る]	adate.day	translate: 日付adateの日数	_	12
translate: 日付adate[が|は]何日か知る	adate.day	translate: 日付adateが何日か知る	_	12
translate: [本日|今日|現在]の[日数|日][|を得る]	datetime.datetime.today().day	translate: 本日の日数	_	12
translate: [本日|今日|現在][が|は]何日か知る	datetime.datetime.today().day	translate: 本日が何日か知る	_	12
translate: [日時|日付と時[間|刻]]dtの曜日を[整数で|]得る	dt.weekday()	translate: 日時dtの曜日を整数で得る	_	0
translate: [日時|日付と時[間|刻]]dt[が|は]何曜日か知る	dt.weekday()	translate: 日時dtが何曜日か知る	_	0
translate: 日付adateの曜日を[整数で|]得る	adate.weekday()	translate: 日付adateの曜日を得る	_	0
translate: 日付adate[が|は]何曜日か知る	adate.weekday()	translate: 日付adateが何曜日か知る	_	0
translate: [本日|今日|現在]の曜日を[整数で|]得る	datetime.datetime.today().weekday()	translate: 本日の曜日を整数で得る	_	5
translate: [本日|今日|現在][が|は]何曜日か知る	datetime.datetime.today().weekday()	translate: 本日が何曜日か知る	_	5
translate: [日時|日付と時[間|刻]]dtが月曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 0	translate: 日時dtが月曜日か調べる	_	True
translate: 日付adateが月曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 0	translate: 日付adateが月曜日か調べる	_	True
translate: [本日|今日|現在]が月曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 0	translate: 本日が月曜日か調べる	_	False
translate: [日時|日付と時[間|刻]]dtが火曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 1	translate: 日時dtが火曜日か調べる	_	False
translate: 日付adateが火曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 1	translate: 日付adateが火曜日か調べる	_	False
translate: [本日|今日|現在]が火曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 1	translate: 本日が火曜日	_	False
translate: [日時|日付と時[間|刻]]dtが水曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 2	translate: 日時dtが水曜日か調べる	_	False
translate: 日付adateが水曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 2	translate: 日付adateが水曜日か調べる	_	False
translate: [本日|今日|現在]が水曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 2	translate: 本日が水曜日か調べる	_	False
translate: [日時|日付と時[間|刻]]dtが木曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 3	translate: 日時dtが木曜日か調べる	_	False
translate: 日付adateが木曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 3	translate: 日付adateが木曜日か調べる	_	False
translate: [本日|今日|現在]が木曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 3	translate: 今日が木曜日かどうか調べる	_	False
translate: [日時|日付と時[間|刻]]dtが金曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 4	translate: 日時dtが金曜日か調べる	_	False
translate: 日付adateが金曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 4	translate: 日付adateが金曜日か調べる	_	False
translate: [本日|今日|現在]が金曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 4	translate: 本日が金曜日か調べる	_	False
translate: [日時|日付と時[間|刻]]dtが土曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 5	translate: 日時dtが土曜日か調べる	_	False
translate: 日付adateが土曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 5	translate: 日付adateが土曜日か調べる	_	False
translate: [本日|今日|現在]が土曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 5	translate: 本日が土曜日かどうか調べる	_	True
translate: [日時|日付と時[間|刻]]dtが日曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt.weekday() == 6	translate: 日時dtが日曜日か調べる	_	False
translate: 日付adateが日曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate.weekday() == 6	translate: 日付adateが日曜日	_	False
translate: [本日|今日|現在]が日曜日[か[|どうか][調べる||[確認|判定|テスト]する]|]	datetime.datetime.today().weekday() == 6	translate: 本日が日曜日か調べる	_	False
translate: [日時|日付と時[間|刻]]dtをタプルに[変換|]する	dt.timetuple()	translate: 日時dtをタプルに変換する	_	time.struct_time(tm_year=2022, tm_mon=12, tm_mday=12, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=346, tm_isdst=-1)
translate: 日付adateをタプルに[変換|]する	adate.timetuple()	translate: 日付adateをタプルに変換する	_	time.struct_time(tm_year=2022, tm_mon=12, tm_mday=12, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=346, tm_isdst=-1)
translate: [本日|今日|現在]をタプルに[変換|]する	datetime.datetime.today().timetuple()	translate: 本日をタプルに変換する	_	time.struct_time(tm_year=2022, tm_mon=3, tm_mday=12, tm_hour=3, tm_min=45, tm_sec=54, tm_wday=5, tm_yday=71, tm_isdst=-1)
translate: [日時|日付と時[間|刻]]dtをISO[|8601][形式|書式]の文字列に[変換|]する	dt.isoformat()	translate: 日時dtをISO形式の文字列に変換する	_	2022-12-12T00:00:00
translate: 日付adateをISO[|8601][形式|書式]の文字列に[変換|]する	adate.isoformat()	translate: 日付adateをISO形式の文字列に変換する	_	2022-12-12
translate: [本日|今日|現在]をISO[|8601][形式|書式]の文字列に[変換|]する	datetime.datetime.today().isoformat()	translate: 本日をISO形式の文字列に変換する	_	2022-03-12T03:45:54.484963
translate: {[日時|日付と時[間|刻]]dtを|文字列sでフォーマットして}文字列に[変換|]する	dt.strftime()	translate: 日時dtを文字列sでフォーマットして文字列に変換する	"s=""%A, %d. %B %Y %I:%M%p"";_"	"(TypeError(""strftime() missing required argument 'format' (pos 1)""), 's=""%A, %d. %B %Y %I:%M%p"";_')"
translate: [日時|日付と時[間|刻]]dtを文字列s[で|として|を[用いて|使って]]フォーマットする	dt.strftime()	translate: 日時dtを文字列sでフォーマットする	"s=""%A, %d. %B %Y %I:%M%p"";_"	"(TypeError(""strftime() missing required argument 'format' (pos 1)""), 's=""%A, %d. %B %Y %I:%M%p"";_')"
translate: {日付adateを|文字列sでフォーマットして}文字列に[変換|]する	adate.strftime()	translate: 日付adateを文字列sでフォーマットして文字列に変換する	"s=""%A, %d. %B %Y %I:%M%p"";_"	"(TypeError(""strftime() missing required argument 'format' (pos 1)""), 's=""%A, %d. %B %Y %I:%M%p"";_')"
translate: 日付adateを文字列s[で|として|を[用いて|使って]]フォーマットする	adate.strftime()	translate: 日付adateを文字列sでフォーマットする	"s=""%A, %d. %B %Y %I:%M%p"";_"	"(TypeError(""strftime() missing required argument 'format' (pos 1)""), 's=""%A, %d. %B %Y %I:%M%p"";_')"
translate: {[本日|今日|現在]を|文字列sでフォーマットして}文字列に[変換|]する	datetime.datetime.today().strftime()	translate: 文字列sでフォーマットして本日を文字列にする	"s=""%A, %d. %B %Y %I:%M%p"";_"	"(TypeError(""strftime() missing required argument 'format' (pos 1)""), 's=""%A, %d. %B %Y %I:%M%p"";_')"
translate: [本日|今日|現在]を文字列s[で|として|を[用いて|使って]]フォーマットする	datetime.datetime.today().strftime()	translate: 本日を文字列sでフォーマットする	"s=""%A, %d. %B %Y %I:%M%p"";_"	"(TypeError(""strftime() missing required argument 'format' (pos 1)""), 's=""%A, %d. %B %Y %I:%M%p"";_')"
translate: [日時|日付と時[間|刻]]dtの[時間数|時間|時刻][|を得る]	dt.hour	translate: 日時dtの時間数	_	0
translate: [日時|日付と時[間|刻]]dt[が|は]何時か知る	dt.hour	translate: 日時dtが何時か知る	_	0
translate: 現在の[時間数|時間|時刻][|を得る]	datetime.date.today().hour	translate: 現在の時間数	_	"(AttributeError(""'datetime.date' object has no attribute 'hour'""), '_')"
translate: 現在[が|は]何時か知る	datetime.date.today().hour	translate: 現在が何時か知る	_	"(AttributeError(""'datetime.date' object has no attribute 'hour'""), '_')"
translate: [日時|日付と時[間|刻]]dtの[分数|分][|を得る]	dt.minite	translate: 日時dtの分数	_	"(AttributeError(""'datetime.datetime' object has no attribute 'minite'""), '_')"
translate: [日時|日付と時[間|刻]]dt[が|は]何分か知る	dt.minite	translate: 日時dtが何分か知る	_	"(AttributeError(""'datetime.datetime' object has no attribute 'minite'""), '_')"
translate: 現在の[分数|分][|を得る]	datetime.date.today().minite	translate: 現在の分数	_	"(AttributeError(""'datetime.date' object has no attribute 'minite'""), '_')"
translate: 現在[が|は]何分か知る	datetime.date.today().minite	translate: 現在が何分か知る	_	"(AttributeError(""'datetime.date' object has no attribute 'minite'""), '_')"
translate: [日時|日付と時[間|刻]]dtの[秒数|秒][|を得る]	dt.second	translate: 日時dtの秒数	_	0
translate: [日時|日付と時[間|刻]]dt[が|は]何秒か知る	dt.second	translate: 日時dtが何秒か知る	_	0
translate: 現在の[秒数|秒][|を得る]	datetime.date.today().second	translate: 現在の秒数	_	"(AttributeError(""'datetime.date' object has no attribute 'second'""), '_')"
translate: 現在[が|は]何秒か知る	datetime.date.today().second	translate: 現在が何秒か知る	_	"(AttributeError(""'datetime.date' object has no attribute 'second'""), '_')"
translate: 現在のミリ秒	int(time.time() * 1000)	translate: 現在のミリ秒	_	"(NameError(""name 'time' is not defined""), '_')"
translate: 現在の[タイムスタンプ|エポック[秒|タイム|]|UNIX[時間|[時刻|時間]|タイム]]	int(time.time())	translate: 現在のタイムスタンプ	_	"(NameError(""name 'time' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtををn週間後に進める	dt + datetime.timedelta(weeks=n)	translate: 日時dtををn週間後に進める	_	2022-12-19 00:00:00
translate: [日時|日付と時[間|刻]]dtにn週間[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(weeks=n)	translate: 日時dtにn週間分、加算する	_	2022-12-19 00:00:00
translate: 日付adateををn週間後に進める	adate + datetime.timedelta(weeks=n)	translate: 日付adateををn週間後に進める	_	2022-12-19
translate: 日付adateにn週間[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(weeks=n)	translate: 日付adateにn週間分、加算する	_	2022-12-19
translate: [日時|日付と時[間|刻]]dtをn週間前[に戻す|にする]	dt - datetime.timedelta(weeks=n)	translate: 日時dtをn週間前に戻す	_	2022-12-05 00:00:00
translate: [日時|日付と時[間|刻]]dtからn週間[分[、|]|を][減算する|[減らす|引く]]	dt - datetime.timedelta(weeks=n)	translate: 日時dtからn週間分、減らす	_	2022-12-05 00:00:00
translate: 日付adateをn週間前[に戻す|にする]	adate - datetime.timedelta(weeks=n)	translate: 日付adateをn週間前に戻す	_	2022-12-05
translate: 日付adateからn週間[分[、|]|を][減算する|[減らす|引く]]	adate - datetime.timedelta(weeks=n)	translate: 日付adateからn週間分、減算する	_	2022-12-05
translate: [日時|日付と時[間|刻]]dtををn年後に進める	dt + datetime.timedelta(years=n)	translate: 日時dtををn年後に進める	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtにn年[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(years=n)	translate: 日時dtにn年分、加算する	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateををn年後に進める	adate + datetime.timedelta(years=n)	translate: 日付adateををn年後に進める	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateにn年[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(years=n)	translate: 日付adateにn年分、加算する	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtをn年前[に戻す|にする]	dt - datetime.timedelta(years=n)	translate: 日時dtをn年前に戻す	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtからn年[分[、|]|を][減算する|[減らす|引く]]	dt - datetime.timedelta(years=n)	translate: 日時dtからn年分減算する	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateをn年前[に戻す|にする]	adate - datetime.timedelta(years=n)	translate: 日付adateをn年前に戻す	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateからn年[分[、|]|を][減算する|[減らす|引く]]	adate - datetime.timedelta(years=n)	translate: 日付adateからn年分、減算する	_	"(TypeError(""'years' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtををn[|ヶ]月後に進める	dt + datetime.timedelta(months=n)	translate: 日時dtををn月後に進める	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtにn[|ヶ]月[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(months=n)	translate: 日時dtにn月分、加算する	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateををn[|ヶ]月後に進める	adate + datetime.timedelta(months=n)	translate: 日付adateををn月後に進める	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateにn[|ヶ]月[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(months=n)	translate: 日付adateにn月分、加算する	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtをn[|ヶ]月前[に戻す|にする]	dt - datetime.timedelta(months=n)	translate: 日時dtをn月前に戻す	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtからn[|ヶ]月[分[、|]|を][減算する|[減らす|引く]]	dt - datetime.timedelta(months=n)	translate: 日時dtからn月分、減算する	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateをn[|ヶ]月前[に戻す|にする]	adate - datetime.timedelta(months=n)	translate: 日付adateをn月前に戻す	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: 日付adateからn[|ヶ]月[分[、|]|を][減算する|[減らす|引く]]	adate - datetime.timedelta(months=n)	translate: 日付adateからn月分、減算する	_	"(TypeError(""'months' is an invalid keyword argument for __new__()""), '_')"
translate: [日時|日付と時[間|刻]]dtををn日後に進める	dt + datetime.timedelta(days=n)	translate: 日時dtををn日後に進める	_	2022-12-13 00:00:00
translate: [日時|日付と時[間|刻]]dtにn日[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(days=n)	translate: 日時dtにn日分、加算する	_	2022-12-13 00:00:00
translate: 日付adateををn日後に進める	adate + datetime.timedelta(days=n)	translate: 日付adateををn日後に進める	_	2022-12-13
translate: 日付adateにn日[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(days=n)	translate: 日付adateにn日分、加算する	_	2022-12-13
translate: [日時|日付と時[間|刻]]dtをn日前[に戻す|にする]	dt - datetime.timedelta(days=n)	translate: 日時dtをn日前に戻す	_	2022-12-11 00:00:00
translate: [日時|日付と時[間|刻]]dtからn日[分[、|]|を][減算する|[減らす|引く]]	dt - datetime.timedelta(days=n)	translate: 日時dtからn日分、減算する	_	2022-12-11 00:00:00
translate: 日付adateをn日前[に戻す|にする]	adate - datetime.timedelta(days=n)	translate: 日付adateをn日前に戻す	_	2022-12-11
translate: 日付adateからn日[分[、|]|を][減算する|[減らす|引く]]	adate - datetime.timedelta(days=n)	translate: 日付adateからn日分、減算する	_	2022-12-11
translate: [日時|日付と時[間|刻]]dtををn時間後に進める	dt + datetime.timedelta(hours=n)	translate: 日時dtををn時間後に進める	_	2022-12-12 01:00:00
translate: [日時|日付と時[間|刻]]dtにn時間[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(hours=n)	translate: 日時dtにn時間分、加算する	_	2022-12-12 01:00:00
translate: 日付adateををn時間後に進める	adate + datetime.timedelta(hours=n)	translate: 日付adateををn時間後に進める	_	2022-12-12
translate: 日付adateにn時間[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(hours=n)	translate: 日付adateにn時間分、加算する	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtをn時間前[に戻す|にする]	dt - datetime.timedelta(hours=n)	translate: 日時dtをn時間前に戻す	_	2022-12-11 23:00:00
translate: [日時|日付と時[間|刻]]dtからn時間[分[、|]|を][減算する|[減らす|引く]]	dt - datetime.timedelta(hours=n)	translate: 日時dtからn時間分、減算する	_	2022-12-11 23:00:00
translate: 日付adateをn時間前[に戻す|にする]	adate - datetime.timedelta(hours=n)	translate: 日付adateをn時間前に戻す	_	2022-12-12
translate: 日付adateからn時間[分[、|]|を][減算する|[減らす|引く]]	adate - datetime.timedelta(hours=n)	translate: 日付adateからn時間分、減算する	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtををn分後に進める	dt + datetime.timedelta(minutes=n)	translate: 日時dtををn分後に進める	_	2022-12-12 00:01:00
translate: [日時|日付と時[間|刻]]dtにn分[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(minutes=n)	translate: 日時dtにn分分、加算する	_	2022-12-12 00:01:00
translate: 日付adateををn分後に進める	adate + datetime.timedelta(minutes=n)	translate: 日付adateををn分後に進める	_	2022-12-12
translate: 日付adateにn分[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(minutes=n)	translate: 日付adateにn分分、加算する	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtをn分前[に戻す|にする]	dt - datetime.timedelta(minutes=n)	translate: 日時dtをn分前に戻す	_	2022-12-11 23:59:00
translate: [日時|日付と時[間|刻]]dtからn分[、|][減算する|[減らす|引く]]	dt - datetime.timedelta(minutes=n)	translate: 日時dtからn分、減算する	_	2022-12-11 23:59:00
translate: 日付adateをn分前[に戻す|にする]	adate - datetime.timedelta(minutes=n)	translate: 日付adateをn分前に戻す	_	2022-12-12
translate: 日付adateからn分[、|][減算する|[減らす|引く]]	adate - datetime.timedelta(minutes=n)	translate: 日付adateからn分、減算する	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtををn秒後に進める	dt + datetime.timedelta(seconds=n)	translate: 日時dtををn秒後に進める	_	2022-12-12 00:00:01
translate: [日時|日付と時[間|刻]]dtにn秒[分[、|]|を][加算する|[加える|足す]]	dt + datetime.timedelta(seconds=n)	translate: 日時dtにn秒分、加算する	_	2022-12-12 00:00:01
translate: 日付adateををn秒後に進める	adate + datetime.timedelta(seconds=n)	translate: 日付adateををn秒後に進める	_	2022-12-12
translate: 日付adateにn秒[分[、|]|を][加算する|[加える|足す]]	adate + datetime.timedelta(seconds=n)	translate: 日付adateにn秒分、加算する	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtをn秒前[に戻す|にする]	dt - datetime.timedelta(seconds=n)	translate: 日時dtをn秒前に戻す	_	2022-12-11 23:59:59
translate: [日時|日付と時[間|刻]]dtからn秒[分[、|]|を][減算する|[減らす|引く]]	dt - datetime.timedelta(seconds=n)	translate: 日時dtからn秒分、減算する	_	2022-12-11 23:59:59
translate: 日付adateをn秒前[に戻す|にする]	adate - datetime.timedelta(seconds=n)	translate: 日付adateをn秒前に戻す	_	2022-12-12
translate: 日付adateからn秒[分[、|]|を][減算する|[減らす|引く]]	adate - datetime.timedelta(seconds=n)	translate: 日付adateからn秒分、減算する	_	2022-12-12
translate: [日時|日付と時[間|刻]]dtが[日時|日付と時[間|刻]]dt2より[前|先|早い][か[|どうか][調べる||[確認|判定|テスト]する]|]	dt < dt2	translate: 日時dtが日時dt2より前か調べる	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: 日付adateが日付adate2より[前|先|早い][か[|どうか][調べる||[確認|判定|テスト]する]|]	adate < adate2	translate: 日付adateが日付adate2より前か調べる	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtが[日時|日付と時[間|刻]]dt2より[後ろ|あと|遅い][か[|どうか][調べる||[確認|判定|テスト]する]|]	dt > dt2	translate: 日時dtが日時dt2より後ろか調べる	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: 日付adateが日付adate2より[後ろ|あと|遅い][か[|どうか][調べる||[確認|判定|テスト]する]|]	adate > adate2	translate: 日付adateが日付adate2より後ろか調べる	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtが[日時|日付と時[間|刻]]dt2と同時[か[|どうか][調べる||[確認|判定|テスト]する]|]	dt == dt2	translate: 日付と時間dtが日付と時間dt2と同時か調べる	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: 日付adateが日付adate2と同時[か[|どうか][調べる||[確認|判定|テスト]する]|]	adate == adate2	translate: 日付adateが日付adate2と同時か	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtと[日時|日付と時[間|刻]]dt2の時間差[|を[求める|計算する|算出する]]	dt - dt2	translate: 日時dtと日時dt2の時間差	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: 日付adateと日付adate2の時間差[|を[求める|計算する|算出する]]	adate - adate2	translate: 日付adateと日付adate2の時間差	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtと[日時|日付と時[間|刻]]dt2の時間差を[秒数|秒]で[求める|計算する|算出する]	(dt - dt2).total_seconds()	translate: 日時dtと日時dt2の時間差を秒数で求める	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtと[日時|日付と時[間|刻]]dt2の時間差[が|は]何秒か知る	(dt - dt2).total_seconds()	translate: 日時dtと日時dt2の時間差が何秒か知る	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: 日付adateと日付adate2の時間差を[秒数|秒]で[求める|計算する|算出する]	(adate - adate2).total_seconds()	translate: 日付adateと日付adate2の時間差を秒数で求める	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: 日付adateと日付adate2の時間差[が|は]何秒か知る	(adate - adate2).total_seconds()	translate: 日付adateと日付adate2の時間差が何秒か知る	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtと[日時|日付と時[間|刻]]dt2の時間差を[秒数|秒]で[求める|計算する|算出する]	(dt - dt2).total_seconds()//60	translate: 日時dtと日時dt2の時間差を秒数で算出する	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: [日時|日付と時[間|刻]]dtと[日時|日付と時[間|刻]]dt2の時間差[が|は]何分か知る	(dt - dt2).total_seconds()//60	translate: 日時dtと日時dt2の時間差が何分か知る	_	"(NameError(""name 'dt2' is not defined""), '_')"
translate: 日付adateと日付adate2の時間差を[秒数|秒]で[求める|計算する|算出する]	(adate - adate2).total_seconds()//60	translate: 日付adateと日付adate2の時間差を秒数で求める	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: 日付adateと日付adate2の時間差[が|は]何分か知る	(adate - adate2).total_seconds()//60	translate: 日付adateと日付adate2の時間差が何分か知る	_	"(NameError(""name 'adate2' is not defined""), '_')"
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableと[[リスト|タプル|配列]|列|イテラブル|]iterable2の全組み合わせ	list(itertools.product(iterable, iterable2))	translate: リストiterableとリストiterable2の全組み合わせ	_	[(0, 7), (0, 8), (0, 9), (1, 7), (1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (4, 7), (4, 8), (4, 9)]
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableと[[リスト|タプル|配列]|列|イテラブル|]iterable2の全組み合わせを繰り返す	pass	translate: リストiterableとリストiterable2の全組み合わせを繰り返す	_	(SyntaxError('unexpected EOF while parsing', ('<string>', 1, 1, 'pass')), '_')
translate: AとBの二重ループを単ループにする	pass	translate: AとBの二重ループを単ループにする	_	(SyntaxError('unexpected EOF while parsing', ('<string>', 1, 1, 'pass')), '_')
translate: イテレータAとBを[連続して]繰り返す	for X in itertools.chain(A, B):	translate: イテレータAとBを[連続して]繰り返す	_	(SyntaxError('invalid syntax', ('<string>', 1, 1, 'for X in itertools.chain(A, B):')), '_')
translate: B(イテレータ)をA(イテレータ)に続けて繰り返す	for X in itertools.chain(A, B):	translate: B(イテレータ)をA(イテレータ)に続けて繰り返す	_	(SyntaxError('invalid syntax', ('<string>', 1, 1, 'for X in itertools.chain(A, B):')), '_')
translate: a(リスト)を[flattenする | 平らにする | 1次元にする]	list(itertools.chain.from_iterable(a))	translate: a(リスト)をflattenする 	_	"(NameError(""name 'a' is not defined""), '_')"
translate: 	"""file""(ファイル名)から行単位でテキストを読み込む"	translate: 	_	"(SyntaxError('unexpected EOF while parsing', ('<string>', 1, 14, '""file""(ファイル名)から行単位でテキストを読み込む')), '_')"
translate: 空の辞書[|を[[作る|作成する]|[|新規]生成する|[用意|準備]する]]	{}	translate: 空の辞書	_	{}
translate: 変数名をキーとして[、|]辞書[|を[[作る|作成する]|[|新規]生成する|[用意|準備]する]]	dict(name=element)	translate: 変数名をキーとして、辞書	_	{'name': 2}
translate: 辞書adictのkeyの値[|を[得る|参照する|見る]]	adict[key]	translate: 辞書adictのkeyの値	_	1
translate: 辞書adictの[キー|項目名]一覧[|を[得る|参照する|見る]]	list(adict)	translate: 辞書adictのキー一覧	_	['A']
translate: 辞書adictの[エントリ|項目]数[|を[得る|参照する|見る]]	len(adict)	translate: 辞書adictのエントリ数	_	1
translate: 辞書adictの全[[エントリ|項目]]を[クリアする|消去する|空にする]	adict.clear()	translate: 辞書adictの全をクリアする	_	None
translate: 辞書adictを[|浅く][コピーする|複製する]	adict.copy()	translate: 辞書adictをコピーする	_	{'A': 1}
translate: 辞書adictの[浅い|]コピーを行う	adict.copy()	translate: 辞書adictの浅いコピーを行う	_	{'A': 1}
translate: 辞書adictからkeyの値[|を[得る|参照する|見る]]	adict.get(key)	translate: 辞書adictからkeyの値	_	1
translate: 辞書adictのkeyに対応した値[|を[得る|参照する|見る]]	adict.get(key)	translate: 辞書adictのkeyに対応した値	_	1
translate: {辞書adictからkeyの値を|エラーなく}[得る|参照する|見る]	adict.get(key, None)	translate: エラーなく辞書adictからkeyの値を得る	_	1
translate: {辞書adictからkeyの値か[、|]もしくは[文字列|オブジェクト|]elementを[得る|参照する|見る]	adict.get(key, element)	translate: {辞書adictからkeyの値か、もしくは文字列elementを得る	_	1
translate: {keyが|辞書adictに}[存在する|ある|存在している][か[|どうか][調べる||[確認|判定|テスト]する]|]	key in adict	translate: keyが辞書adictに存在するか調べる	_	True
translate: {keyが|辞書adict上で}[定義済み|[|既に]定義されている][か[|どうか][調べる||[確認|判定|テスト]する]|]	key in adict	translate: 辞書adict上でkeyが定義済みか調べる	_	True
translate: {keyが|辞書adictに}[存在する|ある|存在している][か[|どうか][調べる||[確認|判定|テスト]する]|]	key not in adict	translate: 辞書adictにkeyが存在するか確認する	_	False
translate: {keyが|辞書adict上で}[未定義|[まだ|]定義されていない][か[|どうか][調べる||[確認|判定|テスト]する]|]	key not in adict	translate: 辞書adict上でkeyがまだ定義されていないか調べる	_	False
translate: 辞書adictの[[エントリ|項目]|[キー|項目名]とその値][の一覧|一覧]	adict.items()	translate: 辞書adictのエントリの一覧	_	dict_items([('A', 1)])
translate: 辞書adictの[キー|項目名][の一覧|一覧]	adict.keys()	translate: 辞書adictのキーの一覧	_	dict_keys(['A'])
translate: 辞書adictの[値][の一覧|一覧]	adict.values()	translate: 辞書adictの値の一覧	_	dict_values([1])
translate: {[文字列|オブジェクト|]elementが|辞書adictの値に}含まれている[か[|どうか][調べる||[確認|判定|テスト]する]|]	element in adict.values()	translate: 文字列elementが辞書adictの値に含まれているか調べる	_	False
translate: {[文字列|オブジェクト|]elementが|辞書adictの値に}含まれていない[か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in adict.values()	translate: 文字列elementが辞書adictの値に含まれていないか調べる	_	True
translate: 辞書adictのkeyを[文字列|オブジェクト|]elementに[設定|変更|]する	adict[key] = element	translate: 辞書adictのkeyを文字列elementに変更する	_;adict	{'A': 2}
translate: 辞書adictに[文字列|オブジェクト|]elementをkeyとして加える	adict[key] = element	translate: 辞書adictに文字列elementをkeyとして加える	_;adict	{'A': 2}
translate: {keyが|辞書adictに}[存在しない|ない|存在していない][とき|時|場合][、|][文字列|オブジェクト|]elementを追加する	adict.setdefault(key, element)	translate: keyが辞書adictに存在しないとき、文字列elementを追加する	_	1
translate: alt(追加更新する|追加する|加えて[、|]更新する)	adict.update(adict2)	translate: alt(追加更新する|追加する|加えて、更新する)	_;adict	{'A': 1, 'B': 2}
translate: 辞書adictに辞書adict2の[エントリ|項目]を追加更新する	adict.update(adict2)	translate: 辞書adictに辞書adict2のエントリを追加更新する	_;adict	{'A': 1, 'B': 2}
translate: 辞書adictに[キー|項目名]ワード引数kwargsを追加更新する	adict.update(**kwargs)	translate: 辞書adictにキーワード引数kwargsを追加更新する	kwargs={'B':2};_;adict	{'A': 1, 'B': 2}
translate: ふたつの辞書を[合体する|結合する|マージする]	adict | adict2	translate: ふたつの辞書を合体する	_	{'A': 1, 'B': 2}
translate: 辞書adictと辞書adict2を[合体する|結合する|マージする]	adict | adict2	translate: 辞書adictと辞書adict2を合体する	_	{'A': 1, 'B': 2}
translate: 辞書adictからkeyを取り除く	adict.pop(key)	translate: 辞書adictからkeyを取り除く	_	1
translate: 辞書adictから最後に追加した[エントリ|項目]を取り出す	adict.popitem()	translate: 辞書adictから最後に追加したエントリを取り出す	_	('A', 1)
translate: 辞書adictの[キー|項目名]と値を入れ替える	{v: k for k, v in adict.items()}	translate: 辞書adictのキーと値を入れ替える	_	{1: 'A'}
translate: リストalistとリストalist2から辞書[|を作成する]	dict(zip(alist, alist2))	translate: リストalistとリストalist2から辞書	_	{1: 4, 2: 5}
translate: 辞書adictを[浅く|][コピーする|複製する]	dict(adict)	translate: 辞書adictを浅くコピーする	_	{'A': 1}
translate: 辞書adictのコピー[を[[得る|参照する|見る]|[[作る|作成する]|[|新規]生成する|[用意|準備]する]]]	dict(adict)	translate: 辞書adictのコピーを得る	_	{'A': 1}
translate: 辞書adictを値を含めて[コピーする|複製する]	{k: copy.copy(v) for k, v in adict.items()}	translate: 辞書adictを値を含めて複製する	import copy;_	{'A': 1}
translate: osモジュールをインポートする	import os	translate: osモジュールをインポートする	_;type(os)	<class 'module'>
translate: 空行を[表示する|出力する|プリントする]	print()	translate: 空行を表示する	_	\n
translate: 改行する	print()	translate: 改行する	_	\n
translate: xを[表示する|出力する|プリントする]	print(element)	translate: xを出力する	_	2\n
translate: {[改行なしに|改行せず[|に]|改行しな[いで|くて]]|[文字列|オブジェクト|]elementを}[表示する|出力する|プリントする]	print(element, end='')	translate: 改行なしに文字列elementを表示する	_	2
translate: [文字列|オブジェクト|]elementの出力を[改行なしに|改行せず[|に]|改行しな[いで|くて]]行う	print(element, end='')	translate: 文字列elementの出力を改行なしに行う	_	2
translate: {[文字列|オブジェクト|]elementと[文字列|オブジェクト|]element2を|カンマ区切りで}[表示する|出力する|プリントする]	print(element, element2, sep=',')	translate: カンマ区切りで文字列elementと文字列element2を表示する	_	2,-1\n
translate: {[文字列|オブジェクト|]elementと[文字列|オブジェクト|]element2を|タブ区切りで}[表示する|出力する|プリントする]	print(element, element2, sep='\t')	translate: 文字列elementと文字列element2をタブ区切りで表示する	_	"2	-1\n"
translate: {[文字列|オブジェクト|]elementと[文字列|オブジェクト|]element2を|文字列s区切りで}[表示する|出力する|プリントする]	print(element, element2, sep=s)	translate: 文字列elementと文字列element2を文字列s区切りで表示する	_	2 ABC abc 123あ-1\n
translate: [ハローワールド|こんにちは世界][と|を][表示する|出力する|プリントする]	print('Hello World')	translate: ハローワールドとプリントする	_	Hello World\n
translate: {試しに|何か}動か[す|してみる]	print('Hello World')	translate: 何か試しに動かす	_	Hello World\n
translate: [最初の|初めての]プログラムを書く	print('Hello World')	translate: 最初のプログラムを書く	_	Hello World\n
translate: xの小数点以下カンマ桁まで[を|][表示する|出力する|プリントする]	print('1'.format(x))	translate: xの小数点以下カンマ桁までを表示する	_	1\n
translate: xの小数点以下タブ桁まで[を|][表示する|出力する|プリントする]	print('2'.format(x))	translate: xの小数点以下タブ桁までを表示する	_	2\n
translate: xの小数点以下文字列s桁まで[を|][表示する|出力する|プリントする]	print('3'.format(x))	translate: xの小数点以下文字列s桁までを表示する	_	3\n
translate: xの小数点以下カンマ桁[まで|]の文字列に[変換|]する	'1'.format(x)	translate: xの小数点以下カンマ桁までの文字列に変換する	_	1
translate: xの小数点以下タブ桁[まで|]の文字列に[変換|]する	'2'.format(x)	translate: xの小数点以下タブ桁までの文字列に変換する	_	2
translate: xの小数点以下文字列s桁[まで|]の文字列に[変換|]する	'3'.format(x)	translate: xの小数点以下文字列s桁までの文字列に変換する	_	3
translate: [|標準]入力から1行[読み取る|受け取る]	input()	translate: 入力から1行読み取る	_	123
translate: ユーザの入力を[読み取る|受け取る]	input()	translate: ユーザの入力を読み取る	_	123
translate: [ユーザ|標準入力]から入力される	input()	translate: ユーザから入力される	_	123
translate: [ユーザの]入力を整数として受け取る	int(input())	translate: [ユーザの]入力を整数として受け取る	_	123
translate: ユーザが整数を入力する	int(input())	translate: ユーザが整数を入力する	_	123
translate: ユーザから入力される	int(input())	translate: ユーザから入力される	_	123
translate: [ファイルパス|パス|ファイル名]の[セパレータ|区切り]記号[|を[使う|[使用する|用いる]]]	os.sep	translate: ファイルパスのセパレータ記号	_	/
translate: [[現在の|カレント|][作業|ワーキング]]ディレクトリ[|を得る]	os.getcwd()	translate: 現在の作業ディレクトリ	_	/Users/kimio/Git/multiese/new_corpus
translate: {[[現在の|カレント|][作業|ワーキング]]ディレクトリを|filenameに}[変更する|[設定|]する]	os.chdir(os.dirname(filename))	translate: 現在の作業ディレクトリをfilenameに変更する	None	None
translate: [UNIX|]コマンドtextを実行する	os.system(text)	translate: UNIXコマンドtextを実行する	"text=""echo 'A'"";_"	0
translate: ファイル[|パス]filenameの[|拡張子付きの]ファイル名[|を得る]	os.path.basename(filename)	translate: ファイルfilenameのファイル名	_	man.conf
translate: ファイル[|パス]filenameから[|拡張子付きの]ファイル名を[得る|取り出す]	os.path.basename(filename)	translate: ファイルfilenameからファイル名を得る	_	man.conf
translate: ファイル[|パス]filenameの[拡張子なしの|ベース]ファイル名[を得る]	os.path.splitext(os.path.basename(filename))[0]	translate: ファイルfilenameの拡張子なしのファイル名を得る	_	man
translate: ファイル[|パス]filenameから[拡張子なしの|ベース]ファイル名を[得る|取り出す]	os.path.splitext(os.path.basename(filename))[0]	translate: ファイルパスfilenameから拡張子なしのファイル名を得る	_	man
translate: ファイル[|パス]filenameの拡張子[|を得る]	os.path.splitext(filename)[1].lstrip('.')	translate: ファイルfilenameの拡張子	_	conf
translate: ファイル[|パス]filenameの拡張子をtextに変更する	os.path.splitext(filename)[0] + text	translate: ファイルfilenameの拡張子をtextに変更する	_	/etc/man/usr
translate: ファイル[|パス]filenameの[ディレクトリ|フォルダ]名[|を得る]	os.path.dirname(filename)	translate: ファイルfilenameのディレクトリ名	_	/etc
translate: ファイル[|パス]filenameから[ディレクトリ|フォルダ]名[を得る|取り出す]	os.path.dirname(filename)	translate: ファイルfilenameからディレクトリ名を得る	_	/etc
translate: ファイル[|パス]filenameの絶対[|ファイル]パス[|を得る]	os.path.abspath(filename)	translate: ファイルfilenameの絶対パス	_	/etc/man.conf
translate: ファイル[|パス]filenameを絶対[|ファイル]パスに[変換|]する	os.path.abspath(filename)	translate: ファイルfilenameを絶対パスに変換する	_	/etc/man.conf
translate: ファイル[|パス]filenameを[ディレクトリ|フォルダ]名とファイル名に分割する	os.path.split(filename)	translate: ファイルfilenameをディレクトリ名とファイル名に分割する	_	('/etc', 'man.conf')
translate: ファイル[|パス]filenameをベース名と拡張子に分割する	os.path.splitext(filename)	translate: ファイルfilenameをベース名と拡張子に分割する	_	('/etc/man', '.conf')
translate: textとtext2を[ファイルパス|パス|ファイル名]として結合する	os.path.join(text, text2)	translate: textとtext2をパスとして結合する	_	/usr/utf-8
translate: ファイル[|パス]filenameとtextを結合する	os.path.join(filename, text)	translate: ファイルfilenameとtextを結合する	_	/usr
translate: ファイル[|パス]filenameが[存在する|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	os.path.exists(filename)	translate: ファイルfilenameが存在するか調べる	_	True
translate: ファイル[|パス]filenameが[存在し|]ない[か[|どうか][調べる||[確認|判定|テスト]する]|]	not os.path.exists(filename)	translate: ファイルfilenameが存在しないか調べる	_	False
translate: ファイル[|パス]filenameのファイルサイズ	os.path.get_size(filename)	translate: ファイルfilenameのファイルサイズ	_	"(AttributeError(""module 'posixpath' has no attribute 'get_size'""), '_')"
translate: スクリプトファイルの[絶対|]パス[|を得る]	os.path.abspath(__file__)	translate: スクリプトファイルの絶対パス	_	"(NameError(""name '__file__' is not defined""), '_')"
translate: スクリプトファイルの[ディレクトリ|フォルダ][名|パス][|を得る]	os.path.dirname(os.path.abspath(__file__))	translate: スクリプトファイルのディレクトリ名	_	"(NameError(""name '__file__' is not defined""), '_')"
translate: スクリプトファイルと同じ[ディレクトリ|フォルダ]のファイル[|パス]filenameのパス[|を得る]	os.path.join(os.path.dirname(os.path.abspath(__file__)), filename)	translate: スクリプトファイルと同じディレクトリのファイルfilenameのパス	_	"(NameError(""name '__file__' is not defined""), '_')"
translate: ファイル[|パス]filenameを[オープンする|開く]]	open(filename)	translate: ファイルfilenameをオープンする	_	<_io.TextIOWrapper name='/etc/man.conf' mode='r' encoding='UTF-8'>
translate: ファイル[|パス]filename[からの|から|の][入力|読み込み|]ストリームを得る	open(filename)	translate: ファイルfilenameからの入力ストリームを得る	_	<_io.TextIOWrapper name='/etc/man.conf' mode='r' encoding='UTF-8'>
translate: ファイル[|パス]filenameからストリームを読み込[み|んで]Xとする	X = open(filename)	translate: ファイルfilenameからストリームを読み込みXとする	_;type(X)	<class '_io.TextIOWrapper'>
translate: ファイル[|パス]filenameからストリームを[オープンして|開[いて|き]、]]Xとする	X = open(filename)	translate: ファイルfilenameからストリームをオープンして	_;type(X)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|読み込み[モード[で|として|を[用いて|使って]]|用に]}[オープンする|開く]]	open(filename, mode='r')	translate: ファイルfilenameを読み込みモードでオープンする	type(_)	<class '_io.TextIOWrapper'>
translate: ファイル[|パス]filenameから読み込みストリームを[オープンする|開く]]	open(filename, mode='r')	translate: ファイルfilenameから読み込みストリームをオープンする	type(_)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|バイナリ[モード[で|として|を[用いて|使って]]|用に]}[オープンする|開く]]	open(filename, mode='rb')	translate: ファイルfilenameをバイナリモードでオープンする	type(_)	<class '_io.BufferedReader'>
translate: ファイル[|パス]filenameからバイナリストリームを[オープンする|開く]]	open(filename, mode='rb')	translate: ファイルfilenameからバイナリストリームをオープンする	type(_)	<class '_io.BufferedReader'>
translate: {ファイル[|パス]filenameを|書き込み[モード[で|として|を[用いて|使って]]|用に]}[オープンする|開く]]	open(filename, mode='w')	translate: ファイルfilenameを書き込みモードでオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: ファイル[|パス]filenameから書き込みストリームを[オープンする|開く]]	open(filename, mode='w')	translate: ファイルfilenameから書き込みストリームをオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|追加[モード[で|として|を[用いて|使って]]|用に]}[オープンする|開く]]	open(filename, mode='a')	translate: ファイルfilenameを追加モードでオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: ファイル[|パス]filenameから追加ストリームを[オープンする|開く]]	open(filename, mode='a')	translate: ファイルfilenameから追加ストリームをオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|読み込み[モード[で|として|を[用いて|使って]]|用に]}[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='r')	translate: ファイルfilenameを読み込みモードでオープンして	_;type(X)	<class '_io.TextIOWrapper'>
translate: ファイル[|パス]filenameから読み込みストリームを[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='r')	translate: ファイルfilenameから読み込みストリームをオープンして	_;type(X)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|バイナリ[モード[で|として|を[用いて|使って]]|用に]}[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='rb')	translate: ファイルfilenameをバイナリモードでオープンして	_;type(X)	<class '_io.BufferedReader'>
translate: ファイル[|パス]filenameからバイナリストリームを[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='rb')	translate: ファイルfilenameからバイナリストリームをオープンして	_;type(X)	<class '_io.BufferedReader'>
translate: {ファイル[|パス]filenameを|書き込み[モード[で|として|を[用いて|使って]]|用に]}[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='w')	translate: ファイルfilenameを書き込みモードでオープンして	_;type(X)	(PermissionError(13, 'Permission denied'), '_;type(X)')
translate: ファイル[|パス]filenameから書き込みストリームを[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='w')	translate: ファイルfilenameから書き込みストリームをオープンして	_;type(X)	(PermissionError(13, 'Permission denied'), '_;type(X)')
translate: {ファイル[|パス]filenameを|追加[モード[で|として|を[用いて|使って]]|用に]}[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='a')	translate: 追加モードでファイルパスfilenameをオープンして	_;type(X)	(PermissionError(13, 'Permission denied'), '_;type(X)')
translate: ファイル[|パス]filenameから追加ストリームを[オープンして|開[いて|き]、]]Xとする	X = open(filename, mode='a')	translate: ファイルfilenameから追加ストリームをオープンして	_;type(X)	(PermissionError(13, 'Permission denied'), '_;type(X)')
translate: {ファイル[|パス]filenameを|UTF8[で|として|を[用いて|使って]]|読み込み[用|できるよう]に}[オープンする|開く]]	open(filename, encoding='utf-8')	translate: UTF8で読み込み用にファイルfilenameをオープンする	type(_)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|SJIS[で|として|を[用いて|使って]]|読み込み[用|できるよう]に}[オープンする|開く]]	open(filename, encoding='shift_jis')	translate: ファイルfilenameを読み込みできるようにSJISでオープンする	type(_)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|EUC[で|として|を[用いて|使って]]|読み込み[用|できるよう]に}[オープンする|開く]]	open(filename, encoding='euc_jp')	translate: ファイルfilenameをEUCで読み込み用にオープンする	type(_)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|BOM付き[で|として|を[用いて|使って]]|読み込み[用|できるよう]に}[オープンする|開く]]	open(filename, encoding='utf_8_sig')	translate: ファイルfilenameを読み込み用にBOM付きで開く	type(_)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|文字コードtext2[で|として|を[用いて|使って]]|読み込み[用|できるよう]に}[オープンする|開く]]	open(filename, encoding=text2)	translate: ファイルfilenameを文字コードtext2で読み込み用にオープンする	type(_)	<class '_io.TextIOWrapper'>
translate: {ファイル[|パス]filenameを|UTF8[で|として|を[用いて|使って]]|書き込み[用|できるよう]に}[オープンする|開く]]	open(filename, mode='w', encoding='utf-8')	translate: ファイルfilenameを書き込み用にUTF8でオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|SJIS[で|として|を[用いて|使って]]|書き込み[用|できるよう]に}[オープンする|開く]]	open(filename, mode='w', encoding='shift_jis')	translate: ファイルfilenameをSJISで書き込み用にオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|EUC[で|として|を[用いて|使って]]|書き込み[用|できるよう]に}[オープンする|開く]]	open(filename, mode='w', encoding='euc_jp')	translate: ファイルfilenameをEUCで書き込み用にオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|BOM付き[で|として|を[用いて|使って]]|書き込み[用|できるよう]に}[オープンする|開く]]	open(filename, mode='w', encoding='utf_8_sig')	translate: ファイルfilenameをBOM付きで書き込み用にオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|文字コードtext2[で|として|を[用いて|使って]]|書き込み[用|できるよう]に}[オープンする|開く]]	open(filename, mode='w', encoding=text2)	translate: ファイルfilenameを文字コードtext2で書き込み用にオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|UTF8[で|として|を[用いて|使って]]|追加できるように}[オープンする|開く]]	open(filename, mode='a', encoding='utf-8')	translate: 追加できるようにファイルfilenameをUTF8でオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|SJIS[で|として|を[用いて|使って]]|追加できるように}[オープンする|開く]]	open(filename, mode='a', encoding='shift_jis')	translate: ファイルfilenameをSJISで追加できるようにオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|EUC[で|として|を[用いて|使って]]|追加できるように}[オープンする|開く]]	open(filename, mode='a', encoding='euc_jp')	translate: 追加できるようにファイルfilenameをEUCでオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|BOM付き[で|として|を[用いて|使って]]|追加できるように}[オープンする|開く]]	open(filename, mode='a', encoding='utf_8_sig')	translate: ファイルfilenameをBOM付きで追加できるようにオープンする	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: {ファイル[|パス]filenameを|文字コードtext2[で|として|を[用いて|使って]]|追加できるように}[オープンする|開く]]	open(filename, mode='a', encoding=text2)	translate: ファイルfilenameを文字コードtext2として追加できるように開く	type(_)	(PermissionError(13, 'Permission denied'), 'type(_)')
translate: [ファイル|[入力|出力|]ストリーム]fを[クローズする|閉じる|解放する]	f.close()	translate: ファイルfをクローズする	f=open('filer.txt');_	None
translate: [ファイル|[入力|]ストリーム]f全体を文字列として[読み込む|読む]	f.read()	translate: 入力ストリームf全体を文字列として読み込む	f=open('filer.txt');_	
translate: [ファイル|[入力|]ストリーム]fから[一|１|1][文字|バイト][、|][読み込む|読む]	f.read(1)	translate: ファイルfから一文字、読み込む	f=open('filer.txt');_	
translate: [ファイル|[入力|]ストリーム]fからn[文字|バイト][、|][読み込む|読む]	f.read(n)	translate: ファイルfからn文字読み込む	f=open('filer.txt');_	
translate: [ファイル|[入力|]ストリーム]f全体を[行[単位で|]分割して|リストとして][読み込む|読む]	f.readlines()	translate: ファイルf全体を行単位で分割して読み込む	f=open('filer.txt');_	[]
translate: [ファイル|[入力|]ストリーム]f全体を[行[単位で|ごとに]分割して|]リストに[変換|]する	[s.strip() for s in f.readlines()]	translate: ファイルf全体を行単位で分割してリストに変換する	f=open('filer.txt');_	[]
translate: [ファイル|[入力|]ストリーム]fを一行ずつ[読み込む|読む]	f.readline()	translate: ファイルfを一行ずつ読む	f=open('filer.txt');_	
translate: {[ファイル|[入力|]ストリーム]fを|改行[を取り除いて|除外して|なしで]}一行ずつ[読み込む|読む]	f.readline()	translate: 改行なしでファイルfを一行ずつ読む	f=open('filer.txt');_	
translate: {[ファイル|[出力|]ストリーム]fに|文字列sを}[書き込む|書く]	f.write(s)	translate: 出力ストリームfに文字列sを書き込む	f=open('filew.txt','w');_	13
translate: {[ファイル|[出力|]ストリーム]fに|xを文字列に[変換|]して}[書き込む|書く]	f.write(str(x))	translate: ファイルfにxを文字列に変換して書き込む	f=open('filew.txt','w');_	3
translate: xが正の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	x > 0	translate: xが正の数か調べる	_	True
translate: xが負の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	x < 0	translate: xが負の数か調べる	_	False
translate: xが一桁の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	-9 <= x <= 9	translate: xが一桁の数か調べる	_	True
translate: xが-9以上[、|]9以下[か[|どうか][調べる||[確認|判定|テスト]する]|]	-9 <= x <= 9	translate: xが-9以上、9以下か調べる	_	True
translate: xが一桁の正の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	0 <= x <= 9	translate: xが一桁の正の数か調べる	_	True
translate: xが1[、|]もしくは2[か[|どうか][調べる||[確認|判定|テスト]する]|]	x == 1 or x == 2	translate: xが1、もしくは2か調べる	_	False
translate: xが1[、|]もしくは2[、|]もしくは3に等しい[か[|どうか][調べる||[確認|判定|テスト]する]|]	x == 1 or x == 2 or x == 3	translate: xが1、もしくは2、もしくは3に等しいか調べる	_	False
translate: xのx2乗	x ** x2	translate: xのx2乗	_	3.375
translate: xにx2を[加える|加算する|足す]	x + x2	translate: xにx2を加える	_	4.5
translate: xからx2を[引く|減算する|減ずる]	x - x2	translate: xからx2を引く	_	-1.5
translate: xにx2を[掛ける|かける|乗算する]	x * x2	translate: xにx2を掛ける	_	4.5
translate: xをx2で[割る|除する|除算する]	x / x2	translate: xをx2で割る	_	0.5
translate: xをx2で[割って|除して|除算して]切り捨てる	x // x2	translate: xをx2で割って切り捨てる	_	0.0
translate: xをx2で[整数除算する]	x // x2	translate: xをx2で[整数除算する]	_	0.0
translate: xをx2で[割った|除した|除算した]余り	x % x2	translate: xをx2で割った余り	_	1.5
translate: Pythonのバージョン[|を知る]	sys.version	translate: Pythonのバージョン	_	3.9.5 (default, May  4 2021, 03:36:27) \n[Clang 12.0.0 (clang-1200.0.32.29)]
translate: 浮動小数点数の最大値[|を[使う|[使用する|用いる]]]	sys.float_info.max	translate: 浮動小数点数の最大値	_	1.7976931348623157e+308
translate: 浮動小数点数の最小値[|を[使う|[使用する|用いる]]]	sys.float_info.min	translate: 浮動小数点数の最小値	_	2.2250738585072014e-308
translate: 計算機イプシロン[|を[使う|[使用する|用いる]]]	sys.float_info.epsilon	translate: 計算機イプシロン	_	2.220446049250313e-16
translate: x[|の値]が整数[か[|どうか][調べる||[確認|判定|テスト]する]|]	x.is_integer()	translate: xが整数か調べる	_	False
translate: xを十六進文字列に[変換|]する	x.hex()	translate: xを十六進文字列に変換する	_	0x1.8000000000000p+0
translate: 文字列sのHEXから浮動小数点数に[変換|]する	float.fromhex(s)	translate: 文字列sのHEXから浮動小数点数に変換する	_	(ValueError('invalid hexadecimal floating-point string'), '_')
translate: [[有理数|分数]|分数]を[使う|[使用する|用いる]]	import fractions	translate: 有理数を使う	_;type(fractions)	<class 'module'>
translate: qの分子	q.numerator	translate: qの分子	_	"(NameError(""name 'q' is not defined""), '_')"
translate: qの分母	q.denominator	translate: qの分母	_	"(NameError(""name 'q' is not defined""), '_')"
translate: 分母の最大値を指定して近似したい	q.limit_denominator(max_denominator=1000000)	translate: 分母の最大値を指定して近似したい	_	"(NameError(""name 'q' is not defined""), '_')"
translate: 分母が高々 max_denominator である[、|] self に最も近い Fraction を見付けて	q.limit_denominator(max_denominator=1000000)	translate: 分母が高々 max_denominator であるself に最も近い Fraction を見付けて	_	"(NameError(""name 'q' is not defined""), '_')"
translate: 与えられた浮動小数点数の[有理数|分数]近似	q.limit_denominator(max_denominator=1000000)	translate: 与えられた浮動小数点数の分数近似	_	"(NameError(""name 'q' is not defined""), '_')"
translate: n進[|数]文字列sを整数[に変換する|[化|に]する]	int(s, n)	translate: n進文字列sを整数化する	_	(ValueError('int() base must be >= 2 and <= 36, or 0'), '_')
translate: [二進|2進][|数]文字列sを整数[に変換する|[化|に]する]	int(s, 2)	translate: 二進文字列sを整数に変換する	_	"(ValueError(""invalid literal for int() with base 2: ' ABC abc 123あ'""), '_')"
translate: [八進|8進][|数]文字列sを整数[に変換する|[化|に]する]	int(s, 8)	translate: 八進文字列sを整数に変換する	_	"(ValueError(""invalid literal for int() with base 8: ' ABC abc 123あ'""), '_')"
translate: [十六進|16進][|数]文字列sを整数[に変換する|[化|に]する]	int(s, 16)	translate: 十六進文字列sを整数に変換する	_	"(ValueError(""invalid literal for int() with base 16: ' ABC abc 123あ'""), '_')"
translate: n進[|数[|の]]文字列sを[|n2バイトの][バイト列|バイナリ][に変換する|[化|に]する]	int(s, n2).to_bytes(length=n2, byteorder='big')	translate: n進文字列sをバイト列化する	_	"(ValueError(""invalid literal for int() with base 3: ' ABC abc 123あ'""), '_')"
translate: [二進|2進][|数[|の]]文字列sを[|n2バイトの][バイト列|バイナリ][に変換する|[化|に]する]	int(s, 2).to_bytes(length=2, byteorder='big')	translate: 二進文字列sをバイト列に変換する	_	"(ValueError(""invalid literal for int() with base 2: ' ABC abc 123あ'""), '_')"
translate: [八進|8進][|数[|の]]文字列sを[|n2バイトの][バイト列|バイナリ][に変換する|[化|に]する]	int(s, 8).to_bytes(length=n2, byteorder='big')	translate: 八進文字列sをバイト列に変換する	_	"(ValueError(""invalid literal for int() with base 8: ' ABC abc 123あ'""), '_')"
translate: [十六進|16進][|数[|の]]文字列sを[|nバイトの][バイト列|バイナリ][に変換する|[化|に]する]	int(s, 16).to_bytes(length=n, byteorder='big')	translate: 十六進文字列sをバイト列に変換する	_	"(ValueError(""invalid literal for int() with base 16: ' ABC abc 123あ'""), '_')"
translate: [整数|]nの[二進|2進][|数][表現|表記|リテラル][|を得る]	bin(n)	translate: 整数nの二進表現を得る	_	0b1
translate: [整数|]nを[二進|2進][|数][表現|表記|リテラル][に変換する|[化|に]する]	bin(n)	translate: 整数nを二進表現に変換する	_	0b1
translate: [整数|]nの[八進|8進][|数][表現|表記|リテラル][|を得る]	oct(n)	translate: 整数nの八進表現	_	0o1
translate: [整数|]nを[八進|8進][|数][表現|表記|リテラル][に変換する|[化|に]する]	oct(n)	translate: 整数nを八進表記に変換する	_	0o1
translate: [整数|]nの[十六進|16進][|数][表現|表記|リテラル][|を得る]	hex(n)	translate: 整数nの十六進表現	_	0x1
translate: [整数|]nを[十六進|16進][|数][表現|表記|リテラル][に変換する|[化|に]する]	hex(n)	translate: 整数nを十六進表現に変換する	_	0x1
translate: [整数|]nの[二進|2進][|数]文字列[|を得る]	bin(n)[2:]	translate: 整数nの二進文字列	_	1
translate: [整数|]nを[二進|2進][|数]文字列[に変換する|[化|に]する]	bin(n)[2:]	translate: 整数nを二進数文字列に変換する	_	1
translate: [整数|]nの[八進|8進][|数]文字列[|を得る]	oct(n)[2:]	translate: 整数nの八進文字列	_	1
translate: [整数|]nを[八進|8進][|数]文字列[に変換する|[化|に]する]	oct(n)[2:]	translate: 整数nを八進文字列に変換する	_	1
translate: [整数|]nの[十六進|16進][|数]文字列[|を得る]	hex(n)[2:]	translate: 整数nの十六進文字列	_	1
translate: [整数|]nを[十六進|16進][|数]文字列[に変換する|[化|に]する]	hex(n)[2:]	translate: 整数nを十六進文字列に変換する	_	1
translate: [整数|]nのビット長[|を[見る|確認する|調べる]]	n.bit_length()	translate: 整数nのビット長	_	1
translate: [整数|]nのバイト長[|を[見る|確認する|調べる]]	(n.bit_length() + 7) // 8	translate: 整数nのバイト長	_	1
translate: [整数|]nを[バイト列|バイナリ][に変換する|[化|に]する]	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')	translate: 整数nをバイト列に変換する	_	b'\x01'
translate: {[整数|]nを|符号付きで}[バイト列|バイナリ][に変換する|[化|に]する]	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)	translate: 整数nを符号付きでバイト列に変換する	_	b'\x01'
translate: {[整数|]nを|[|符号なしで]}[バイト列|バイナリ][に変換する|[化|に]する]	n.to_bytes(length=n2, byteorder='big')	translate: 整数nをバイト列に変換する	_	b'\x00\x00\x01'
translate: {[整数|]nを|符号付きで}長さn2の[バイト列|バイナリ][に変換する|[化|に]する]	n.to_bytes(length=n2, byteorder='big', signed=True)	translate: 符号付きで整数nを長さn2のバイト列に変換する	_	b'\x00\x00\x01'
translate: nにn2を[加える|加算する]	n + n2	translate: nにn2を加える	_	4
translate: n[プラス|足す|＋]n2[|を[求める|計算する|算出する]]	n + n2	translate: nプラスn2	_	4
translate: nとn2の和[|を[求める|計算する|算出する]]	n + n2	translate: nとn2の和	_	4
translate: nからn2を[引く|減算する]	n - n2	translate: nからn2を引く	_	-2
translate: n[マイナス|引く|ー]n2[|を[求める|計算する|算出する]]	n - n2	translate: nマイナスn2	_	-2
translate: nとn2の差[|を[求める|計算する|算出する]]	n - n2	translate: nとn2の差	_	-2
translate: nにn2を[かける|掛ける]	n * n2	translate: nにn2を掛ける	_	3
translate: n[かける|掛ける|×]n2[|を[求める|計算する|算出する]]	n * n2	translate: nかけるn2	_	3
translate: nとn2の積[|を[求める|計算する|算出する]]	n * n2	translate: nとn2の積	_	3
translate: nをn2で[割る|わる]	n / n2	translate: nをn2で割る	_	0.3333333333333333
translate: n[わる|割る|÷]n2[|を[求める|計算する|算出する]]	n / n2	translate: nわるn2	_	0.3333333333333333
translate: nとn2の商[|を[求める|計算する|算出する]]	n / n2	translate: nとn2の商	_	0.3333333333333333
translate: n2分のn[|を[求める|計算する|算出する]]	n / n2	translate: n2分のn	_	0.3333333333333333
translate: nをn2で整数除算する	n // n2	translate: nをn2で整数除算する	_	0
translate: nのn2乗[|を[求める|計算する|算出する]]	n ** n2	translate: nのn2乗	_	1
translate: nの[二|2]乗[|を[求める|計算する|算出する]]	n ** 2	translate: nの2乗	_	1
translate: nの[三|3]乗[|を[求める|計算する|算出する]]	n ** 3	translate: nの三乗	_	1
translate: nをn2で割った[余り|モジュロ|剰余|mod][|を[求める|計算する|算出する]]	n % n2	translate: nをn2で割った余り	_	1
translate: nをn2で[割った][結果|値]の切り上げ[|を[求める|計算する|算出する]]	(n + n2 - 1) // n2	translate: nをn2で割った結果の切り上げ	_	1
translate: n割るn2を切り上げる	(n + n2 - 1) // n2	translate: n割るn2を切り上げる	_	1
translate: n割るn2の切り上げ	(n + n2 - 1) // n2	translate: n割るn2の切り上げ	_	1
translate: nをn2で割った[結果|値]を切り上げる	(n + n2 - 1) // n2	translate: nをn2で割った結果を切り上げる	_	1
translate: nとn2の[論理|ビット]積[|を[求める|計算する|算出する]]	n & n2	translate: nとn2の論理積	_	1
translate: nとn2の[論理|ビット]和[|を[求める|計算する|算出する]]	n | n2	translate: nとn2の論理和	_	3
translate: nとn2の[排他的論理和|XOR][|を[求める|計算する|算出する]]	n ^ n2	translate: nとn2の排他的論理和	_	2
translate: nをn2だけ左シフトする	n << n2	translate: nをn2だけ左シフトする	_	8
translate: nをn2だけ右シフトする	n >> n2	translate: nをn2だけ右シフトする	_	0
translate: nをn2だけ[増加させる|大きくする|増やす]	n += n2	translate: nをn2だけ増加させる	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n += n2')), '_')
translate: nにn2を足して代入する	n += n2	translate: nにn2を足して代入する	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n += n2')), '_')
translate: nとn2の値を足してn[に[代入|]する|とする]	n += n2	translate: nとn2の値を足してnに代入する	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n += n2')), '_')
translate: nをn2だけ[減少させる|小さくする|減らす]	n -= n2	translate: nをn2だけ減少させる	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n -= n2')), '_')
translate: nからn2[の値|]を引いてn[に[代入|]する|とする]	n -= n2	translate: nからn2の値を引いてnに代入する	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n -= n2')), '_')
translate: nをn2倍にする	n *= n2	translate: nをn2倍にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n *= n2')), '_')
translate: nにn2をかけた値をn[に[代入|]する|とする]	n *= n2	translate: nにn2をかけた値をnに代入する	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n *= n2')), '_')
translate: nをn2乗に増やす	n **= n2	translate: nをn2乗に増やす	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n **= n2')), '_')
translate: nをn2分の[一|１|1]にする	n /= n2	translate: nをn2分の一にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n /= n2')), '_')
translate: nを半分にする	n /= 2	translate: nを半分にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n /= 2')), '_')
translate: {nを|切り捨てながら}n2分の[一|１|1]にする	n //= n2	translate: 切り捨てながらnをn2分の一にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n //= n2')), '_')
translate: 整数nをn2分の[一|１|1]にする	n //= n2	translate: 整数nをn2分の一にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n //= n2')), '_')
translate: {nを|切り捨てながら}半分にする	n //= 2	translate: nを切り捨てながら半分にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n //= 2')), '_')
translate: 整数nを半分にする	n //= 2	translate: 整数nを半分にする	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n //= 2')), '_')
translate: nをn2で割った余りをn[に[代入|]する|とする]	n %= n2	translate: nをn2で割った余りをnに代入する	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'n %= n2')), '_')
translate: nとn2が[等しい|同じ値][か[|どうか][調べる||[確認|判定|テスト]する]|]	n == n2	translate: nとn2が等しいか調べる	_	False
translate: n[が|は]n2と等しい[か[|どうか][調べる||[確認|判定|テスト]する]|]	n == n2	translate: nがn2と等しいか調べる	_	False
translate: n[が|は]n2[か[|どうか][調べる||[確認|判定|テスト]する]|]	n == n2	translate: nがn2か調べる	_	False
translate: nがn2より大きい[か[|どうか][調べる||[確認|判定|テスト]する]|]	n > n2	translate: nがn2より大きいか調べる	_	False
translate: nがn2よりも大きい[か[|どうか][調べる||[確認|判定|テスト]する]|]	n > n2	translate: nがn2よりも大きいか調べる	_	False
translate: nがn2より小さい[か[|どうか][調べる||[確認|判定|テスト]する]|]	n < n2	translate: nがn2より小さいか調べる	_	True
translate: nがn2よりも小さい[か[|どうか][調べる||[確認|判定|テスト]する]|]	n < n2	translate: nがn2よりも小さいか調べる	_	True
translate: nがn2以上[か[|どうか][調べる||[確認|判定|テスト]する]|]	n >= n2	translate: nがn2以上か調べる	_	False
translate: nがn2以下[か[|どうか][調べる||[確認|判定|テスト]する]|]	n <= n2	translate: nがn2以下か調べる	_	True
translate: nがn2未満[、|][または|もしくは|それか]n3以上[か[|どうか][調べる||[確認|判定|テスト]する]|]	n < n2 or n >= n3	translate: nがn2未満、またはn3以上かどうか調べる	_	True
translate: nがn2以下[、|][または|もしくは|それか][、|]n3以上[か[|どうか][調べる||[確認|判定|テスト]する]|]	n <= n2 or n >= n3	translate: nがn2以下、または、n3以上か調べる	_	True
translate: n2がn以上[、|]かつ[、|]n3以下[か[|どうか][調べる||[確認|判定|テスト]する]|]	n <= n2 and n2 <= n3	translate: n2がn以上、かつ、n3以下か調べる	_	False
translate: n2がnより大きく[、|]かつ[、|]n3[未満|より小さい][か[|どうか][調べる||[確認|判定|テスト]する]|]	n < n2 and n2 < n3	translate: n2がnより大きく、かつ、n3未満か調べる	_	False
translate: nが偶数[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % 2 == 0	translate: nが偶数か調べる	_	False
translate: nが2で割り切れる[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % 2 == 0	translate: nが2で割り切れるか調べる	_	False
translate: nが奇数[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % 2 == 1	translate: nが奇数	_	True
translate: nが2で割り切れない[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % 2 == 1	translate: nが2で割り切れないか調べる	_	True
translate: nが3の倍数[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % 3 == 0	translate: nが3の倍数か調べる	_	False
translate: nが3で割り切れる[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % 3 == 0	translate: nが3で割り切れるか調べる	_	False
translate: nが5の倍数[か[|どうか][調べる||[確認|判定|テスト]する]|]	n %  5 == 0	translate: nが5の倍数か調べる	_	False
translate: nが5で割り切れる[か[|どうか][調べる||[確認|判定|テスト]する]|]	n %  5 == 0	translate: nが5で割り切れるか調べる	_	False
translate: nがn2の倍数[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % n2 == 0	translate: nがn2の倍数か調べる	_	False
translate: nがn2で割り切れる[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % n2 == 0	translate: nがn2で割り切れるか調べる	_	False
translate: nがn2の倍数でない[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % n2 != 0	translate: nがn2の倍数でないか調べる	_	True
translate: nがn2で割り切れない[か[|どうか][調べる||[確認|判定|テスト]する]|]	n % n2 != 0	translate: nがn2で割り切れないか調べる	_	True
translate: nが正の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	n > 0	translate: nが正の数か調べる	_	True
translate: nが負の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	n < 0	translate: nが負の数か調べる	_	False
translate: nが一桁の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	-9 <= n <= 9	translate: nが一桁の数	_	True
translate: nが-9以上[、|]9以下[か[|どうか][調べる||[確認|判定|テスト]する]|]	-9 <= n <= 9	translate: nが-9以上、9以下か調べる	_	True
translate: nが一桁の正の[数|整数][か[|どうか][調べる||[確認|判定|テスト]する]|]	0 <= n <= 9	translate: nが一桁の正の数かどうか調べる	_	True
translate: [整数|]n[が|は] リストalistの[どれか|いづれか|[ひとつ|一つ][|である]][か[|どうか][調べる||[確認|判定|テスト]する]|]	n in alist	translate: 整数nがリストalistのどれかか調べる	_	True
translate: [整数|]n[が|は] セットasetの[どれか|いづれか|[ひとつ|一つ][|である]][か[|どうか][調べる||[確認|判定|テスト]する]|]	n in aset	translate: 整数nがセットasetのどれかか調べる	_	"(NameError(""name 'aset' is not defined""), '_')"
translate: [整数|]n[が|は] タプルatupleの[どれか|いづれか|[ひとつ|一つ][|である]][か[|どうか][調べる||[確認|判定|テスト]する]|]	n in atuple	translate: nがタプルatupleのどれかか調べる	_	True
translate: nが1[、|]もしくは2[か[|どうか][調べる||[確認|判定|テスト]する]|]	n == 1 or n == 2	translate: nが1、もしくは2か調べる	_	True
translate: nが1[、|]もしくは2[、|]もしくは3に等しい[か[|どうか][調べる||[確認|判定|テスト]する]|]	n == 1 or n == 2 or n == 3	translate: nが1、もしくは2、もしくは3に等しいかどうか調べる	_	True
translate: n[の桁数|[が|は]何桁か][|を[求める|計算する|算出する]]	len(str(n))	translate: nの桁数	_	1
translate: 整数n[の桁数|[が|は]何桁か][|を[求める|計算する|算出する]]	len(str(int(n)))	translate: 整数nが何桁か	_	1
translate: nの各桁の[総和|和][|を[求める|計算する|算出する]]	sum(map(int, str(n)))	translate: nの各桁の総和	_	1
translate: 整数nの各桁の[総和|和][|を[求める|計算する|算出する]]	sum(map(int, str(int(n))))	translate: 整数nの各桁の総和	_	1
translate: nの各桁の[総和|和][|を[求める|計算する|算出する]]	sum(map(int, str(n)))	translate: nの各桁の総和	_	1
translate: 整数nの各桁の[総和|和][|を[求める|計算する|算出する]]	sum(map(int, str(int(n))))	translate: 整数nの各桁の総和	_	1
translate: nの約数を列挙する	[i for i in range(1, int(n**0.5)+1) if n % i == 0] + [n//i for i in range(1, int(n**0.5)+1) if n % i == 0 and i != n // i].reverse()	translate: nの約数を列挙する	_	"(TypeError('can only concatenate list (not ""NoneType"") to list'), '_')"
translate: itertoolsモジュールをインポートする	import itertools	translate: itertoolsモジュールをインポートする	None	None
translate: nの無限[|な|の][数列|[|整数]リスト|[|整数]イテラブル][|を[得る|求める]]	itertools.repeat(n)	translate: nの無限リスト	type(_)	<class 'itertools.repeat'>
translate: nが無限に続く[数列|[|整数]リスト|[|整数]イテラブル][|を[得る|求める]]	itertools.repeat(n)	translate: nが無限に続く数列	type(_)	<class 'itertools.repeat'>
translate: {[文字列|オブジェクト|]elementが|[無限に|いつまでも]}[繰り返す|続く][イテラブル|列][|を[得る|求める]]	itertools.repeat(element)	translate: 文字列elementが無限に繰り返すイテラブルを得る	type(_)	<class 'itertools.repeat'>
translate: [文字列|オブジェクト|]elementの無限[|な|の][イテラブル|列][|を[得る|求める]]	itertools.repeat(element)	translate: 文字列elementの無限イテラブル	type(_)	<class 'itertools.repeat'>
translate: {[文字列|オブジェクト|]element[が|を]|n回}[繰り返す|続く][イテラブル|列][|を[得る|求める]]	itertools.repeat(element, n)	translate: 文字列elementがn回繰り返す列	type(_)	<class 'itertools.repeat'>
translate: [無限に|いつまでも][カウントアップ|数え上げる]する	itertools.count()	translate: 無限にカウントアップする	type(_)	<class 'itertools.count'>
translate: [0から始まる|]無限[|な|の][数列|[|整数]リスト|[|整数][イテラブル|列]][|を[得る|求める]]	itertools.count()	translate: 0から始まる無限数列	type(_)	<class 'itertools.count'>
translate: {nから|[無限に|いつまでも]}[カウントアップ|数え上げる]する	itertools.count(start=n)	translate: 無限にnからカウントアップする	type(_)	<class 'itertools.count'>
translate: {nからn間隔で|[無限に|いつまでも]}[カウントアップ|数え上げる]する	itertools.count(start=n, step=n2)	translate: nからn間隔で無限に数え上げるする	type(_)	<class 'itertools.count'>
translate: range[|関数]の無限[バージョン|版]	itertools.count(start=n, step=n2)	translate: range関数の無限バージョン	type(_)	<class 'itertools.count'>
translate: {nから|[無限に|いつまでも]}カウントダウンする	itertools.count(start=n, step=-1)	translate: nから無限にカウントダウンする	type(_)	<class 'itertools.count'>
translate: {[[リスト|タプル|配列]|列|[イテラブル|列]|]iterableを|[[無限に|いつまでも]|ぐるぐると|周期的に]}繰り返す	itertools.cycle(iterable)	translate: 配列iterableを無限に繰り返す	type(_)	<class 'itertools.cycle'>
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableを累加する	itertools.accumulate(iterable)	translate: イテラブルiterableを累加する	list(_)	[0, 1, 3, 7]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableを累加した[イテラブル|列][|を[得る|求める]]	itertools.accumulate(iterable)	translate: リストiterableを累加した列	list(_)	[0, 1, 3, 7]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableを累積する	itertools.accumulate(iterable, operator.mul)	translate: タプルiterableを累積する	list(_)	[0, 0, 0, 0]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableを累積した[イテラブル|列][|を[得る|求める]]	itertools.accumulate(iterable, operator.mul)	translate: リストiterableを累積したイテラブル	list(_)	[0, 0, 0, 0]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableと[[リスト|タプル|配列]|列|[イテラブル|列]|]iterable2を[連結する|つなぐ|チェインする]	itertools.chain(iterable, iterable2)	translate: リストiterableとリストiterable2をつなぐ	list(_)	[0, 1, 2, 4, 7, 8, 9]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableに[[リスト|タプル|配列]|列|[イテラブル|列]|]iterable2を続ける	itertools.chain(iterable, iterable2)	translate: リストiterableにリストiterable2を続ける	list(_)	[0, 1, 2, 4, 7, 8, 9]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableに[[リスト|タプル|配列]|列|[イテラブル|列]|]iterable2を続けた[イテラブル|列][|を[得る|求める]]	itertools.chain(iterable, iterable2)	translate: リストiterableにリストiterable2を続けたイテラブルを得る	list(_)	[0, 1, 2, 4, 7, 8, 9]
translate: selectorsでマスクされた[[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの要素を取り出す	itertools.compress(iterable, selectors=iterable2)	translate: selectorsでマスクされたイテラブルiterableの要素を取り出す	list(_)	[0, 1, 2]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの各要素に対して[、|]関数predicatefunc[|の適用]が[真|[T|t]rue]であれば[、|]その要素を出力する	itertools.takewhile(predicatefunc, iterable)	translate: リストiterableの各要素に対して、関数predicatefuncが真であれば、その要素を出力する	list(_)	[0, 1, 2, 4]
translate: 関数predicatefuncが[真|[T|t]rue][と|に]なる[[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの[要素|部分][|を[得る|求める]|を取り出す]	itertools.takewhile(predicatefunc, iterable)	translate: 関数predicatefuncが真となるリストiterableの要素	list(_)	[0, 1, 2, 4]
translate: 関数predicatefunc[が|を適用したとき][真|[T|t]rue]とならない[[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの[要素|部分][|を[得る|求める]|を取り出す]	itertools.dropwhile(predicatefunc, iterable)	translate: 関数predicatefuncが真とならないリストiterableの要素	list(_)	[]
translate: 関数predicatefunc[が|を適用したとき][真|[T|t]rue][と|に]なる[[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの[要素|部分][|を取り除く|を消す|を除去する]	itertools.dropwhile(predicatefunc, iterable)	translate: 関数predicatefuncが真となるリストiterableの要素	list(_)	[]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableと[[リスト|タプル|配列]|列|[イテラブル|列]|]iterable2をペアのリストに[|変換]する	itertools.zip_longest(iterable, iterable2)	translate: リストiterableとリストiterable2をペアのリストにする	list(_)	[(0, 7), (1, 8), (2, 9), (4, None)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableと[[リスト|タプル|配列]|列|[イテラブル|列]|]iterable2を[ペアリングする|ペア化する|[zip|ジップ]する]	itertools.zip_longest(iterable, iterable2)	translate: イテラブルiterableとリストiterable2をペアリングする	list(_)	[(0, 7), (1, 8), (2, 9), (4, None)]
translate: [不揃いな長さの|長さが一致しない[とき|[バージョン|版]]]のzip	itertools.zip_longest(iterable, iterable2)	translate: 不揃いな長さののzip	list(_)	[(0, 7), (1, 8), (2, 9), (4, None)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableと[[リスト|タプル|配列]|列|[イテラブル|列]|]iterable2の[直積|デカルト積][|を[[得る|求める]|[求める|計算する|算出する]]]	itertools.product(iterable, iterable2)	translate: リストiterableと配列iterable2の直積	list(_)	[(0, 7), (0, 8), (0, 9), (1, 7), (1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (4, 7), (4, 8), (4, 9)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterable[|自身]を2回あわせた[直積|デカルト積][|を[[得る|求める]|[求める|計算する|算出する]]]	itertools.product(iterable, repeat=2)	translate: リストiterableを2回あわせたデカルト積	list(_)	[(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 1), (1, 2), (1, 4), (2, 0), (2, 1), (2, 2), (2, 4), (4, 0), (4, 1), (4, 2), (4, 4)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの全順列[|を[[得る|求める]|[求める|計算する|算出する]]]	itertools.permutations(iterable)	translate: リストiterableの全順列を得る	list(_)	[(0, 1, 2, 4), (0, 1, 4, 2), (0, 2, 1, 4), (0, 2, 4, 1), (0, 4, 1, 2), (0, 4, 2, 1), (1, 0, 2, 4), (1, 0, 4, 2), (1, 2, 0, 4), (1, 2, 4, 0), (1, 4, 0, 2), (1, 4, 2, 0), (2, 0, 1, 4), (2, 0, 4, 1), (2, 1, 0, 4), (2, 1, 4, 0), (2, 4, 0, 1), (2, 4, 1, 0), (4, 0, 1, 2), (4, 0, 2, 1), (4, 1, 0, 2), (4, 1, 2, 0), (4, 2, 0, 1), (4, 2, 1, 0)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterable[|自身]の長さnの順列[|を[[得る|求める]|[求める|計算する|算出する]]]	itertools.permutations(iterable, n)	translate: リストiterableの長さnの順列	list(_)	[(0,), (1,), (2,), (4,)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの[コンビネーション|組み合わせ|組み合せ][|を[[得る|求める]|[求める|計算する|算出する]]]	itertools.combinations(iterable, n)	translate: リストiterableのコンビネーション	list(_)	[(0,), (1,), (2,), (4,)]
translate: [[リスト|タプル|配列]|列|[イテラブル|列]|]iterableの重複[コンビネーション|組み合わせ|組み合せ][|を[[得る|求める]|[求める|計算する|算出する]]]	itertools.combinations_with_replacement(iterable, n)	translate: リストiterableの重複コンビネーション	list(_)	[(0,), (1,), (2,), (4,)]
translate: 空列[|を[作る|得る]]	[]	translate: 空列	_	[]
translate: 空のリスト[|を[作る|得る]]	[]	translate: 空のリストを作る	_	[]
translate: 空の[タプル|組][|を[作る|得る]]	()	translate: 空のタプル	_	()
translate: [要素|[文字列|オブジェクト|]element][ひとつ|一つ]の[タプル|組][|を[作る|得る]]	(element,)	translate: 要素ひとつのタプル	_	(2,)
translate: xとx2から成るペア[|を[作る|得る]]	(x, x2)	translate: xとx2から成るペア	_	(1.5, 3.0)
translate: [要素|[文字列|オブジェクト|]element][ひとつ|一つ]のりスト[|を[作る|得る]]	[element]	translate: 要素ひとつのりスト	_	[2]
translate: n個の[要素|[文字列|オブジェクト|]element]があるリスト[|を[作る|得る]]	[element] * n	translate: n個の要素があるリスト	_	[2]
translate: 長さnのリスト[|を[作る|得る]]	[0] * n	translate: 長さnのリスト	_	[0]
translate: n2行n列の[二|２|2]次元リスト[|を[作る|得る]]	[[0] * n for _ in range(n2)]	translate: n2行n列の二次元リスト	_	[[0], [0], [0]]
translate: n[×| x ]n2の[二|２|2]次元リスト[|を[作る|得る]]	[[0] * n for _ in range(n2)]	translate: n×n2の二次元リスト	_	[[0], [0], [0]]
translate: リストalistを[タプル|組][に変換する|[に|化]する]	tuple(alist)	translate: リストalistをタプルに変換する	_	(1, 2, 3)
translate: リストalistをイミュータブルにする	tuple(alist)	translate: リストalistをイミュータブルにする	_	(1, 2, 3)
translate: タプルatupleをリスト[に変換する|[に|化]する]	list(atuple)	translate: タプルatupleをリストに変換する	_	[1, 2, 3]
translate: タプルatupleをミュータブルにする	list(atuple)	translate: タプルatupleをミュータブルにする	_	[1, 2, 3]
translate: リストalistの[長さ|要素数|個数][|を[見る|調べる|知る|得る]]	len(alist)	translate: リストalistの長さ	_	3
translate: タプルatupleの[長さ|要素数|個数][|を[見る|調べる|知る|得る]]	len(atuple)	translate: タプルatupleの長さ	_	3
translate: リストalistが空[か[|どうか][調べる||[確認|判定|テスト]する]|]	len(alist) == 0	translate: リストalistが空か調べる	_	False
translate: リストalistが空でない[か[|どうか][調べる||[確認|判定|テスト]する]|]	len(alist) != 0	translate: リストalistが空でないか調べる	_	True
translate: リストalistとリストalist2を[連結する|結合する|接続する|加える]	alist + alist2	translate: リストalistとリストalist2を連結する	_	[1, 2, 3, 4, 5]
translate: タプルatupleとタプルatuple2を[連結する|結合する|接続する|加える]	atuple + atuple2	translate: タプルatupleとタプルatuple2を連結する	_	(1, 2, 3, 4, 5)
translate: リストalistをn倍する	alist * n	translate: リストalistをn倍する	_	[1, 2, 3]
translate: リストalistをn回[、|][連結する|結合する|接続する|加える]	alist * n	translate: リストalistをn回、連結する	_	[1, 2, 3]
translate: タプルatupleをn倍する	atuple * n	translate: タプルatupleをn倍する	_	(1, 2, 3)
translate: タプルatupleをn回[、|][連結する|結合する|接続する|加える]	atuple * n	translate: タプルatupleをn回、連結する	_	(1, 2, 3)
translate: リストalistの[先頭|最初][|の[要素|値]][|を得る]	alist[0]	translate: リストalistの先頭の要素	_	1
translate: タプルatupleの[先頭|最初][|の[要素|値]][|を得る]	atuple[0]	translate: タプルatupleの先頭	_	1
translate: リストalistの[末尾|最後][|の[要素|値]][|を得る]	alist[-1]	translate: リストalistの末尾	_	3
translate: タプルatupleの[末尾|最後][|の[要素|値]][|を得る]	atuple[-1]	translate: タプルatupleの最後の値	_	3
translate: リストalistのn番目の[|の[要素|値]][|を得る]	alist[n]	translate: リストalistのn番目の	_	2
translate: タプルatupleのn番目の[|の[要素|値]][|を得る]	atuple[n]	translate: タプルatupleのn番目の	_	2
translate: リストalistの[先頭|最初]を[[取り除く|除く|捨てる]|除く|捨てる]	alist[1:]	translate: リストalistの先頭を取り除く	_	[2, 3]
translate: タプルatupleの[先頭|最初]を[[取り除く|除く|捨てる]|除く|捨てる]	atuple[1:]	translate: タプルatupleの先頭を取り除く	_	(2, 3)
translate: リストalistの[先頭|最初]のn要素を[取り除く|除く|捨てる]	alist[n:]	translate: リストalistの先頭のn要素を取り除く	_	[2, 3]
translate: リストalistのn番目以降の[部分|要素]を[取り出す|得る|抽出する]	alist[n:]	translate: リストalistのn番目以降の部分を取り出す	_	[2, 3]
translate: タプルatupleの[先頭|最初]のn要素を[取り除く|除く|捨てる]	atuple[n:]	translate: タプルatupleの先頭のn要素を取り除く	_	(2, 3)
translate: タプルatupleのn番目以降の[部分|要素]を[取り出す|得る|抽出する]	atuple[n:]	translate: タプルatupleのn番目以降の部分を取り出す	_	(2, 3)
translate: リストalistの[末尾|最後]を[取り除く|除く|捨てる]	alist[:-1]	translate: リストalistの末尾を除く	_	[1, 2]
translate: タプルatupleの[末尾|最後]を[取り除く|除く|捨てる]	atuple[:-1]	translate: タプルatupleの末尾を取り除く	_	(1, 2)
translate: リストalistの[末尾|最後]のn要素を[取り除く|除く|捨てる]	alist[:-n]	translate: リストalistの末尾のn要素を取り除く	_	[1, 2]
translate: リストalistの[末尾|最後]からn番目以前の[部分|要素]を[取り出す|得る|抽出する]	alist[:-n]	translate: リストalistの末尾からn番目以前の部分を取り出す	_	[1, 2]
translate: タプルatupleの[末尾|最後]のn要素を[取り除く|除く|捨てる]	atuple[:-n]	translate: タプルatupleの末尾のn要素を取り除く	_	(1, 2)
translate: タプルatupleの[末尾|最後]からn番目以前の[部分|要素]を[取り出す|得る|抽出する]	atuple[:-n]	translate: タプルatupleの末尾からn番目以前の部分を取り出す	_	(1, 2)
translate: リストalistの[要素|値]を逆順にする	alist[::-1]	translate: リストalistの要素を逆順にする	_	[3, 2, 1]
translate: リストalistを逆順にする	alist[::-1]	translate: リストalistを逆順にする	_	[3, 2, 1]
translate: タプルatupleの[要素|値]を逆順にする	atuple[::-1]	translate: タプルatupleの要素を逆順にする	_	(3, 2, 1)
translate: タプルatupleを逆順にする	atuple[::-1]	translate: タプルatupleを逆順にする	_	(3, 2, 1)
translate: {リストalistを/[ひとつ置きに|ひとつ飛ばしで]}[取り出す|得る|抽出する]	alist[::2]	translate: リストalistをひとつ置きに取り出す	_	[1, 3]
translate: {タプルatupleを/[ひとつ置きに|ひとつ飛ばしで]}[取り出す|得る|抽出する]	atuple[::2]	translate: ひとつ置きにタプルatupleを取り出す	_	(1, 3)
translate: リストalistのn番目からn2番目[まで][の部分][|を[取り出す|得る|抽出する]]	alist[n:n2]	translate: リストalistのn番目からn2番目までの部分	_	[2, 3]
translate: タプルatupleのn番目からn2番目[まで][の部分][|を[取り出す|得る|抽出する]]	atuple[n:n2]	translate: タプルatupleのn番目からn2番目までの部分	_	(2, 3)
translate: [0から|]nまでのスライス	slice(n)	translate: 0からnまでのスライス	_	slice(None, 1, None)
translate: nからn2までのスライス	slice(n, n2)	translate: nからn2までのスライス	_	slice(1, 3, None)
translate: nからn2までのn3ごとによるスライス	slice(n, n2, n3)	translate: nからn2までのn3ごとによるスライス	_	slice(1, 3, -1)
translate: リストalistの[合計値|合計|総和][|を[求める|計算する|算出する]]	sum(alist)	translate: リストalistの合計値	_	6
translate: タプルatupleの[合計値|合計|総和][|を[求める|計算する|算出する]]	sum(atuple)	translate: タプルatupleの合計値	_	6
translate: リストalist[|の[中|内]]の[最小値|[一番|最も]小さい値][|を[求める|計算する|算出する]]	min(alist)	translate: リストalistの最小値	_	1
translate: タプルatuple[|の[中|内]]の[最小値|[一番|最も]小さい値][|を[求める|計算する|算出する]]	min(atuple)	translate: タプルatupleの最小値	_	1
translate: リストalist[|の[中|内]]の[最大値|[一番|最も]大きい値][|を[求める|計算する|算出する]]	max(alist)	translate: リストalistの最大値	_	3
translate: タプルatuple[|の[中|内]]の[最大値|[一番|最も]大きい値][|を[求める|計算する|算出する]]	max(atuple)	translate: タプルatupleの最大値	_	3
translate: リストalistの[平均値|平均][|を[求める|計算する|算出する]]	sum(alist)/len(alist)	translate: リストalistの平均値	_	2.0
translate: タプルatupleの[平均値|平均][|を[求める|計算する|算出する]]	sum(atuple)/len(atuple)	translate: タプルatupleの平均値	_	2.0
translate: リストalistの[長さ|要素数|個数]だけ繰り返す	range(len(alist))	translate: リストalistの長さだけ繰り返す	list(_)	[0, 1, 2]
translate: n[個|回]の数値イテラブル[|を得る]	range(n)	translate: n個の数値イテラブル	list(_)	[0]
translate: 0からnの範囲[|で|を得る]	range(n)	translate: 0からnの範囲	list(_)	[0]
translate: nからn2の範囲[|で|を得る]	range(n, n2)	translate: nからn2の範囲	list(_)	[1, 2]
translate: [|0から始まる]n個の[数列|整数列|整数リスト][|を[作る|得る]]	list(range(n))	translate: n個の数列	_	[0]
translate: 0からnまでの[数列|整数列|整数リスト][|を[作る|得る]]	list(range(n+1))	translate: 0からnまでの数列	_	[0, 1]
translate: 1からnまでの[数列|整数列|整数リスト][|を得る|を[作る|得る]]	list(range(1, n+1))	translate: 1からnまでの数列	_	[1]
translate: nからn2までの[数列|整数列|整数リスト][|を得る|を[作る|得る]]	list(range(n, n2+1))	translate: nからn2までの数列	_	[1, 2, 3]
translate: nからn2までの[ひとつ飛ばし|一つ置き]の[数列|整数列|整数リスト][|を[作る|得る]]	list(range(n, n2+1, 2))	translate: nからn2までのひとつ飛ばしの数列	_	[1, 3]
translate: nまでの偶[数列|整数列|整数リスト][|を[作る|得る]]	list(range(2, n, 2))	translate: nまでの偶数列	_	[]
translate: nまでの奇[数列|整数列|整数リスト][|を[作る|得る]]	list(range(1, n, 2))	translate: nまでの奇数列	_	[]
translate: リストalist[に|の[末尾|最後]に][[文字列|オブジェクト|]element|要素]を[追加する|加える]	alist.append(element)	translate: リストalistに文字列elementを追加する	_;alist	[1, 2, 3, 2]
translate: リストalist[に|の[末尾|最後]に]リストalist2を[[追加する|加える]|展開する]	alist.extend(alist2)	translate: リストalistにリストalist2を追加する	_;alist	[1, 2, 3, 4, 5]
translate: リストalist[に|の[末尾|最後]に]リストalist2を追加して[拡張する|広げる]	alist.extend(alist2)	translate: リストalistにリストalist2を追加して拡張する	_;alist	[1, 2, 3, 4, 5]
translate: リストalistのn番目に[文字列|オブジェクト|]elementを[挿入する|差し込む]	alist.insert(n, element)	translate: リストalistのn番目に文字列elementを挿入する	_;alist	[1, 2, 2, 3]
translate: リストalistの[末尾|最後]から[要素|値]を[ポップする|[取り出す|得る|抽出する]|[取り除く|除く|捨てる]]	alist.pop()	translate: リストalistの末尾から要素をポップする	_;alist	[1, 2]
translate: alistn番目から[要素|値]を[ポップする|[取り出す|得る|抽出する]|[取り除く|除く|捨てる]]	alist.pop(n)	translate: alistn番目から要素をポップする	_;alist	[1, 3]
translate: リストalistの[全ての|全|][要素|値]を[クリアにする|[取り除く|除く|捨てる]|[消去する|消す]|空にする]	alist.clear()	translate: リストalistの要素をクリアにする	_;alist	[]
translate: リストalistから[文字列|オブジェクト|]element[|と等しい最初の要素]を[取り除く|除く|捨てる]	alist.remove(element)	translate: リストalistから文字列elementを取り除く	_;alist	[1, 3]
translate: リストalistのn番目[の[要素|値]|]を[削除する|消す]	del alist[n]	translate: リストalistのn番目の要素を削除する	_;alist	[1, 3]
translate: [文字列|オブジェクト|]element[が|は]リストalistの要素[か[|どうか][調べる||[確認|判定|テスト]する]|]	element in alist	translate: 文字列elementがリストalistの要素かどうか調べる	_	True
translate: [文字列|オブジェクト|]element[が|は]リストalistに含まれる[か[|どうか][調べる||[確認|判定|テスト]する]|]	element in alist	translate: 文字列elementがリストalistに含まれるか調べる	_	True
translate: [文字列|オブジェクト|]element[が|は]タプルatupleの要素[か[|どうか][調べる||[確認|判定|テスト]する]|]	element in atuple	translate: 文字列elementがタプルatupleの要素か調べる	_	True
translate: [文字列|オブジェクト|]element[が|は]タプルatupleに含まれる[か[|どうか][調べる||[確認|判定|テスト]する]|]	element in atuple	translate: 文字列elementがタプルatupleに含まれるか調べる	_	True
translate: [文字列|オブジェクト|]element[が|は]リストalistの要素でない[か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in alist	translate: 文字列elementがリストalistの要素でないか調べる	_	False
translate: [文字列|オブジェクト|]element[が|は]リストalistに含まれない[か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in alist	translate: 文字列elementがリストalistに含まれないか調べる	_	False
translate: [文字列|オブジェクト|]element[が|は]タプルatupleの要素でない[か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in atuple	translate: 文字列elementがタプルatupleの要素でないか調べる	_	False
translate: [文字列|オブジェクト|]element[が|は]タプルatupleに含まれない[か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in atuple	translate: 文字列elementがタプルatupleに含まれないか調べる	_	False
translate: リストalist[|中]の[文字列|オブジェクト|]elementが最初に見つかる[インデックス|位置|場所][|を探す|を得る]	alist.index(element)	translate: リストalistの文字列elementが最初に見つかるインデックス	_	1
translate: リストalist[|中]の最初の[文字列|オブジェクト|]elementを探す	alist.index(element)	translate: リストalistの最初の文字列elementを探す	_	1
translate: タプルatuple[|中]の[文字列|オブジェクト|]elementが最初に見つかる[インデックス|位置|場所][|を探す|を得る]	atuple.index(element)	translate: タプルatupleの文字列elementが最初に見つかるインデックス	_	1
translate: タプルatuple[|中]の最初の[文字列|オブジェクト|]elementを探す	atuple.index(element)	translate: タプルatuple中の最初の文字列elementを探す	_	1
translate: リストalist[の[要素|値]]を[ソートする|並べる|並べ変える|並べ直す]	sorted(alist)	translate: リストalistの要素をソートする	_	[1, 2, 3]
translate: タプルatuple[の[要素|値]]を[ソートする|並べる|並べ変える|並べ直す]	sorted(atuple)	translate: タプルatupleの要素をソートする	_	[1, 2, 3]
translate: {リストalist[の[要素|値]]を|[昇順に|小さい[順に|方から]]}[ソートする|並べる|並べ変える|並べ直す]	sorted(alist, reverse=False)	translate: 昇順にリストalistの要素をソートする	_	[1, 2, 3]
translate: {タプルatuple[の[要素|値]]を|[昇順に|小さい[順に|方から]]}[ソートする|並べる|並べ変える|並べ直す]	sorted(atuple, reverse=False)	translate: 昇順にタプルatupleの要素をソートする	_	[1, 2, 3]
translate: {リストalist[の[要素|値]]を|[昇順に|小さい[順に|方から]]}[ソートする|並べる|並べ変える|並べ直す]	sorted(alist, reverse=True)	translate: リストalistを昇順に並べる	_	[3, 2, 1]
translate: {タプルatuple[の[要素|値]]を|[昇順に|小さい[順に|方から]]}[ソートする|並べる|並べ変える|並べ直す]	sorted(atuple, reverse=True)	translate: 昇順にタプルatupleの要素を並べる	_	[3, 2, 1]
translate: {リストalistの[文字列|オブジェクト|]elementの位置を|エラーなく}得る	alist.index(element) if element in alist else -1	translate: リストalistの文字列elementの位置をエラーなく得る	_	1
translate: リストalist[の[各|][要素|値]を関数funcに適用した結果で[ソートする|並べる|並べ変える|並べ直す]	sorted(alist, key=func)	translate: リストalist[の各要素を関数funcに適用した結果でソートする	_	[1, 2, 3]
translate: タプルatuple[の[各|][要素|値]を関数funcに適用した結果で[ソートする|並べる|並べ変える|並べ直す]	sorted(atuple, key=func)	translate: タプルatuple[の各要素を関数funcに適用した結果でソートする	_	[1, 2, 3]
translate: リストalistを[複製する|コピーする]	alist.copy()	translate: リストalistを複製する	_	[1, 2, 3]
translate: リストalistを[反転する|逆順にする|リバースする|逆さにする]	reversed(alist)	translate: リストalistを反転する	list(_)	[3, 2, 1]
translate: タプルatupleを[反転する|逆順にする|リバースする|逆さにする]	reversed(atuple)	translate: タプルatupleを反転する	list(_)	[3, 2, 1]
translate: リストalist[[内|中]の要素][が|は]全て真[か[|どうか][調べる||[確認|判定|テスト]する]|]	all(alist)	translate: リストalist内の要素が全て真か調べる	_	True
translate: タプルatuple[[内|中]の要素][が|は]全て真[か[|どうか][調べる||[確認|判定|テスト]する]|]	all(atuple)	translate: タプルatuple内の要素が全て真か調べる	_	True
translate: リストalist[[内|中]の要素][が|は]少なくとも[ひとつ|一つ]真[か[|どうか][調べる||[確認|判定|テスト]する]|]	any(alist)	translate: リストalist内の要素が少なくともひとつ真か調べる	_	True
translate: タプルatuple[[内|中]の要素][が|は]少なくとも[ひとつ|一つ]真[か[|どうか][調べる||[確認|判定|テスト]する]|]	any(atuple)	translate: タプルatuple内の要素が少なくともひとつ真か調べる	_	True
translate: リストalistを[引数として展開して|順に][表示する|出力する|プリントする]	print(*alist)	translate: リストalistを引数として展開して表示する	_	1 2 3\n
translate: タプルatupleを[引数として展開して|順に][表示する|出力する|プリントする]	print(*atuple)	translate: タプルatupleを引数として展開してプリントする	_	1 2 3\n
translate: リストalistを[引数として展開して|カンマ区切りで][表示する|出力する|プリントする]	print(*alist, sep=',')	translate: リストalistを引数として展開して表示する	_	1,2,3\n
translate: タプルatupleを[引数として展開して|カンマ区切りで][表示する|出力する|プリントする]	print(*atuple, sep=',')	translate: タプルatupleを引数として展開して表示する	_	1,2,3\n
translate: [二|２|2]次元リストalistを[フラット化する|flattenする]	sum(alist)	translate: 二次元リストalistをフラット化する	_	6
translate: [二|２|2]次元タプルatupleを[フラット化する|flattenする]	sum(atuple)	translate: 二次元タプルatupleをフラット化する	_	6
translate: リストalistを[ナンバリングする|番号付けする|順序付けする|順番付けする]	enumerate(alist)	translate: リストalistをナンバリングする	list(_)	[(0, 1), (1, 2), (2, 3)]
translate: タプルatupleを[ナンバリングする|番号付けする|順序付けする|順番付けする]	enumerate(atuple)	translate: タプルatupleをナンバリングする	list(_)	[(0, 1), (1, 2), (2, 3)]
translate: リストalistをnから[ナンバリングする|番号付けする|順序付けする|順番付けする]	enumerate(alist, start=n)	translate: リストalistをnからナンバリングする	list(_)	[(1, 1), (2, 2), (3, 3)]
translate: タプルatupleをnから[ナンバリングする|番号付けする|順序付けする|順番付けする]	enumerate(atuple, start=n)	translate: タプルatupleをnからナンバリングする	list(_)	[(1, 1), (2, 2), (3, 3)]
translate: [[リスト|タプル|配列]|列|イテラブル|]iterable[のそれぞれ||の各要素]を関数funcでフィルタする	filter(func, iterable)	translate: リストiterableのそれぞれを関数funcでフィルタする	_	<filter object at 0x12cdc3070>
translate: [[リスト|タプル|配列]|列|イテラブル|]iterable[のそれぞれ||の各要素]を関数predicatefuncでフィルタする	map(func, iterable)	translate: リストiterableのそれぞれを関数predicatefuncでフィルタする	_	<map object at 0x12cd95af0>
translate: [math[|モジュール]|算術計算ライブラリ]を[インポートする|[使う|[使用する|用いる]]]	import math	translate: mathをインポートする	_;type(math)	<class 'module'>
translate: xの[平方根|ルート][|を[求める|計算する|算出する]]	math.sqrt(x)	translate: xの平方根	_	1.224744871391589
translate: xの[天井|天井数][|を[求める|計算する|算出する]]	math.ceil(x)	translate: xの天井	_	2
translate: x以上の最小の整数[|を[求める|計算する|算出する]]	math.ceil(x)	translate: x以上の最小の整数	_	2
translate: xを切り上げて整数に[変換|]する	math.ceil(x)	translate: xを切り上げて整数に変換する	_	2
translate: xを切り上げる	math.ceil(x)	translate: xを切り上げる	_	2
translate: xの[床|床数][|を[求める|計算する|算出する]]	math.floor(x)	translate: xの床	_	1
translate: x以下の最大の整数[|を[求める|計算する|算出する]]	math.floor(x)	translate: x以下の最大の整数	_	1
translate: xを切り下げて整数に[変換|]する	math.floor(x)	translate: xを切り下げて整数に変換する	_	1
translate: xを切り下げる	math.floor(x)	translate: xを切り下げる	_	1
translate: nとn2の[最大公約数|GCD][|を[求める|計算する|算出する]]	math.gcd(n, n2)	translate: nとn2の最大公約数	_	1
translate: nとn2の[最小公倍数|LCM][|を[求める|計算する|算出する]]	math.lcm(n, n2)	translate: nとn2の最小公倍数	_	3
translate: 3数n,n2,n3の[最大公約数|GCD][|を[求める|計算する|算出する]]	math.gcd(n, n2, n3)	translate: 3数n,n2,n3の最大公約数	n3=5;_	1
translate: 3数n,n2,n3の[最小公倍数|LCM][|を[求める|計算する|算出する]]	math.lcm(n, n2, n3)	translate: 3数n,n2,n3の最小公倍数	n3=120;_	120
translate: nとn2の[コンビネーション|[組合せ|組み合わせ]|nCk][|を[求める|計算する|算出する]]	math.comb(n, n2)	translate: nとn2のコンビネーション	_	0
translate: n個の集まりからn2個[重複なく|]選ぶ方法[|を[求める|計算する|算出する]]	math.comb(n, n2)	translate: n個の集まりからn2個重複なく選ぶ方法を求める	_	0
translate: 異なるn個のものからn2個選ぶ場合の数	math.comb(n, n2)	translate: 異なるn個のものからn2個選ぶ場合の数	_	0
translate: {x2の符号を/xに}[コピーする|複製する]	math.copysign(x, x2)	translate: x2の符号をxにコピーする	_	1.5
translate: xの符号をx2と同じにする	math.copysign(x, x2)	translate: xの符号をx2と同じにする	_	1.5
translate: xの絶対値[|を[求める|計算する|算出する]]	math.fabs(x)	translate: xの絶対値	_	1.5
translate: nの階乗[|を[求める|計算する|算出する]]	math.factorial(n)	translate: nの階乗を求める	_	1
translate: xの仮数[|部][|を[求める|計算する|算出する]]	math.frexp(x)[0]	translate: xの仮数部	_	0.75
translate: xの指数[|部][|を[求める|計算する|算出する]]	math.frexp(x)[1]	translate: xの指数	_	1
translate: xとx2が[近い|近似値][か[|どうか][調べる||[確認|判定|テスト]する]|]	math.isclose(x, x2)	translate: xとx2が近いか調べる	_	False
translate: x[は|が]x2に[近い|ほぼ等しい][か[|どうか][調べる||[確認|判定|テスト]する]|]	math.isclose(x, x2)	translate: xはx2に近いか調べる	_	False
translate: x[が|は]有限[か[|どうか][調べる||[確認|判定|テスト]する]|]	math.isfinite(x)	translate: xが有限か調べる	_	True
translate: x[が|は]無限大[か[|どうか][調べる||[確認|判定|テスト]する]|]	math.isinf(x)	translate: xが無限大か調べる	_	False
translate: x[が|は][NaN|非数][か[|どうか][調べる||[確認|判定|テスト]する]|]	math.isnan(x)	translate: xがNaNか調べる	_	False
translate: xの小数部[|を[求める|計算する|算出する]]	math.modf(x)[0]	translate: xの小数部	_	0.5
translate: xの整数部[|を[求める|計算する|算出する]]	math.modf(x)[1]	translate: xの整数部	_	1.0
translate: nの[順列|並べ方]の総数[|を[求める|計算する|算出する]]	math.perm(n)	translate: nの順列の総数	_	1
translate: n個からn2個取り出した[とき|時|場合]の[順列|並べ方]の総数[|を[求める|計算する|算出する]]	math.perm(n, n2)	translate: n個からn2個取り出したときの順列の総数	_	0
translate: n個のものからn2個取り出した[とき|時|場合]の並べ方[の総数][|を[求める|計算する|算出する]]	math.perm(n, n2)	translate: n個のものからn2個取り出したときの並べ方の総数	_	0
translate: xをx2で割った剰余[|を[求める|計算する|算出する]]	math.remainder(x, x2)	translate: xをx2で割った剰余	_	1.5
translate: eのx乗[|を[求める|計算する|算出する]]	math.exp(x)	translate: eのx乗	_	4.4816890703380645
translate: xの自然対数[|を[求める|計算する|算出する]]	math.log(x)	translate: xの自然対数	_	0.4054651081081644
translate: x2を底とするxの対数[|を[求める|計算する|算出する]]	math.log(x, x2)	translate: x2を底とするxの対数	_	0.3690702464285425
translate: x2に対するxの対数[|を[求める|計算する|算出する]]	math.log(x, x2)	translate: x2に対するxの対数	_	0.3690702464285425
translate: 1+xの自然対数	math.log1p(x)	translate: 1+xの自然対数	_	0.9162907318741551
translate: xの[二進|2進|バイナリ]対数[|を[求める|計算する|算出する]]	math.log2(x)	translate: xの二進対数	_	0.5849625007211562
translate: 2を底とするxの対数[|を[求める|計算する|算出する]]	math.log2(x)	translate: 2を底とするxの対数	_	0.5849625007211562
translate: xの常用対数[|を[求める|計算する|算出する]]	math.log10(x)	translate: xの常用対数	_	0.17609125905568124
translate: 10を底とするxの対数[|を[求める|計算する|算出する]]	math.log10(x)	translate: 10を底とするxの対数	_	0.17609125905568124
translate: xの[余弦|コサイン|cos][|を[求める|計算する|算出する]]	math.cos(x)	translate: xの余弦	_	0.0707372016677029
translate: xの[正弦|サイン|sin][|を[求める|計算する|算出する]]	math.sin(x)	translate: xの正弦	_	0.9974949866040544
translate: xの[正接|タンジェント|tan][|を[求める|計算する|算出する]]	math.tan(x)	translate: xの正接	_	14.10141994717172
translate: xの[逆余弦|アークコサイン][|を[求める|計算する|算出する]]	math.acos(x)	translate: xの逆余弦	x=0.33;_	1.234492751640916
translate: xの[余弦|コサイン|cos]の逆数[|を[求める|計算する|算出する]]	math.acos(x)	translate: xの余弦の逆数	x=0.33;_	1.234492751640916
translate: xの[逆正弦|アークサイン][|を[求める|計算する|算出する]]	math.asin(x)	translate: xの逆正弦	x=0.33;_	0.33630357515398035
translate: xの[正弦|サイン|sin]の逆数[|を[求める|計算する|算出する]]	math.asin(x)	translate: xの正弦の逆数	x=0.33;_	0.33630357515398035
translate: xの[逆正接|アークタンジェント][|を[求める|計算する|算出する]]	math.atan(x)	translate: xの逆正接	x=0.33;_	0.31874756042064445
translate: xの[正接|タンジェント|tan]の逆数[|を[求める|計算する|算出する]]	math.atan(x)	translate: xの正接の逆数	x=0.33;_	0.31874756042064445
translate: xの角度[|を[求める|計算する|算出する]]	math.degrees(x)	translate: xの角度を求める	_	85.94366926962348
translate: xのラジアン[|を[求める|計算する|算出する]]	math.radians(x)	translate: xのラジアン	_	0.026179938779914945
translate: xの逆双曲線余弦[|を[求める|計算する|算出する]]	math.acosh(x)	translate: xの逆双曲線余弦	_	0.9624236501192069
translate: xの[双曲線余弦|ハイパボリック[・|]コサイン]の逆数[|を[求める|計算する|算出する]]	math.acosh(x)	translate: xの双曲線余弦の逆数	_	0.9624236501192069
translate: xの逆双曲線正弦[|を[求める|計算する|算出する]]	math.asinh(x)	translate: xの逆双曲線正弦	_	1.1947632172871094
translate: xの[双曲線正弦|ハイパボリック[・|]サイン]の逆数[|を[求める|計算する|算出する]]	math.asinh(x)	translate: xの双曲線正弦の逆数	_	1.1947632172871094
translate: xの逆双曲線正接[|を[求める|計算する|算出する]]	math.atanh(x)	translate: xの逆双曲線正接	x=0.3;_	0.30951960420311175
translate: xの[双曲線正接|ハイパボリック[・|]タンジェント]の逆数[|を[求める|計算する|算出する]]	math.atanh(x)	translate: xの双曲線正接の逆数	x=0.3;_	0.30951960420311175
translate: xの[双曲線余弦|ハイパボリック[・|]コサイン][|を[求める|計算する|算出する]]	math.cosh(x)	translate: xの双曲線余弦	_	2.352409615243247
translate: xの[双曲線正弦|ハイパボリック[・|]サイン][|を[求める|計算する|算出する]]	math.sinh(x)	translate: xの双曲線正弦	_	2.1292794550948173
translate: xの[双曲線正接|ハイパボリック[・|]タンジェント][|を[求める|計算する|算出する]]	math.tanh(x)	translate: xの双曲線正接	x=0.33;_	0.31852077690277086
translate: ベクトルxとx2のユークリッド距離[|を[求める|計算する|算出する]]	math.dist(x, x2)	translate: ベクトルxとx2のユークリッド距離	x=(1,0);x2=(0,1);_	1.4142135623730951
translate: xとx2の[斜辺|ノルム][|を[求める|計算する|算出する]]	math.hypot(x, x2)	translate: xとx2の斜辺	_	3.3541019662496847
translate: 原点からの(x, x2)の距離[|を[求める|計算する|算出する]]	math.hypot(x, x2)	translate: 原点からの(x, x2)の距離	_	3.3541019662496847
translate: ガンマ関数[|を[使う|[使用する|用いる]]]	math.gamma(x)	translate: ガンマ関数	_	0.886226925452758
translate: xにおけるガンマ関数の値[|を[求める|計算する|算出する]]	math.gamma(x)	translate: xにおけるガンマ関数の値	_	0.886226925452758
translate: xにおけるガンマ関数の絶対値に自然対数をとった値[|を[求める|計算する|算出する]]	math.lgamma(x)	translate: xにおけるガンマ関数の絶対値に自然対数をとった値	_	-0.12078223763524543
translate: [円周率|π][|を[使う|[使用する|用いる]]]	math.pi	translate: 円周率	_	3.141592653589793
translate: [ネイピア数|自然対数の底][|を[使う|[使用する|用いる]]]	math.e	translate: ネイピア数	_	2.718281828459045
translate: 無限大[|を[使う|[使用する|用いる]]]	math.inf	translate: 無限大	_	inf
translate: [NaN|非数][|を[使う|[使用する|用いる]]]	math.nan	translate: NaN	_	nan
translate: [オブジェクト|]objが[オブジェクト|]obj2に等しい[か[|どうか][調べる||[確認|判定|テスト]する]|]	obj == obj2	translate: オブジェクトobjがオブジェクトobj2に等しいか調べる	_	True
translate: [オブジェクト|]objが[オブジェクト|]obj2[か[|どうか][調べる||[確認|判定|テスト]する]|]	obj == obj2	translate: オブジェクトobjがオブジェクトobj2か確認する	_	True
translate: [オブジェクト|]objが[オブジェクト|]obj2と[同一|同じ][オブジェクト |][か[|どうか][調べる||[確認|判定|テスト]する]|]	obj is obj2	translate: オブジェクトobjがオブジェクトobj2と同一オブジェクト か調べる	_	True
translate: [オブジェクト|]objと[オブジェクト|]obj2は[同一|同じ][オブジェクト |][か[|どうか][調べる||[確認|判定|テスト]する]|]	obj is obj2	translate: オブジェクトobjとオブジェクトobj2は同一オブジェクト か調べる	_	True
translate: [オブジェクト|]objをデバッグ向けの文字列に[変換|]する	repr(obj)	translate: オブジェクトobjをデバッグ向けの文字列に変換する	_	<multiese2_test.Person object at 0x10740a880>
translate: [オブジェクト|]objをユーザ向けの文字列に[変換|]する	str(obj)	translate: オブジェクトobjをユーザ向けの文字列に変換する	_	<multiese2_test.Person object at 0x10740a880>
translate: [オブジェクト|]objのイテレータ	iter(obj)	translate: オブジェクトobjのイテレータ	_	"(TypeError(""'Person' object is not iterable""), '_')"
translate: 文字列sをバイト配列に[変換|]する	bytearray(s)	translate: 文字列sをバイト配列に変換する	_	(TypeError('string argument without an encoding'), '_')
translate: 文字列sをバイト列に[変換|]する	bytes(s)	translate: 文字列sをバイト列に変換する	_	(TypeError('string argument without an encoding'), '_')
translate: [オブジェクト|]objのメモリビュー[|を得る]	memoryview(obj)	translate: オブジェクトobjのメモリビューを得る	_	"(TypeError(""memoryview: a bytes-like object is required, not 'Person'""), '_')"
translate: [オブジェクト|]obj[が|は]関数[か[|どうか][調べる||[確認|判定|テスト]する]|]	callable(obj)	translate: オブジェクトobjが関数か調べる	_	False
translate: 文字列sを[式として|]評価する	eval(s)	translate: 文字列sを式として評価する	_	(SyntaxError('invalid syntax', ('<string>', 1, 5, 'ABC abc 123あ')), '_')
translate: グローバル変数の一覧[|を得る]	globals()	translate: グローバル変数の一覧	_	"{'n': 1, 'n2': 3, 'n3': -1, 'x': 1.5, 'x2': 3.0, 'x3': 0.19, 's': ' ABC abc 123あ', 's2': 'a', 's3': '123', 's4': '101', 'text': '/usr', 'text2': 'utf-8', 'text3': '.txt', 'alist': [1, 2, 3], 'alist2': [4, 5], 'alist3': ['A', 'B'], 'atuple': (1, 2, 3), 'atuple2': (4, 5), 'atuple3': ('A', 'B'), 'element': 2, 'element2': -1, 'element3': 'A', 'adict': {'A': 1}, 'key': 'A', 'adict2': {'B': 2}, 'key2': 'B', 'obj': <multiese2_test.Person object at 0x10740a880>, 'obj2': <multiese2_test.Person object at 0x10740a880>, 'Person': <class 'multiese2_test.Person'>, 'print': <function _print at 0x107410820>, 'input': <function _input at 0x11a6b4820>, 'func': <function _load_variables.<locals>.<lambda> at 0x12cdf54c0>, 'predicatefunc': <function _load_variables.<locals>.<lambda> at 0x12cdf5430>, 'filename': '/etc/man.conf', 'math': <module 'math' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/lib-dynload/math.cpython-39-darwin.so'>, 'os': <module 'os' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/os.py'>, 'sys': <module 'sys' (built-in)>, 're': <module 're' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py'>, 'operator': <module 'operator' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/operator.py'>, 'datetime': <module 'datetime' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/datetime.py'>, 'dt': datetime.datetime(2022, 12, 12, 0, 0), 'adate': datetime.date(2022, 12, 12), 'typing': <module 'typing' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/typing.py'>, 'itertools': <module 'itertools' (built-in)>, 'collections': <module 'collections' from '/usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/lib/python3.9/collections/__init__.py'>, 'iterable': [0, 1, 2, 4], 'iterable2': [7, 8, 9], 'np': <module 'numpy' from '/usr/local/lib/python3.9/site-packages/numpy/__init__.py'>, 'pd': <module 'pandas' from '/usr/local/lib/python3.9/site-packages/pandas/__init__.py'>, 'sns': <module 'seaborn' from '/usr/local/lib/python3.9/site-packages/seaborn/__init__.py'>, 'df':    A    B  C\n0  1  2.2  a\n1  4  5.8  a, 'df2':    A    B  C\n0  1  2.2  a\n1  4  5.8  a, 'ds': 0    1\n1    4\nName: A, dtype: int64, 'ds2': 0    2.2\n1    5.8\nName: B, dtype: float64, 'col': 'A', 'col2': 'B', '__builtins__': {'__name__': 'builtins', '__doc__': ""Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices."", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2021 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}}"
translate: [オブジェクト|]objのtext[プロパティ|属性|フィールド]を[削除する|消す|取り除く]	delattr(obj, text)	translate: オブジェクトobjのtextプロパティを削除する	text='age';_	None
translate: [オブジェクト|]objのtext[プロパティ|属性|フィールド]の値[|を得る]	getattr(obj, text)	translate: オブジェクトobjのtextプロパティの値	text='age';_	"(AttributeError(""'Person' object has no attribute 'age'""), ""text='age';_"")"
translate: [オブジェクト|]objの[プロパティ|属性|フィールド]を文字列sで指定して[、|]その値を得る	getattr(obj, s)	translate: オブジェクトobjのプロパティを文字列sで指定して、その値を得る	s='age';_	"(AttributeError(""'Person' object has no attribute 'age'""), ""s='age';_"")"
translate: [オブジェクト|]objにtext[プロパティ|属性|フィールド]が[存在する|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	hasattr(obj, text)	translate: オブジェクトobjにtextプロパティがあるか調べる	_	False
translate: [オブジェクト|]objがtext[プロパティ|属性|フィールド]を持つ[か[|どうか][調べる||[確認|判定|テスト]する]|]	hasattr(obj, text)	translate: オブジェクトobjがtextプロパティを持つか調べる	_	False
translate: [オブジェクト|]objに文字列sという[名前の|][プロパティ|属性|フィールド]が[存在する|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	hasattr(obj, s)	translate: オブジェクトobjに文字列sという名前のプロパティが存在するか調べる	_	False
translate: [オブジェクト|]objが文字列sという[名前の|][プロパティ|属性|フィールド]を持つ[か[|どうか][調べる||[確認|判定|テスト]する]|]	hasattr(obj, s)	translate: オブジェクトobjが文字列sというプロパティを持つか調べる	_	False
translate: [オブジェクト|]objのtext[プロパティ|属性|フィールド][の値|]を[文字列|オブジェクト|]element[に設定する|に変更する|に[セット|指定]する|にする]	setattr(obj, text, element)	translate: オブジェクトobjのtextプロパティを文字列elementに設定する	_	None
translate: [オブジェクト|]objのハッシュ値[|を[求める|計算する|算出する]]	hash(obj)	translate: オブジェクトobjのハッシュ値	_	276040328
translate: [オブジェクト|]objがTYPE[クラス|型][|のインスタンス][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, TYPE)	translate: オブジェクトobjがTYPEクラスか調べる	_	"(NameError(""name 'TYPE' is not defined""), '_')"
translate: [オブジェクト|]obj[は|が]整数[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, int)	translate: オブジェクトobjは整数クラスか確認する	_	False
translate: [オブジェクト|]obj[は|が]浮動小数点数[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, float)	translate: オブジェクトobjが浮動小数点数クラスか調べる	_	False
translate: [オブジェクト|]obj[は|が]文字列[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, str)	translate: オブジェクトobjは文字列型のインスタンスか調べる	_	False
translate: [オブジェクト|]obj[は|が]論理値[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, bool)	translate: オブジェクトobjは論理値クラスか調べる	_	False
translate: [オブジェクト|]obj[は|が]リスト[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, list)	translate: オブジェクトobjはリストクラスか調べる	_	False
translate: [オブジェクト|]obj[は|が]タプル[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, tuple)	translate: オブジェクトobjはタプルクラスか調べる	_	False
translate: [オブジェクト|]obj[は|が]辞書[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, dict)	translate: オブジェクトobjが辞書クラスか調べる	_	False
translate: [オブジェクト|]obj[は|が]集合[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, set)	translate: オブジェクトobjは集合クラスかどうか調べる	_	False
translate: [オブジェクト|]obj[は|が]バイト列[[クラス|型][|のインスタンス]|][か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, bytes)	translate: オブジェクトobjがバイト列クラスか調べる	_	False
translate: [オブジェクト|]obj[は|が]数値[か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, (int,float))	translate: オブジェクトobjは数値か調べる	_	False
translate: [オブジェクト|]obj[は|が]リストかタプル[か[|どうか][調べる||[確認|判定|テスト]する]|]	isinstance(obj, (list)	translate: オブジェクトobjはリストかタプルか調べる	_	(SyntaxError('unexpected EOF while parsing', ('<string>', 1, 22, 'isinstance(obj, (list)')), '_')
translate: TYPE[クラス|型][が|は]TYPE2[クラス|型]のサブ[クラス|型][か[|どうか][調べる||[確認|判定|テスト]する]|]	issubclass(TYPE, TYPE2)	translate: TYPEクラスがTYPE2クラスのサブクラスか調べる	_	"(NameError(""name 'TYPE' is not defined""), '_')"
translate: [オブジェクト|]objの[オブジェクト識別子|固有のID|ポインタ][|を得る]	id(obj)	translate: オブジェクトobjのオブジェクト識別子	_	4416645248
translate: [オブジェクト|]objの[[クラス|型]|型|種類][|を得る|を調べる]	type(obj)	translate: オブジェクトobjの型	_	<class 'multiese2_test.Person'>
translate: [pandas|[データフレーム]|[表|表データ]]を[[使う|[使用する|用いる]]|インポートする]	import pandas as pd	translate: pandasをインポートする	_;type(pd)	<class 'module'>
translate: [表示できる|表示される|表示する]最大[カラム|列]数を[変更する|増やす|減らす]	pd.set_option('display.max_columns', n)	translate: 表示できる最大カラム数を変更する	_	None
translate: 最大表示[カラム|列]数をn[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('display.max_columns', n)	translate: 最大表示カラム数をnに設定する	_	None
translate: [表示できる|表示される|表示する|表示][カラム|列]数を[最大|]n[カラム|列][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('display.max_columns', n)	translate: 表示できる列数を最大nカラムにセットする	_	None
translate: [データフレーム]が[最大|]n[カラム|列]まで表示できるようにする	pd.set_option('display.max_columns', n)	translate: データフレームが最大nカラムまで表示できるようにする	_	None
translate: [表示できる|表示される|表示する]最大行数を[変更する|増やす|減らす]	pd.set_option('display.max_rows', n)	translate: 表示できる最大行数を変更する	_	None
translate: 最大表示行数をn[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('display.max_rows', n)	translate: 最大表示行数をnに設定する	_	None
translate: [表示できる|表示される|表示する|表示]行数を[最大|]n行[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('display.max_rows', n)	translate: 表示する行数を最大n行に設定する	_	None
translate: [データフレーム]が[最大|]n行まで表示できるようにする	pd.set_option('display.max_rows', n)	translate: データフレームが最大n行まで表示できるようにする	_	None
translate: 小数点以下の表示精度を設定する	pd.set_option('precision', n)	translate: 小数点以下の表示精度を設定する	_	(OptionError('Pattern matched multiple keys'), '_')
translate: 小数点以下[の表示精度|]をn桁[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('precision', n)	translate: 小数点以下の表示精度をn桁に設定する	_	(OptionError('Pattern matched multiple keys'), '_')
translate: 小数点以下n桁まで表示するよう[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('precision', n)	translate: 小数点以下n桁まで表示するように設定する	_	(OptionError('Pattern matched multiple keys'), '_')
translate: 小数点以下n桁までデフォルトで表示する	pd.set_option('precision', n)	translate: 小数点以下n桁までデフォルトで表示する	_	(OptionError('Pattern matched multiple keys'), '_')
translate: [データフレーム]の折り返しをしないようにする	pd.set_option('expand_frame_repr', False)	translate: [データフレーム]の折り返しをしないようにする	_	None
translate: [データフレーム]の折り返しを[オフ|無効][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('expand_frame_repr', False)	translate: データフレームの折り返しをオフに設定する	_	None
translate: [カラム|列]の最大[表示]幅をn[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('max_colwidth', n)	translate: カラムの最大表示幅をnに設定する	_	None
translate: [[カラム|列][の]]ヘッダーを右寄せ[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('colheader_justify', 'right')	translate: カラムのヘッダーを右寄せに設定する	_	None
translate: [[カラム|列][の]]ヘッダーを左寄せ[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	pd.set_option('colheader_justify', 'left')	translate: カラムのヘッダーを左寄せにセットする	_	None
translate: {エクセルファイルfilepathを|[Pandasで|[データフレーム]として]}[読み込む|読む]	pd.read_excel(filepath)	translate: エクセルファイルfilepathをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 文字列filepathからエクセル[データ]を[読み込む|読む]	pd.read_excel(filepath)	translate: 文字列filepathからエクセルデータを読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: エクセルファイルfilepathを[Pandasで|[データフレーム]として|][読み込む|読む]	pd.read_excel(filepath, sheet_name=n)	translate: エクセルファイルfilepathをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {エクセルファイルfilepathから|n番目のシートを}[Pandasで|[データフレーム]として|][読み込む|読む]	pd.read_excel(filepath, sheet_name=n)	translate: エクセルファイルfilepathからn番目のシートをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {エクセルファイルfilepathから|nという[名前の|]シートを}[Pandasで|[データフレーム]として|][読み込む|読む]	pd.read_excel(filepath, sheet_name=n)	translate: エクセルファイルfilepathからnというシートをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {エクセルファイルfilepathから|nとシートを指定し}[Pandasで|[データフレーム]として|][読み込む|読む]	pd.read_excel(filepath, sheet_name=n)	translate: エクセルファイルfilepathからnとシートを指定しPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {テキストファイルfilepathを|カンマ区切りで|[Pandasで|[データフレーム]として|]}[読み込む|読む]	pd.read_csv(filepath, sep=',')	translate: テキストファイルfilepathをカンマ区切りでデータフレームとして読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {CSVファイルfilepathを|[Pandasで|[データフレーム]として|]}[読み込む|読む]	pd.read_csv(filepath, sep=',')	translate: CSVファイルfilepathをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 文字列filepathから{CSVファイルを|[Pandasで|カンマ区切りで|[データフレーム]として|]}[読み込む|読む]	pd.read_csv(filepath, sep=',')	translate: 文字列filepathからPandasでCSVファイルを読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {テキストファイルfilepathを|タブ区切りで|[Pandasで|[データフレーム]として|]}[読み込む|読む]	pd.read_csv(filepath, sep='\t')	translate: Pandasでテキストファイルfilepathをタブ区切りで読む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {TSVファイルfilepathを|[Pandasで|[データフレーム]として|]}[読み込む|読む]	pd.read_csv(filepath, sep='\t')	translate: TSVファイルfilepathをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 文字列filepathから{TSVファイルを|[Pandasで|タブ区切りで|[データフレーム]として|]}[読み込む|読む]	pd.read_csv(filepath, sep='\t')	translate: 文字列filepathからTSVファイルをPandasで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {CSVファイルfilepathを|ヘッダ[を指定せず|なしで]}[読み込む|読む]	pd.read_csv(filepath, header=None)	translate: CSVファイルfilepathをヘッダを指定せず読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 文字列filepathから{CSVファイルを|ヘッダ[を指定せず|なしで]}[読み込む|読む]	pd.read_csv(filepath, header=None)	translate: 文字列filepathからヘッダなしでCSVファイルを読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {CSVファイルfilepathを|n番目の[カラム|列]を[インデックス|行][と|に]して}[読み込む|読む]	pd.read_csv(filepath, index_col=n)	translate: n番目のカラムをインデックスとしてCSVファイルfilepathを読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 文字列filepathから{CSVファイルを|n番目の[カラム|列]を[インデックス|行][と|に]して}[読み込む|読む]	pd.read_csv(filepath, index_col=n)	translate: 文字列filepathからCSVファイルをn番目のカラムをインデックスとして読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {CSVファイルfilepathを|[SJISで|文字化けしないように]}[読み込む|読む]	pd.read_csv(filepath, encoding='shift_jis')	translate: CSVファイルfilepathをSJISで読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 文字列filepathから{CSVファイルを|[SJISで|文字化けしないように]}[読み込む|読む]	pd.read_csv(filepath, encoding='shift_jis')	translate: 文字列filepathからSJISでCSVファイルを読み込む	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: [アヤメ|アイリス]のデータセットを[[データフレーム]として|]ロードする	sns.load_dataset('iris')	translate: アヤメのデータセットをデータフレームとしてロードする	_	    sepal_length  ...\n0   5.1           ...\n..  ...           ...\n\n[150 rows x 5 columns]
translate: {[データフレーム]dfを|エクセルファイルfilepathに}[書き出す|書き込む|保存する]	df.to_excel(filepath)	translate: データフレームdfをエクセルファイルfilepathに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|文字列filepathという[ファイル名|名前]で|エクセル[ファイル|形式|]として}[書き出す|書き込む|保存する]	df.to_excel(filepath)	translate: データフレームdfを文字列filepathというファイル名でエクセルファイルとして書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|CSVファイルfilepathに}[書き出す|書き込む|保存する]	df.to_csv(filepath)	translate: CSVファイルfilepathにデータフレームdfを書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|文字列filepathという[ファイル名|名前]で|CSV[ファイル|形式|]として}[書き出す|書き込む|保存する]	df.to_csv(filepath)	translate: CSVファイルとしてデータフレームdfを文字列filepathという名前で書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|CSVファイルfilepathに|ヘッダ[を付けずに|を付けないで|なしで|を無視して]}[書き出す|書き込む|保存する]	df.to_csv(filepath, header=None)	translate: データフレームdfをCSVファイルfilepathにヘッダを付けずに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|ヘッダ[を付けずに|を付けないで|なしで|を無視して]|文字列filepathという[ファイル名|名前]で|CSV[ファイル|形式|]として}[書き出す|書き込む|保存する]	df.to_csv(filepath, header=None)	translate: ヘッダを付けずにdfを文字列filepathというファイル名でCSVファイルとして書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|CSVファイルfilepathに|[インデックス|行][を付けずに|を付けないで|なしで|を無視して]}[書き出す|書き込む|保存する]	df.to_csv(filepath, index=None)	translate: データフレームdfをCSVファイルfilepathにインデックスを付けずに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|[インデックス|行][を付けずに|を付けないで|なしで|を無視して]|文字列filepathという[ファイル名|名前]で|CSV[ファイル|形式|]として}[書き出す|書き込む|保存する]	df.to_csv(filepath, index=None)	translate: データフレームdfを行を付けずに文字列filepathというファイル名でCSVファイルとして書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: [Excelで|]文字化けしないCSVファイルを[書き出す|書き込む|保存する]	df.to_csv(filepath, encoding='utf_8_sig')	translate: Excelで文字化けしないCSVファイルを保存する	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|CSVファイルfilepathに|[BOM[を付けて|を付きで|ありで]|文字化けしないように]}[書き出す|書き込む|保存する]	df.to_csv(filepath, encoding='utf_8_sig')	translate: データフレームdfをBOMを付けてCSVファイルfilepathに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|文字化けしないようにに|文字列filepathに}[書き出す|書き込む|保存する]	df.to_csv(filepath, encoding='utf_8_sig')	translate: dfを文字化けしないようにに文字列filepathに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {SJISで|CSVファイルを}[書き出す|書き込む|保存する]	df.to_csv(filepath, encoding='shift_jis')	translate: SJISでCSVファイルを保存する	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|CSVファイルfilepathに|SJISで}[書き出す|書き込む|保存する]	df.to_csv(filepath, encoding='shift_jis')	translate: CSVファイルfilepathにSJISでデータフレームdfを書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|SJISで|文字列filepathに}[書き出す|書き込む|保存する]	df.to_csv(filepath, encoding='shift_jis')	translate: SJISでデータフレームdfを文字列filepathに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {タブ区切りで|TSVファイルを}[書き出す|書き込む|保存する]	df.to_csv(filepath, sep='\t')	translate: タブ区切りでTSVファイルを書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|TSVファイルfilepathに}[書き出す|書き込む|保存する]	df.to_csv(filepath, sep='\t')	translate: データフレームdfをTSVファイルfilepathに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|タブ区切りで|文字列filepathに}[書き出す|書き込む|保存する]	df.to_csv(filepath, sep='\t')	translate: データフレームdfをタブ区切りで文字列filepathに書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: 保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filepath, float_format='%.3f')	translate: 保存するCSVファイルの小数点以下の桁数を設定する	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|CSVファイルfilepathに|小数点以下3桁まで}[書き出す|書き込む|保存する]	df.to_csv(filepath, float_format='%.3f')	translate: データフレームdfをCSVファイルfilepathに小数点以下3桁まで書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: {[データフレーム]dfを|小数点以下3桁まで|文字列filepathに}[書き出す|書き込む|保存する]	df.to_csv(filepath, float_format='%.3f')	translate: 小数点以下3桁まで文字列filepathにデータフレームdfを書き出す	_	"(NameError(""name 'filepath' is not defined""), '_')"
translate: [データフレーム]dfの[先頭|最初][|を[見る|確認する|調べる]]	df.head()	translate: データフレームdfの先頭	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[先頭|最初|上]n行を[抽出する|抽出[し|して]|取り出す|]	df.head(n)	translate: データフレームdfの先頭n行を抽出する	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfの[末尾|最後][|を[見る|確認する|調べる]]	df.tail()	translate: データフレームdfの末尾	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[末尾|最後|下]n行を取り出す	df.tail(n)	translate: データフレームdfの末尾n行を取り出す	_	   A  ...\n1  4  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfからランダムに[|一行を][抽出する|抽出[し|して]|取り出す|]	df.sample()	translate: データフレームdfからランダムに抽出する	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfから{ランダムに|n行を}[抽出する|抽出[し|して]|取り出す|]	df.sample(n)	translate: データフレームdfからランダムにn行を抽出する	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfから{重複[ありで|を認めて]|ランダムに|n行を}[抽出する|抽出[し|して]|取り出す|]	df.sample(n, replace=True)	translate: データフレームdfから重複ありでn行をランダムに抽出する	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfのn行目からn2行目までを[取り出す|抽出する|[選択する|選ぶ]]	df[n:n2]	translate: データフレームdfのn行目からn2行目までを取り出す	_	   A  ...\n1  4  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfのn行[|目][以降|より後ろ]を[取り出す|抽出する|[選択する|選ぶ]]	df[n:]	translate: データフレームdfのn行目以降を取り出す	_	   A  ...\n1  4  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfのn行[|目][まで|より前]を[取り出す|抽出する|[選択する|選ぶ]]	df[:n]	translate: データフレームdfのn行目までを取り出す	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]df[の|から|において][[カラム|列]|文字列]colを[取り出す|抽出する|[選択する|選ぶ]]	df[col]	translate: データフレームdfのカラムcolを取り出す	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: {[データフレーム]df[の|から][[カラム|列]|文字列]colを|配列として}[取り出す|抽出する|[選択する|選ぶ]]	df[col].values	translate: dfのカラムcolを配列として取り出す	_	[1 4]
translate: [データフレーム]dfの[[カラム|列]|文字列]colを配列に[変換|]する	df[col].values	translate: データフレームdfのカラムcolを配列に変換する	_	[1 4]
translate: {[データフレーム]df[の|から][[カラム|列]|文字列]colを|リストとして}[取り出す|抽出する|[選択する|選ぶ]]	df[col].values.tolist()	translate: リストとしてデータフレームdfのカラムcolを取り出す	_	[1, 4]
translate: [データフレーム]dfの[[カラム|列]|文字列]colをリストに[変換|]する	df[col].values.tolist()	translate: データフレームdfのカラムcolをリストに変換する	_	[1, 4]
translate: [データフレーム]df[の|から][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[を|のみ]だけ][選択する|[取り出す|抽出する|[選択する|選ぶ]]]	df[[col, col2]]	translate: データフレームdfのカラムcolとカラムcol2をだけ	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]df[の|から][[カラム|列]|文字列]col[、|][[カラム|列]|文字列]col2[、|][[カラム|列]|文字列]col3[を|のみ]だけ][選択する|[取り出す|抽出する|[選択する|選ぶ]]]	df[[col, col2, col3]]	translate: データフレームdfからカラムcol、カラムcol2、カラムcol3をだけ	_	"(NameError(""name 'col3' is not defined""), '_')"
translate: [データフレーム]df[の|から]リストalist[[|で[指定された|与えられた]][カラム|列]][を|のみ]だけ][選択する|[取り出す|抽出する|[選択する|選ぶ]]]	df[alist]	translate: データフレームdfのリストalistカラムをだけ	alist=['A','B'];_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfのn[行目|番目の行]を[取り出す|抽出する|[選択する|選ぶ]]	df.loc[n]	translate: データフレームdfのn行目を取り出す	_	A    4\n    ..\nName: 1, Length: 3, dtype: object
translate: [データフレーム]dfの[インデックス|行]がnの行を[取り出す|抽出する|[選択する|選ぶ]]	df.loc[n]	translate: データフレームdfのインデックスがnの行を取り出す	_	A    4\n    ..\nName: 1, Length: 3, dtype: object
translate: [データフレーム]dfの[カラム|列][一覧|概要][|を[見る|確認する|調べる]]	df.info()	translate: データフレームdfのカラム一覧	_	None
translate: [データフレーム]dfの[カラム|列][の名前|名|][の一覧|一覧|[|の]リスト][|[を得る|を見る|を調べる]]	df.columns	translate: データフレームdfのカラムリスト	_	Index(['A', 'B', 'C'], dtype='object')
translate: [データフレーム]dfからカテゴリデータの[カラム|列][の名前|名|][の一覧|一覧|[|の]リスト][|[を得る|を見る|を調べる]]	df.select_dtypes('object').columns	translate: データフレームdfからカテゴリデータのカラムの名前の一覧	_	Index(['C'], dtype='object')
translate: [データフレーム]dfからty[|型]の[カラム|列][の名前|名|][の一覧|一覧|[|の]リスト][|[を得る|を見る|を調べる]]	df.select_dtypes(ty).columns	translate: データフレームdfからtyのカラムの名前の一覧	ty='object';_	Index(['C'], dtype='object')
translate: [データフレーム]dfの[インデックス|行][の名前|名|][の一覧|一覧|[|の]リスト][|[を得る|を見る|を調べる]]	df.index	translate: データフレームdfのインデックスの名前の一覧	_	RangeIndex(start=0, stop=2, step=1)
translate: [データフレーム]dfを配列に[変換|]する	df.values	translate: データフレームdfを配列に変換する	_	[[1 2.2 'a']\n [4 5.8 'a']]
translate: [データフレーム]dfの[|[カラム|列]の]データ型一覧[|[を得る|を見る|を調べる]]	df.dtypes	translate: データフレームdfのデータ型一覧	_	A    int64\n     ...  \nLength: 3, dtype: object
translate: [データフレーム]dfからリストalist[で[指定された|与えられた]|の]データ型の[カラム|列][を|のみ|だけ][取り出す|抽出する|[選択する|選ぶ]]	df.select_dtypes(include=alist)	translate: データフレームdfからリストalistで指定されたデータ型の列を取り出す	alist=['object'];_	   C \n0   a\n.. ..\n\n[2 rows x 1 columns]
translate: [データフレーム]dfからリストalist[で[指定された|与えられた]|の]データ型の[カラム|列][を|のみ|だけ]除外する	df.select_dtypes(exclude=alist)	translate: データフレームdfからリストalistのデータ型のカラムを除外する	alist=['object'];_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfからカテゴリデータ[の[カラム|列]][を|のみ|だけ][取り出す|抽出する|[選択する|選ぶ]]	df.select_dtypes('object')	translate: データフレームdfからカテゴリデータのカラムを取り出す	_	   C \n0   a\n.. ..\n\n[2 rows x 1 columns]
translate: [データフレーム]dfから数値データ[の[カラム|列]][を|のみ|だけ][取り出す|抽出する|[選択する|選ぶ]]	df.select_dtypes('number')	translate: データフレームdfから数値データのカラムを取り出す	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfからty[|型][の[カラム|列]][を|のみ|だけ][取り出す|抽出する|[選択する|選ぶ]]	df.select_dtypes(ty)	translate: dfからtyを取り出す	_	"(NameError(""name 'ty' is not defined""), '_')"
translate: [データフレーム]dfの[各次元の[大きさ|サイズ]|シェイプ][を[見る|確認する|調べる]]	df.shape	translate: データフレームdfの各次元の大きさを見る	_	(2, 3)
translate: [データフレーム]dfを転置する	df.T	translate: [データフレーム]dfを転置する	_	   0   ...\nA   1  ...\n.. ..  ...\n\n[3 rows x 2 columns]
translate: [データフレーム]dfの[行と列|行列]を[入れ替える|ひっくり返す]	df.T	translate: dfの行と列を入れ替える	_	   0   ...\nA   1  ...\n.. ..  ...\n\n[3 rows x 2 columns]
translate: [データフレーム]dfの[相関行列|各列間の相関係数][|を[求める|計算する|算出する]]	df.corr()	translate: データフレームdfの各列間の相関係数	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の[相関行列|各列間の相関係数][|を[求める|計算する|算出する]]	df[[col, col2]].corr()	translate: データフレームdfのカラムcolとカラムcol2の相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfのリストalist[|で[指定された|与えられた]][カラム|列]の[相関行列|各列間の相関係数][|を[求める|計算する|算出する]]	df[alist].corr()	translate: データフレームdfのリストalistカラムの相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {ピアソン[[|積率]相関係数][で|として|を[用いて|使って]]|[データフレーム]dfの相関行列}[|を[求める|計算する|算出する]]	df.corr(method='pearson')	translate: ピアソン相関係数でデータフレームdfの相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {ピアソン[[|積率]相関係数][で|として|を[用いて|使って]]|[データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の相関行列}[|を[求める|計算する|算出する]]	df[[col, col2]].corr(method='pearson')	translate: ピアソン相関係数でデータフレームdfのカラムcolとカラムcol2の相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {ピアソン[[|積率]相関係数][で|として|を[用いて|使って]]|[データフレーム]dfのリストalist[|で[指定された|与えられた]][カラム|列]の相関行列}[|を[求める|計算する|算出する]]	df[alist].corr(method='pearson')	translate: データフレームdfのリストalistカラムの相関行列ピアソン相関係数としてを求める	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {ケンドール[[|順位]相関係数|][で|として|を[用いて|使って]]|[データフレーム]dfの相関行列}[|を[求める|計算する|算出する]]	df.corr(method='kendall')	translate: ケンドール相関係数でデータフレームdfの相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {ケンドール[[|順位]相関係数|][で|として|を[用いて|使って]]|[データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の相関行列}[|を[求める|計算する|算出する]]	df[[col, col2]].corr(method='kendall')	translate: ケンドール相関係数でデータフレームdfの列colとカラムcol2の相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {ケンドール[[|順位]相関係数|][で|として|を[用いて|使って]]|[データフレーム]dfのリストalist[|で[指定された|与えられた]][カラム|列]の相関行列}[|を[求める|計算する|算出する]]	df[alist].corr(method='kendall')	translate: ケンドール相関係数でデータフレームdfのリストalistカラムの相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {スピアマン[[|順位]相関係数|][で|として|を[用いて|使って]]|[データフレーム]dfの相関行列}[|を[求める|計算する|算出する]]	df.corr(method='spearman')	translate: スピアマン相関係数を用いてデータフレームdfの相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {スピアマン[[|順位]相関係数|][で|として|を[用いて|使って]]|[データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の相関行列}[|を[求める|計算する|算出する]]	df[[col, col2]].corr(method='spearman')	translate: スピアマンでデータフレームdfのカラムcolとカラムcol2の相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: {スピアマン[[|順位]相関係数|][で|として|を[用いて|使って]]|[データフレーム]dfのリストalist[|で[指定された|与えられた]][カラム|列]の相関行列}[|を[求める|計算する|算出する]]	df[alist].corr(method='spearman')	translate: スピアマン相関係数でデータフレームdfのリストalistカラムの相関行列	alist=['A', 'B'];_	    A    ...\nA   1.0  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの相関行列をヒートマップ[で|として|を[用いて|使って]][描画する|グラフ化する]	sns.heatmap(df.corr())	translate: データフレームdfの相関行列をヒートマップを用いて描画する	alist=['A', 'B'];_	AxesSubplot(0.125,0.11;0.62x0.77)
translate: [データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の相関行列をヒートマップ[で|として|を[用いて|使って]][描画する|グラフ化する]	sns.heatmap(df[[col, col2]].corr())	translate: データフレームdfのカラムcolとカラムcol2の相関行列をヒートマップで描画する	alist=['A', 'B'];_	AxesSubplot(0.125,0.11;0.496x0.77)
translate: [データフレーム]dfのリストalist[|で[指定された|与えられた]][カラム|列]の相関行列をヒートマップ[で|として|を[用いて|使って]][描画する|グラフ化する]	sns.heatmap(df[alist].corr())	translate: データフレームdfのリストalistカラムの相関行列をヒートマップで描画する	alist=['A', 'B'];_	AxesSubplot(0.125,0.11;0.3968x0.77)
translate: [データフレーム]dfのカテゴリデータの[要約統計量|[記述統計量|基本統計量|代表値]][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.describe(include='O')	translate: データフレームdfのカテゴリデータの要約統計量	_	      C \ncount  2\n...   ..\n\n[4 rows x 1 columns]
translate: 	df.describe()	translate: 	alist=['A','B'];_	       A    ...\ncount  2.0  ...\n...    ...  ...\n\n[8 rows x 2 columns]
translate: [データフレーム]dfの[要約統計量|[記述統計量|基本統計量|代表値]][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.describe()	translate: データフレームdfの要約統計量	alist=['A','B'];_	       A    ...\ncount  2.0  ...\n...    ...  ...\n\n[8 rows x 2 columns]
translate: 	df[alist].describe()	translate: 	alist=['A','B'];_	       A    ...\ncount  2.0  ...\n...    ...  ...\n\n[8 rows x 2 columns]
translate: [データフレーム]dfのリストalist[カラム|列]の[要約統計量|[記述統計量|基本統計量|代表値]][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].describe()	translate: データフレームdfのリストalistカラムの要約統計量	alist=['A','B'];_	       A    ...\ncount  2.0  ...\n...    ...  ...\n\n[8 rows x 2 columns]
translate: 	ds.describe()	translate: 	alist=['A','B'];_	count    2.0\n        ... \nName: A, Length: 8, dtype: float64
translate: データ列dsの[要約統計量|[記述統計量|基本統計量|代表値]][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.describe()	translate: データ列dsの要約統計量	alist=['A','B'];_	count    2.0\n        ... \nName: A, Length: 8, dtype: float64
translate: 	df[col].describe()	translate: 	alist=['A','B'];_	count    2.0\n        ... \nName: A, Length: 8, dtype: float64
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[要約統計量|[記述統計量|基本統計量|代表値]][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].describe()	translate: データフレームdfのカラムcolの要約統計量	alist=['A','B'];_	count    2.0\n        ... \nName: A, Length: 8, dtype: float64
translate: [データフレーム]dfの[平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.mean()	translate: データフレームdfの平均	alist=['A','B'];_	A    2.5\n    ... \nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の[平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].mean()	translate: データフレームdfのリストalistカラムの平均値	alist=['A','B'];_	A    2.5\n    ... \nLength: 2, dtype: float64
translate: データ列dsの[平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.mean()	translate: データ列dsの平均値	alist=['A','B'];_	2.5
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].mean()	translate: データフレームdfのカラムcolの平均値	alist=['A','B'];_	2.5
translate: [データフレーム]df[|の[中|内]]央値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.median()	translate: データフレームdf央値	alist=['A','B'];_	A    2.5\n    ... \nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列][|の[中|内]]央値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].median()	translate: データフレームdfのリストalistカラム央値を求める	alist=['A','B'];_	A    2.5\n    ... \nLength: 2, dtype: float64
translate: データ列ds[|の[中|内]]央値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.median()	translate: データ列ds央値	alist=['A','B'];_	2.5
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の[中|内]]央値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].median()	translate: データフレームdfのカラムcol央値	alist=['A','B'];_	2.5
translate: [データフレーム]dfの[第一四分位数|25パーセンタイル|上位25%][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.quantile(0.25)	translate: データフレームdfの第一四分位数	alist=['A','B'];_	A    1.75\n     ... \nName: 0.25, Length: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の[第一四分位数|25パーセンタイル|上位25%][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].quantile(0.25)	translate: データフレームdfのリストalistカラムの第一四分位数	alist=['A','B'];_	A    1.75\n     ... \nName: 0.25, Length: 2, dtype: float64
translate: データ列dsの[第一四分位数|25パーセンタイル|上位25%][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.quantile(0.25)	translate: データ列dsの第一四分位数	alist=['A','B'];_	1.75
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[第一四分位数|25パーセンタイル|上位25%][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].quantile(0.25)	translate: データフレームdfのカラムcolの第一四分位数	alist=['A','B'];_	1.75
translate: [データフレーム]dfの[第三四分位数|75パーセンタイル|下位25%]	df.quantile(0.75)	translate: データフレームdfの第三四分位数	alist=['A','B'];_	A    3.25\n     ... \nName: 0.75, Length: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の[第三四分位数|75パーセンタイル|下位25%]	df[alist].quantile(0.75)	translate: データフレームdfのリストalistカラムの第三四分位数	alist=['A','B'];_	A    3.25\n     ... \nName: 0.75, Length: 2, dtype: float64
translate: データ列dsの[第三四分位数|75パーセンタイル|下位25%]	ds.quantile(0.75)	translate: データ列dsの第三四分位数	alist=['A','B'];_	3.25
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[第三四分位数|75パーセンタイル|下位25%]	df[col].quantile(0.75)	translate: データフレームdfのカラムcolの第三四分位数	alist=['A','B'];_	3.25
translate: [データフレーム]dfのn[分位数|パーセンタイル][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.quantile(n/100)	translate: データフレームdfのn分位数	alist=['A','B'];_	A    1.03\n     ... \nName: 0.01, Length: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]のn[分位数|パーセンタイル][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].quantile(n/100)	translate: データフレームdfのリストalistカラムのn分位数	alist=['A','B'];_	A    1.03\n     ... \nName: 0.01, Length: 2, dtype: float64
translate: データ列dsのn[分位数|パーセンタイル][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.quantile(n/100)	translate: データ列dsのn分位数	alist=['A','B'];_	1.03
translate: [データフレーム]dfの[[カラム|列]|文字列]colのn[分位数|パーセンタイル][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].quantile(n/100)	translate: データフレームdfのカラムcolのn分位数	alist=['A','B'];_	1.03
translate: [データフレーム]dfの[[最頻値|モード]|どの値が頻出か][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.mode()	translate: データフレームdfのどの値が頻出か	alist=['A','B'];_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfのリストalist[カラム|列]の[[最頻値|モード]|どの値が頻出か][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].mode()	translate: データフレームdfのリストalistカラムの最頻値	alist=['A','B'];_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: データ列dsの[[最頻値|モード]|どの値が頻出か][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.mode()	translate: データ列dsの最頻値	alist=['A','B'];_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[[最頻値|モード]|どの値が頻出か][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].mode()	translate: データフレームdfのカラムcolの最頻値	alist=['A','B'];_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[最頻値|モード]の出現回数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.freq()	translate: データフレームdfの最頻値の出現回数	alist=['A','B'];_	"(AttributeError(""'DataFrame' object has no attribute 'freq'""), ""alist=['A','B'];_"")"
translate: [データフレーム]dfのリストalist[カラム|列]の[最頻値|モード]の出現回数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].freq()	translate: データフレームdfのリストalistカラムの最頻値の出現回数	alist=['A','B'];_	"(AttributeError(""'DataFrame' object has no attribute 'freq'""), ""alist=['A','B'];_"")"
translate: データ列dsの[最頻値|モード]の出現回数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.freq()	translate: データ列dsの最頻値の出現回数を求める	alist=['A','B'];_	"(AttributeError(""'Series' object has no attribute 'freq'""), ""alist=['A','B'];_"")"
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[最頻値|モード]の出現回数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].freq()	translate: dfのカラムcolの最頻値の出現回数	alist=['A','B'];_	"(AttributeError(""'Series' object has no attribute 'freq'""), ""alist=['A','B'];_"")"
translate: [データフレーム]dfの[標本標準偏差|標準偏差][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.std()	translate: データフレームdfの標本標準偏差	alist=['A','B'];_	A    2.12132\n      ...   \nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の[標本標準偏差|標準偏差][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].std()	translate: データフレームdfのリストalistカラムの標本標準偏差	alist=['A','B'];_	A    2.12132\n      ...   \nLength: 2, dtype: float64
translate: データ列dsの[標本標準偏差|標準偏差][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.std()	translate: データ列dsの標本標準偏差	alist=['A','B'];_	2.1213203435596424
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[標本標準偏差|標準偏差][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].std()	translate: データフレームdfのカラムcolの標本標準偏差	alist=['A','B'];_	2.1213203435596424
translate: [データフレーム]dfの母標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.std(ddof=0)	translate: データフレームdfの母標準偏差	alist=['A','B'];_	A    1.5\n    ... \nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の母標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].std(ddof=0)	translate: データフレームdfのリストalist列の母標準偏差	alist=['A','B'];_	A    1.5\n    ... \nLength: 2, dtype: float64
translate: データ列dsの母標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.std(ddof=0)	translate: データ列dsの母標準偏差	alist=['A','B'];_	1.5
translate: [データフレーム]dfの[[カラム|列]|文字列]colの母標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].std(ddof=0)	translate: データフレームdfのカラムcolの母標準偏差	alist=['A','B'];_	1.5
translate: [データフレーム]dfの分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.var()	translate: データフレームdfの分散を求める	_	A    4.5\n    ... \nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].var()	translate: データフレームdfのリストalistカラムの分散	_	"(KeyError(""None of [Int64Index([1, 2, 3], dtype='int64')] are in the [columns]""), '_')"
translate: データ列dsの分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.var()	translate: データ列dsの分散	_	4.5
translate: [データフレーム]dfの[[カラム|列]|文字列]colの分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].var()	translate: データフレームdfの列colの分散	_	4.5
translate: [データフレーム]dfの[歪度|正規分布に対する左右対称性][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.kurt()	translate: データフレームdfの歪度	_	A   NaN\n     ..\nLength: 2, dtype: float64
translate: [データフレーム]df[が|は]正規分布からどれだけ歪んでいるか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.kurt()	translate: データフレームdfが正規分布からどれだけ歪んでいるか求める	_	A   NaN\n     ..\nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の[歪度|正規分布に対する左右対称性][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].kurt()	translate: データフレームdfのリストalistカラムの歪度	_	"(KeyError(""None of [Int64Index([1, 2, 3], dtype='int64')] are in the [columns]""), '_')"
translate: [データフレーム]dfのリストalist[カラム|列][が|は]正規分布からどれだけ歪んでいるか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df[alist].kurt()	translate: データフレームdfのリストalistカラムが正規分布からどれだけ歪んでいるか求める	_	"(KeyError(""None of [Int64Index([1, 2, 3], dtype='int64')] are in the [columns]""), '_')"
translate: データ列dsの[歪度|正規分布に対する左右対称性][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.kurt()	translate: データ列dsの歪度	_	nan
translate: データ列ds[が|は]正規分布からどれだけ歪んでいるか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	ds.kurt()	translate: データ列dsが正規分布からどれだけ歪んでいるか求める	_	nan
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[歪度|正規分布に対する左右対称性][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].kurt()	translate: dfのカラムcolの歪度	_	nan
translate: [データフレーム]dfの[[カラム|列]|文字列]col[が|は]正規分布からどれだけ歪んでいるか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df[col].kurt()	translate: データフレームdfのカラムcolが正規分布からどれだけ歪んでいるか求める	_	nan
translate: [データフレーム]dfの[尖度|正規分布に対する上下広がり][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.skew()	translate: データフレームdfの尖度	_	A   NaN\n     ..\nLength: 2, dtype: float64
translate: [データフレーム]df[が|は]正規分布からどれだけ尖っているか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.skew()	translate: データフレームdfが正規分布からどれだけ尖っているか求める	_	A   NaN\n     ..\nLength: 2, dtype: float64
translate: [データフレーム]dfのリストalist[カラム|列]の[尖度|正規分布に対する上下広がり][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[alist].skew()	translate: データフレームdfのリストalistカラムの尖度	_	"(KeyError(""None of [Int64Index([1, 2, 3], dtype='int64')] are in the [columns]""), '_')"
translate: [データフレーム]dfのリストalist[カラム|列][が|は]正規分布からどれだけ尖っているか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df[alist].skew()	translate: データフレームdfのリストalistカラムが正規分布からどれだけ尖っているか求める	_	"(KeyError(""None of [Int64Index([1, 2, 3], dtype='int64')] are in the [columns]""), '_')"
translate: データ列dsの[尖度|正規分布に対する上下広がり][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.skew()	translate: データ列dsの尖度	_	nan
translate: データ列ds[が|は]正規分布からどれだけ尖っているか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	ds.skew()	translate: データ列dsが正規分布からどれだけ尖っているか求める	_	nan
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[尖度|正規分布に対する上下広がり][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].skew()	translate: データフレームdfのカラムcolの尖度	_	nan
translate: [データフレーム]dfの[[カラム|列]|文字列]col[が|は]正規分布からどれだけ尖っているか[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df[col].skew()	translate: dfのカラムcolが正規分布からどれだけ尖っているか求める	_	nan
translate: [データフレーム]df[の数値|]をまとめて[|整数に][丸める|四捨五入する]	df.round()	translate: データフレームdfの数値をまとめて四捨五入する	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]df[の数値|]をまとめて小数点以下n桁で[丸める|四捨五入する]	df.round(n)	translate: データフレームdfの数値をまとめて小数点以下n桁で丸める	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]df[の数値|]をまとめて[|整数に][丸めて|四捨五入して][、|][インプレイスする|更新する|置き換える]	df.round(inplace=True)	translate: データフレームdfの数値をまとめて四捨五入してインプレイスする	_	"(TypeError(""round() got an unexpected keyword argument 'inplace'""), '_')"
translate: [データフレーム]df[の数値|]をまとめて小数点以下n桁で[丸めて|四捨五入して][、|][インプレイスする|更新する|置き換える]	df.round(n, inplace=True)	translate: データフレームdfの数値をまとめて小数点以下n桁で丸めて、インプレイスする	_	"(TypeError(""round() got an unexpected keyword argument 'inplace'""), '_')"
translate: データ列dsを[|整数に][丸める|四捨五入する]	ds.round()	translate: データ列dsを丸める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[|整数に][丸める|四捨五入する]	df[col].round()	translate: データフレームdfの列colを丸める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを小数点以下n桁で[丸める|四捨五入する]	ds.round(n)	translate: データ列dsを小数点以下n桁で丸める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを小数点以下n桁で[丸める|四捨五入する]	df[col].round(n)	translate: データフレームdfのカラムcolを小数点以下n桁で丸める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[10|十]の位で[丸める|四捨五入する]	ds.round(-1)	translate: データ列dsを10の位で丸める	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[10|十]の位で[丸める|四捨五入する]	df[col].round(-1)	translate: データフレームdfのカラムcolを10の位で丸める	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[100|百]の位で[丸める|四捨五入する]	ds.round(-2)	translate: データ列dsを100の位で丸める	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[100|百]の位で[丸める|四捨五入する]	df[col].round(-2)	translate: データフレームdfのカラムcolを百の位で丸める	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[1000|千]の位で[丸める|四捨五入する]	ds.round(-3)	translate: データ列dsを1000の位で丸める	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[1000|千]の位で[丸める|四捨五入する]	df[col].round(-3)	translate: データフレームdfのカラムcolを1000の位で丸める	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[丸めて|四捨五入して][、|][整数型|整数]にする	ds.round().astype(int)	translate: データ列dsを丸めて、整数型にする	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[丸めて|四捨五入して][、|][整数型|整数]にする	df[col].round().astype(int)	translate: データフレームdfの文字列colを丸めて、整数型にする	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[10|十]の位で[丸めて|四捨五入して][、|][整数型|整数]にする	ds.round(-1).astype(int)	translate: データ列dsを10の位で丸めて、整数型にする	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[10|十]の位で[丸めて|四捨五入して][、|][整数型|整数]にする	df[col].round(-1).astype(int)	translate: データフレームdfのカラムcolを10の位で丸めて、整数型にする	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[100|百]の位で[丸めて|四捨五入して][、|][整数型|整数]にする	ds.round(-2).astype(int)	translate: データ列dsを100の位で丸めて、整数型にする	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[100|百]の位で[丸めて|四捨五入して][、|][整数型|整数]にする	df[col].round(-2).astype(int)	translate: データフレームdfのカラムcolを100の位で丸めて整数にする	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsを[1000|千]の位で[丸めて|四捨五入して][、|][整数型|整数]にする	ds.round(-3).astype(int)	translate: データ列dsを1000の位で四捨五入して、整数型にする	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[1000|千]の位で[丸めて|四捨五入して][、|][整数型|整数]にする	df[col].round(-3).astype(int)	translate: dfのカラムcolを1000の位で丸めて、整数型にする	_	0    0\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsの各データ値の出現[|回]数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	ds.value_counts()	translate: データ列dsの各データ値の出現数	_	1    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colの各データ値の出現[|回]数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df[col].value_counts()	translate: データフレームdfのカラムcolの各データ値の出現数	_	1    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsの[ユニーク|一意]な[値|要素][|を[見る|確認する|調べる]]	ds.unique()	translate: データ列dsのユニークな値	_	[1 4]
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[ユニーク|一意]な[値|要素][|を[見る|確認する|調べる]]	df[col].unique()	translate: データフレームdfのカラムcolのユニークな値	_	[1 4]
translate: データ列dsの[ユニーク|一意]な[値の個数|要素数][|を[見る|確認する|調べる]]	ds.nunique()	translate: データ列dsのユニークな値の個数	_	2
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[ユニーク|一意]な[値の個数|要素数][|を[見る|確認する|調べる]]	df[col].nunique()	translate: データフレームdfの文字列colのユニークな値の個数	_	2
translate: [データフレーム]dfの[カラム|列][の名前|名|]を[[変更する|増やす|減らす]|付け直す]	df.rename(columns={col: s})	translate: データフレームdfのカラムの名前を付け直す	_	     ABC abc 123あ  ...\n0   1              ...\n.. ..              ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[カラム|列][の名前|名|]を[[カラム|列]|文字列]colから文字列sに[[変更する|増やす|減らす]|付け直す]	df.rename(columns={col: s})	translate: データフレームdfのカラムの名前をカラムcolから文字列sに変更する	_	     ABC abc 123あ  ...\n0   1              ...\n.. ..              ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colを文字列sに[リネームする|名前変更する]	df.rename(columns={col: s})	translate: データフレームdfのカラムcolを文字列sにリネームする	_	     ABC abc 123あ  ...\n0   1              ...\n.. ..              ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[カラム|列]名をまとめて[、|]文字列sを文字列s2に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]	translate: データフレームdfのカラム名をまとめて、文字列sを文字列s2に置換する	_	(SyntaxError('invalid syntax', ('<string>', 1, 12, 'df.columns = [str(x).replace(s, s2) for x in df.columns]')), '_')
translate: [データフレーム]dfの[インデックス|行][の名前|名|]を文字列sから文字列s2に[[変更する|増やす|減らす]|付け直す]	df.rename(index={s: s2})	translate: データフレームdfの行の名前を文字列sから文字列s2に変更する	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[インデックス|行][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	df.set_index(col)	translate: データフレームdfのカラムcolをインデックスに設定する	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[インデックス|行]を[リセットする|振り直す]	df.reset_index()	translate: データフレームdfのインデックスをリセットする	_	    index  ...\n0   0      ...\n.. ..      ...\n\n[2 rows x 4 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[日付型|タイムスタンプ型|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(df[col])	translate: dfのカラムcolを日付型に変換する	_	0   1970-01-01 00:00:00.000000001\n                 ...             \nName: A, Length: 2, dtype: datetime64[ns]
translate: データ列dsを[日付型|タイムスタンプ型|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(ds)	translate: データ列dsをdatetime64型に変換する	_	0   1970-01-01 00:00:00.000000001\n                 ...             \nName: A, Length: 2, dtype: datetime64[ns]
translate: {[フォーマット|書式]を[指定して|使って]|[データフレーム]dfの[[カラム|列]|文字列]colを}[日付型|タイムスタンプ型|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(df[col], format='%Y-%m-%d')	translate: フォーマットを使ってデータフレームdfの列colを日付型に変換する	_	0   1970-01-01 00:00:00.000000001\n                 ...             \nName: A, Length: 2, dtype: datetime64[ns]
translate: {[フォーマット|書式]を[指定して|使って]|データ列dsを}[日付型|タイムスタンプ型|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(ds, format='%Y-%m-%d')	translate: フォーマットを使ってデータ列dsを日付型に変換する	_	0   1970-01-01 00:00:00.000000001\n                 ...             \nName: A, Length: 2, dtype: datetime64[ns]
translate: [エポック秒|UNIX秒|UNIX時間|エポック]から[日付型|タイムスタンプ型|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(df[col], unit='s', utc=True)	translate: エポック秒から日付型に変換する	_	0   1970-01-01 00:00:01+00:00\n               ...           \nName: A, Length: 2, dtype: datetime64[ns, UTC]
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[エポック秒|UNIX秒|UNIX時間|エポック]から[[日付型|タイムスタンプ型|timestamp型|datetime64型]|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(df[col], unit='s', utc=True)	translate: データフレームdfのカラムcolのエポック秒から日付型に変換する	_	0   1970-01-01 00:00:01+00:00\n               ...           \nName: A, Length: 2, dtype: datetime64[ns, UTC]
translate: [エポック秒|UNIX秒|UNIX時間|エポック]から[日付型|タイムスタンプ型|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(ds, unit='s', utc=True)	translate: エポックから日付型に変換する	_	0   1970-01-01 00:00:01+00:00\n               ...           \nName: A, Length: 2, dtype: datetime64[ns, UTC]
translate: データ列dsの[エポック秒|UNIX秒|UNIX時間|エポック]から[[日付型|タイムスタンプ型|timestamp型|datetime64型]|timestamp型|datetime64型]に[変換|]する	pd.to_datetime(ds, unit='s', utc=True)	translate: データ列dsのエポック秒からtimestamp型に変換する	_	0   1970-01-01 00:00:01+00:00\n               ...           \nName: A, Length: 2, dtype: datetime64[ns, UTC]
translate: [データフレーム]dfの[[カラム|列]|文字列]colのタイムゾーンを[日本|東京][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	df[col].tz_convert('Asia/Tokyo')	translate: dfのカラムcolのタイムゾーンを日本に設定する	_	(TypeError('index is not a valid DatetimeIndex or PeriodIndex'), '_')
translate: データ列dsのタイムゾーンを[日本|東京][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	ds.tz_convert('Asia/Tokyo')	translate: データ列dsのタイムゾーンを日本に設定する	_	(TypeError('index is not a valid DatetimeIndex or PeriodIndex'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colのタイムゾーンを文字列s[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	df[col].tz_convert(s)	translate: データフレームdfのカラムcolのタイムゾーンを文字列sに設定する	_	(TypeError('index is not a valid DatetimeIndex or PeriodIndex'), '_')
translate: データ列dsのタイムゾーンを文字列s[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	ds.tz_convert(s)	translate: データ列dsのタイムゾーンを文字列sに設定する	_	(TypeError('index is not a valid DatetimeIndex or PeriodIndex'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの年[|[を得る|を見る|を調べる]]	df[col].dt.year	translate: データフレームdfのカラムcolの年	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの年[|[を得る|を見る|を調べる]]	ds.dt.year	translate: データ列dsの年	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの月[|[を得る|を見る|を調べる]]	df[col].dt.month	translate: データフレームdfのカラムcolの月	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの月[|[を得る|を見る|を調べる]]	ds.dt.month	translate: データ列dsの月	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[日|日にち][|[を得る|を見る|を調べる]]	df[col].dt.day	translate: データフレームdfのカラムcolの日にち	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの[日|日にち][|[を得る|を見る|を調べる]]	ds.dt.day	translate: データ列dsの日	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[時|時刻][|[を得る|を見る|を調べる]]	df[col].dt.hour	translate: データフレームdfのカラムcolの時	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの[時|時刻][|[を得る|を見る|を調べる]]	ds.dt.hour	translate: データ列dsの時	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの分[|[を得る|を見る|を調べる]]	df[col].dt.minute	translate: データフレームdfのカラムcolの分	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの分[|[を得る|を見る|を調べる]]	ds.dt.minute	translate: データ列dsの分	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの秒[|[を得る|を見る|を調べる]]	df[col].dt.second	translate: データフレームdfの列colの秒	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの秒[|[を得る|を見る|を調べる]]	ds.dt.second	translate: データ列dsの秒を得る	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの曜日[名|[の名前|名|]][|[を得る|を見る|を調べる]]	df[col].dt.weekday_name	translate: データフレームdfのカラムcolの曜日名	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの曜日[名|[の名前|名|]][|[を得る|を見る|を調べる]]	ds.dt.weekday_name	translate: データ列dsの曜日名	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの曜日数[|[を得る|を見る|を調べる]]	df[col].dt.dayofweek	translate: データフレームdfのカラムcolの曜日数	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: データ列dsの曜日数[|[を得る|を見る|を調べる]]	ds.dt.dayofweek	translate: データ列dsの曜日数	_	(AttributeError('Can only use .dt accessor with datetimelike values'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がx[の|である][行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col] == x]	translate: データフレームdfのカラムcolがxの行を抽出する	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がxでない[行|データ]を[フィルタする|消す|取り除く]	df[df[col] == x]	translate: データフレームdfのカラムcolがxでない行をフィルタする	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[行|データ]を条件で[フィルタする|消す|取り除く]には	df[(df[col] == x) & (df[col2] == x2)]	translate: データフレームdfの行を条件で消すには	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がx[、|]かつ[[カラム|列]|文字列]col2がx2である[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[(df[col] == x) & (df[col2] == x2)]	translate: データフレームdfのカラムcolがx、かつカラムcol2がx2である行を抽出する	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がx[より[小さい|少ない]|未満の][行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col] < x]	translate: データフレームdfの文字列colがxより少ない行を抽出する	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がx以下の[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col] <= x]	translate: データフレームdfのカラムcolがx以下の行を抽出する	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がxより[大きい|多い][行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col] > x]	translate: データフレームdfのカラムcolがxより大きい行を抽出する	_	   A  ...\n1  4  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がx以上の[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col] >= x]	translate: データフレームdfのカラムcolがx以上の行を抽出する	_	   A  ...\n1  4  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がxより[大きく|多く]x2より[小さい|少ない][行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[(x < df[col]) & (df[col] < x2)]	translate: データフレームdfのカラムcolがxより大きくx2より小さい行を	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]がx以上かつx2未満の[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[(x <= df[col]) & (df[col] < x2)]	translate: データフレームdfのカラムcolがx以上かつx2未満の行を抽出する	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の値]が[文字列|日付|]value_listに含まれる[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col].isin(value_list)]	translate: dfのカラムcolが文字列value_listに含まれる行を抽出し	_	"(NameError(""name 'value_list' is not defined""), '_')"
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列][が|で]文字列sが含まれる[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col].str.contains(s)]	translate: dfのカラムcolが文字列sが含まれる行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列][が|で]文字列sが含まれない[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[not df[col].str.contains(s)]	translate: dfのカラムcolの文字列が文字列sが含まれない行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列]が正規表現文字列sにマッチする[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col].str.match(s)]	translate: データフレームdfのカラムcolが正規表現文字列sにマッチする行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列]が正規表現文字列sにマッチしない[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[not df[col].str.match(s)]	translate: データフレームdfのカラムcolの文字列が正規表現文字列sにマッチしない行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列]が文字列sで始まる[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col].str.startswith(s)]	translate: データフレームdfのカラムcolの文字列が文字列sで始まる行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列]が文字列sで始まらない[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[not df[col].str.startswith(s)]	translate: データフレームdfのカラムcolが文字列sで始まらない行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列]が文字列sで終わる[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df[col].str.endswith(s)]	translate: データフレームdfのカラムcolが文字列sで終わる行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|の文字列]が文字列sで終わらない[行|データ]を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[not df[col].str.endswith(s)]	translate: データフレームdfの列colが文字列sで終わらない行を抽出する	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの[[カラム|列]|文字列]colの文字列長を列として得る	df[col].str.len()	translate: dfのカラムcolの文字列長を列として得る	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: データ列dsの文字列長を列として得る	ds.str.len()	translate: データ列dsの文字列長を列として得る	_	(AttributeError('Can only use .str accessor with string values!'), '_')
translate: [データフレーム]dfの欠損値が[含まれる|ある][箇所|部分][に[色を[付け|つけ]る]|を[色[付け|つけ]する]]	df.style.highlight_null()	translate: データフレームdfの欠損値が含まれる箇所に色を付ける	_	<pandas.io.formats.style.Styler object at 0x136dad4f0>
translate: [データフレーム]dfのn行目を[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop(n)	translate: データフレームdfのn行目をドロップする	_	   A  ...\n0  1  ...\n\n[1 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop(col, axis=1)	translate: データフレームdfのカラムcolをドロップする	_	    B    ...\n0   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[ドロップして|[削除し|消し|取り除い][て|、]][変更を反映する|入れ替える|更新する]	df.drop(col, axis=1, inplace=True)	translate: データフレームdfのカラムcolをドロップして変更を反映する	_	None
translate: [データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2を[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop([col, col2], axis=1)	translate: dfのカラムcolとカラムcol2をドロップする	_	   C \n0   a\n.. ..\n\n[2 rows x 1 columns]
translate: [データフレーム]df[の|[内|中]の|において][欠損値|NaN|欠損|[未記入|未入力]値]が[ある|存在する]行を[ドロップする|削除する|消す|[落とす|取り除く]]	df.dropna()	translate: データフレームdf内の欠損値がある行をドロップする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfから全ての値が[欠損値|NaN|欠損|[未記入|未入力]値][になっている|である]行[のみ|だけ]を[ドロップする|削除する|消す|[落とす|取り除く]]	df.dropna(how='all')	translate: データフレームdfから全ての値が欠損値になっている行のみをドロップする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: {[データフレーム]dfの[[カラム|列]|文字列]colの[欠損値|NaN|欠損|[未記入|未入力]値]を|xで}[埋める|置き換える]	df[col].fillna(x)	translate: データフレームdfのカラムcolの欠損値をxで埋める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[欠損値|NaN|欠損|[未記入|未入力]値]をx[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	df[col].fillna(x)	translate: データフレームdfのカラムcolの欠損値をxに設定する	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: {データ列dsの[欠損値|NaN|欠損|[未記入|未入力]値]を|xで}[埋める|置き換える]	ds.fillna(x)	translate: データ列dsの欠損値をxで埋める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsの[欠損値|NaN|欠損|[未記入|未入力]値]をx[に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	ds.fillna(x)	translate: データ列dsの欠損値をxに設定する	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[欠損値|NaN|欠損|[未記入|未入力]値]を直前の行の値で[[埋める|置き換える]|補う]	df[col].fillna(method='ffill')	translate: データフレームdfのカラムcolの欠損値を直前の行の値で埋める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsの[欠損値|NaN|欠損|[未記入|未入力]値]を直前の行の値で[[埋める|置き換える]|補う]	ds.fillna(method='ffill')	translate: データ列dsの欠損値を直前の行の値で埋める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: {__X_[の|[内|中]の|において][欠損値|NaN|欠損|[未記入|未入力]値]を|[平均値|平均]で}[埋める|置き換える]	df[col].fillna(df[col].mean())	translate: __X_の欠損値を平均値で埋める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]colの[欠損値|NaN|欠損|[未記入|未入力]値]を[平均値|平均][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	df[col].fillna(df[col].mean())	translate: データフレームdfのカラムcolの欠損値を平均値に設定する	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: {__X_[の|[内|中]の|において][欠損値|NaN|欠損|[未記入|未入力]値]を|[平均値|平均]で}[埋める|置き換える]	ds.fillna(ds.mean())	translate: __X_の欠損値を平均値で埋める	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列dsの[欠損値|NaN|欠損|[未記入|未入力]値]を[平均値|平均][に設定する|に[変更する|増やす|減らす]|に[セット|指定]する|にする]	ds.fillna(ds.mean())	translate: データ列dsの欠損値を平均値に設定する	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]col [の|[内|中]の|において]文字列sを[欠損値|NaN|欠損|[未記入|未入力]値]に[置換する|置き換える]	df[col].replace(s, np.nan)	translate: データフレームdfのカラムcol の文字列sを欠損値に置換する	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: データ列ds [の|[内|中]の|において]文字列sを[欠損値|NaN|欠損|[未記入|未入力]値]に[置換する|置き換える]	ds.replace(s, np.nan)	translate: データ列ds の文字列sを欠損値に置換する	_	0    1\n    ..\nName: A, Length: 2, dtype: int64
translate: [データフレーム]dfの[[カラム|列]|文字列]col [の|[内|中]の|において][文字列|日付|]valueのある行を[ドロップする|削除する|消す|[落とす|取り除く]]	df[col].replace(value, np.nan).dropna()	translate: データフレームdfのカラムcol の日付valueのある行をドロップする	_	"(NameError(""name 'value' is not defined""), '_')"
translate: データ列ds [の|[内|中]の|において][文字列|日付|]valueのある行を[ドロップする|削除する|消す|[落とす|取り除く]]	ds.replace(value, np.nan).dropna()	translate: データ列ds の文字列valueのある行を削除する	_	"(NameError(""name 'value' is not defined""), '_')"
translate: {[データフレーム]dfと[データフレーム]df2を|[横方向に|横に|]}[マージする|結合する|結合|[ひとつ|一つ]にまとめる|1つにする|[ひとつ|一つ]にする|1つにまとめる|くっつける|合わせる]	pd.merge(df1, df2)	translate: データフレームdfとデータフレームdf2を横方向にマージする	_	"(NameError(""name 'df1' is not defined""), '_')"
translate: [データフレーム]dfと[データフレーム]df2を[[カラム|列]|文字列]colをキー[に|と]して[、|]結合する	pd.merge(df, df2, on=col)	translate: データフレームdfとデータフレームdf2をカラムcolをキーにして、結合する	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 5 columns]
translate: {[データフレーム]dfと[データフレーム]df2を|[縦方向に|縦に|]}[連結する|結合する|つなぐ|マージする]	pd.concat([df, df2])	translate: データフレームdfとデータフレームdf2を縦方向に連結する	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[4 rows x 3 columns]
translate: [データフレーム]dfの重複した行数のマスク[|[を得る|を見る|を調べる]]	df.duplicated()	translate: データフレームdfの重複した行数のマスク	_	0    False\n     ...  \nLength: 2, dtype: bool
translate: [データフレーム]dfの重複した行数[|を	df.duplicated().sum()	translate: データフレームdfの重複した行数[|を	_	0
translate: [データフレーム]dfの重複した行を[抽出する|抽出[し|して]|[取り出す|抽出する|[選択する|選ぶ]]|]	df[df.duplicated()]	translate: データフレームdfの重複した行を抽出する	_	Empty DataFrame\nColumns: [A, B, C]\nIndex: []\n\n[0 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colに重複が	df.duplicated(subset=col)	translate: データフレームdfのカラムcolに重複が	_	0    False\n     ...  \nLength: 2, dtype: bool
translate: [データフレーム]dfから重複[した行|]を[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop_duplicates()	translate: データフレームdfから重複した行をドロップする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfから重複[した行|]を[ドロップして|[削除し|消し|取り除い][て|、]][、|][インプレイスする|更新する|置き換える]	df.drop_duplicates(inplace=True)	translate: データフレームdfから重複した行をドロップして、インプレイスする	_	None
translate: {[データフレーム]dfから重複[した行|]|重複した最後の行を残して}を[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop_duplicates(keep=False)	translate: データフレームdfから重複重複した最後の行を残してをドロップする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]col[が重複した|に重複のある]行を[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop_duplicates(subset=col)	translate: データフレームdfの列colが重複した行を削除する	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[が[|両方とも]重複した|に重複のある]行を[ドロップする|削除する|消す|[落とす|取り除く]]	df.drop_duplicates(subset=[col, col2])	translate: データフレームdfのカラムcolとカラムcol2が重複した行をドロップする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化する|集[約|計]する|まとめる]	df.groupby(col)	translate: データフレームdfをカラムcolでグループ化する	_	<pandas.core.groupby.generic.DataFrameGroupBy object at 0x136dd45e0>
translate: [データフレーム]dfを{NaNを含めて|[|各][[カラム|列]|文字列]col[で|[毎|ごと]に]}[グループ化する|集[約|計]する|まとめる]	df.groupby(col, dropna=False)	translate: データフレームdfをNaNを含めてカラムcolでグループ化する	_	<pandas.core.groupby.generic.DataFrameGroupBy object at 0x137165880>
translate: [データフレーム]dfを関数funcで[グループ化する|集[約|計]する|まとめる]	df.groupby(func)	translate: データフレームdfを関数funcでグループ化する	func=lamda x: 'A';_	"(SyntaxError('invalid syntax', ('<string>', 1, 12, ""func=lamda x: 'A'\n"")), ""func=lamda x: 'A';_"")"
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]列挙する	[(name, group) for name, group in df.groupby(col)]	translate: データフレームdfをカラムcolでグループ化して、列挙する	_	[(1,    A  ...\n0  1  ...\n\n[1 rows x 3 columns]), (4,    A  ...\n1  4  ...\n\n[1 rows x 3 columns])]
translate: [データフレーム]dfを[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]列挙する	[(name, group) for name, group in df.groupby([col, col2])]	translate: データフレームdfをカラムcolと列col2の組み合わせでグループ化して、列挙する	_	[((1, 2.2),    A  ...\n0  1  ...\n\n[1 rows x 3 columns]), ((4, 5.8),    A  ...\n1  4  ...\n\n[1 rows x 3 columns])]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]文字列sという[|名前の]グループ[を得る|を見る|を調べる]	df.groupby(col).get_group(s)	translate: データフレームdfをカラムcolでグループ化して、文字列sというグループを得る	_	(KeyError(' ABC abc 123あ'), '_')
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]各グループの[個数|大きさ]を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).size()	translate: データフレームdfをカラムcol毎にグループ化して、各グループの個数を求める	_	A\n1    1\n    ..\nLength: 2, dtype: int64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]文字列sというグループの[個数|大きさ]を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).size()[s]	translate: データフレームdfをカラムcolでグループ化して、文字列sというグループの個数を求める	_	(KeyError(' ABC abc 123あ'), '_')
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の合計[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).sum()	translate: データフレームdfのカラムcol毎の合計	_	    B  \nA      \n1   2.2\n..  ...\n\n[2 rows x 1 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]合計を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).sum()	translate: データフレームdfを各カラムcolでグループ化して合計を求める	_	    B  \nA      \n1   2.2\n..  ...\n\n[2 rows x 1 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の[平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).mean()	translate: dfのカラムcolごとの平均値	_	    B  \nA      \n1   2.2\n..  ...\n\n[2 rows x 1 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]][平均値|平均]を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).mean()	translate: データフレームdfをカラムcolでグループ化して、平均値を求める	_	    B  \nA      \n1   2.2\n..  ...\n\n[2 rows x 1 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の個数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).count()	translate: データフレームdfのカラムcol毎の個数	_	    B  ...\nA      ...\n1   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]個数を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).count()	translate: データフレームdfをカラムcolでグループ化して、個数を計算する	_	    B  ...\nA      ...\n1   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の最大値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).max()	translate: データフレームdfの各カラムcol毎の最大値	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]最大値を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).max()	translate: データフレームdfをカラムcolでグループ化して、最大値を求める	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の最小値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).min()	translate: データフレームdfのカラムcol毎の最小値	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]最小値を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).min()	translate: データフレームdfをカラムcolでグループ化して、最小値を求める	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).var()	translate: データフレームdfのカラムcol毎の分散	_	    B \nA     \n1  NaN\n..  ..\n\n[2 rows x 1 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]分散を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).var()	translate: データフレームdfをカラムcolでグループ化して、分散を求める	_	    B \nA     \n1  NaN\n..  ..\n\n[2 rows x 1 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).std()	translate: データフレームdfのカラムcolごとの標準偏差	_	    B \nA     \n1  NaN\n..  ..\n\n[2 rows x 1 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]標準偏差を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).std()	translate: dfを列colでグループ化して、標準偏差を求める	_	    B \nA     \n1  NaN\n..  ..\n\n[2 rows x 1 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]col[毎|ごと]の関数適用した値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby(col).agg(func)	translate: データフレームdfの文字列col毎の関数適用した値	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][[グループ化して|集[約|計]して|まとめて][、|]|[グループ化した|集[約|計]した|まとめた]]関数適用した値を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).agg(func)	translate: データフレームdfをカラムcolでグループ化して、関数適用した値を求める	_	    B    ...\nA        ...\n1   2.2  ...\n..  ...  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の合計[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).sum()	translate: データフレームdfの文字列colとカラムcol2毎の合計	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]合計[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).sum()	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、合計	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の[平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).mean()	translate: データフレームdfのカラムcolとカラムcol2毎の平均値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][平均値|平均][|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).mean()	translate: dfをカラムcolとカラムcol2の組み合わせでグループ化して平均値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の個数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).count()	translate: データフレームdfのカラムcolとカラムcol2毎の個数	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]個数[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).count()	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、個数	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の最大値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).max()	translate: データフレームdfのカラムcolとカラムcol2毎の最大値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]最大値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).max()	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、最大値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の最小値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).min()	translate: データフレームdfのカラムcolとカラムcol2毎の最小値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]最小値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).min()	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、最小値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).var()	translate: データフレームdfのカラムcolとカラムcol2毎の分散	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]分散[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).var()	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、分散	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).std()	translate: データフレームdfのカラムcolとカラムcol2毎の標準偏差	_	"(ValueError(""could not convert string to float: 'a'""), '_')"
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]標準偏差[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).std()	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、標準偏差	_	"(ValueError(""could not convert string to float: 'a'""), '_')"
translate: [データフレーム]dfの[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[毎|ごと]の関数適用した値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).agg(func)	translate: データフレームdfのカラムcolとカラムcol2毎の関数適用した値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]colと[[カラム|列]|文字列]col2の組み合わせ[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|]関数適用した値[|を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]]	df.groupby([col, col2], as_index=False).agg(func)	translate: データフレームdfをカラムcolとカラムcol2の組み合わせでグループ化して、関数適用した値	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の合計を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].sum()	translate: データフレームdfをカラムcolでグループ化して、カラムcol2の合計を求める	_	A\n1    2.2\n    ... \nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の[平均値|平均]を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].mean()	translate: データフレームdfを文字列colでグループ化して、カラムcol2の平均値を求める	_	A\n1    2.2\n    ... \nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の個数を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].count()	translate: dfをカラムcolでグループ化して、カラムcol2の個数を求める	_	A\n1    1\n    ..\nName: B, Length: 2, dtype: int64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の最大値を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].max()	translate: データフレームdfをカラムcolでグループ化して、カラムcol2の最大値を求める	_	A\n1    2.2\n    ... \nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の最小値を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].min()	translate: データフレームdfをカラムcolでグループ化して、カラムcol2の最小値を求める	_	A\n1    2.2\n    ... \nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の分散を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].var()	translate: データフレームdfを各文字列colでグループ化して、カラムcol2の分散を求める	_	A\n1   NaN\n     ..\nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の標準偏差を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].std()	translate: データフレームdfをカラムcolでグループ化して、カラムcol2の標準偏差を求める	_	A\n1   NaN\n     ..\nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に][グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の関数適用した値を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col)[col2].agg(func)	translate: データフレームdfをカラムcolでグループ化して、カラムcol2の関数適用した値を求める	_	A\n1    2.2\n    ... \nName: B, Length: 2, dtype: float64
translate: [データフレーム]dfを[|各][[カラム|列]|文字列]col[で|[毎|ごと]に]で[グループ化して|集[約|計]して|まとめて][、|][[カラム|列]|文字列]col2の[要約統計量|[記述統計量|基本統計量|代表値]]を[求める|[計算する|算出する]|[[見る|確認する|調べる]|確認する]]	df.groupby(col).describe()[col2]	translate: データフレームdfをカラムcolででグループ化して、カラムcol2の要約統計量を求める	_	    count  ...\nA          ...\n1   1.0    ...\n..    ...  ...\n\n[2 rows x 8 columns]
translate: {[データフレーム]df[|全体]を|__Y__[で|によって]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=col)	translate: __Y__でデータフレームdfを並べる	alist=['A'];_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]col[で|によって]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=col, inplace=True)	translate: カラムcolでデータフレームdfをソートして、インプレイスする	_	None
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[で|によって]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=[col,col2], inplace=True)	translate: カラムcolとカラムcol2でデータフレームdfをソートしてインプレイスする	_	None
translate: {[データフレーム]df[|全体]を|リストalist[で[指定された|与えられた]|の][カラム|列][で|によって]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=alist, inplace=True)	translate: リストalistで指定されたカラムでデータフレームdfをソートして、インプレイスする	_	(KeyError(1), '_')
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]col[で|によって]|[昇順に|小さい順に]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=col, ascending=True)	translate: 昇順にデータフレームdfを文字列colでソートする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[で|によって]|[昇順に|小さい順に]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=[col,col2], ascending=True)	translate: 昇順にデータフレームdfをカラムcolとカラムcol2でソートする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: {[データフレーム]df[|全体]を|リストalist[で[指定された|与えられた]|の][カラム|列][で|によって]|[昇順に|小さい順に]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=alist, ascending=True)	translate: データフレームdfをリストalistで指定されたカラムで昇順にソートする	_	(KeyError(1), '_')
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]col[で|によって]|[降順に|大きい順に]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=col, ascending=False)	translate: データフレームdfをカラムcolで降順にソートする	_	    A  ...\n1   4  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[で|によって]|[降順に|大きい順に]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=[col,col2], ascending=False)	translate: 降順にカラムcolとカラムcol2でデータフレームdfをソートする	_	    A  ...\n1   4  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: {[データフレーム]df[|全体]を|リストalist[で[指定された|与えられた]|の][カラム|列][で|によって]|[降順に|大きい順に]}[ソートする|[並べる|並べ直す|整列する]]	df.sort_values(by=alist, ascending=False)	translate: データフレームdfをリストalistで指定されたカラムで降順にソートする	_	(KeyError(1), '_')
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]col[で|によって]|[昇順に|小さい順に]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=col, ascending=True, inplace=True)	translate: データフレームdfをカラムcolで昇順にソートして、インプレイスする	_	None
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[で|によって]|[昇順に|小さい順に]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=[col,col2], ascending=True, inplace=True)	translate: データフレームdfを列colとカラムcol2で昇順にソートして、インプレイスする	_	None
translate: {[データフレーム]df[|全体]を|リストalist[で[指定された|与えられた]|の][カラム|列][で|によって]|[昇順に|小さい順に]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=alist, ascending=True, inplace=True)	translate: データフレームdfをリストalistで指定されたカラムで昇順にソートしてインプレイスする	_	(KeyError(1), '_')
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]col[で|によって]|[降順に|大きい順に]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=col, ascending=False, inplace=True)	translate: データフレームdf全体をカラムcolで降順にソートして、インプレイスする	_	None
translate: {[データフレーム]df[|全体]を|[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[で|によって]|[降順に|大きい順に]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=[col,col2], ascending=False, inplace=True)	translate: カラムcolとカラムcol2で降順にデータフレームdfをソートしてインプレイスする	_	None
translate: {[データフレーム]df[|全体]を|リストalist[で[指定された|与えられた]|の][カラム|列][で|によって]|[降順に|大きい順に]}[ソートして|[並べて|並べ直して|整列して]][、|][インプレイスする|更新する|置き換える]	df.sort_values(by=alist, ascending=False, inplace=True)	translate: データフレームdfをリストalistで指定されたカラムで大きい順にソートして、インプレイスする	_	(KeyError(1), '_')
translate: [データフレーム]df[|全体]を{[[カラム|列]|文字列]col[で|によって|を用いて]}[ソートして|[並べて|並べ直して|整列して]][、|]NaNは先頭に[|来るように]する	df.sort_values(by=col, na_position='first')	translate: データフレームdf全体をカラムcolでソートして、NaNは先頭にする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]df[|全体]を{[[カラム|列]|文字列]colと[[カラム|列]|文字列]col2[で|によって|を用いて]}[ソートして|[並べて|並べ直して|整列して]][、|]NaNは先頭に[|来るように]する	df.sort_values(by=[col,col2], na_position='first')	translate: データフレームdfをカラムcolと文字列col2を用いてソートして、NaNは先頭にする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]df[|全体]を{リストalist[で[指定された|与えられた]|の][カラム|列][で|によって|を用いて]}[ソートして|[並べて|並べ直して|整列して]][、|]NaNは先頭に[|来るように]する	df.sort_values(by=alist, na_position='first')	translate: データフレームdfをリストalistで指定されたカラムでソートして、NaNは先頭に来るようにする	_	(KeyError(1), '_')
translate: [データフレーム]df[|全体]を[インデックス|行][で|によって][ソートする|[並べる|並べ直す|整列する]]	df.sort_index()	translate: データフレームdfをインデックスでソートする	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]df[|全体]を[インデックス|行][を使って|によって][降順で|大きい順で][ソートする|[並べる|並べ直す|整列する]]	df.sort_index(ascending=False)	translate: データフレームdfをインデックスを使って降順でソートする	_	    A  ...\n1   4  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]df[|内|中]の[欠損値|NaN|欠損|[未記入|未入力]値]を[|全て]ブール値に[変換|]する	df.isna()	translate: データフレームdfの欠損値をブール値に変換する	_	    A      ...\n0   False  ...\n..    ...  ...\n\n[2 rows x 3 columns]
translate: データ列ds[|内|中]の[欠損値|NaN|欠損|[未記入|未入力]値]を[|全て]ブール値に[変換|]する	ds.isna()	translate: データ列dsの欠損値をブール値に変換する	_	0    False\n     ...  \nName: A, Length: 2, dtype: bool
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|内|中]の[欠損値|NaN|欠損|[未記入|未入力]値]を[|全て]ブール値に[変換|]する	df[col].isna()	translate: データフレームdfのカラムcolの欠損値をブール値に変換する	_	0    False\n     ...  \nName: A, Length: 2, dtype: bool
translate: [データフレーム]df[|内|中]の[欠損値|NaN|欠損|[未記入|未入力]値]の合計[|[を得る|を見る|を調べる]]	df.isna().sum()	translate: データフレームdfの未記入値の合計	_	A    0\n    ..\nLength: 3, dtype: int64
translate: データ列ds[|内|中]の[欠損値|NaN|欠損|[未記入|未入力]値]の合計[|[を得る|を見る|を調べる]]	ds.isna().sum()	translate: データ列dsのNaNの合計	_	0
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|内|中]の[欠損値|NaN|欠損|[未記入|未入力]値]の合計[|[を得る|を見る|を調べる]]	df[col].isna().sum()	translate: データフレームdfのカラムcolの欠損値の合計	_	0
translate: [データフレーム]df[|内|中]に[文字列|日付|]valueが含まれるとき[、|]真に[変換|]する	df.isin([value])	translate: データフレームdf内に文字列valueが含まれるとき、真に変換する	_	"(NameError(""name 'value' is not defined""), '_')"
translate: データ列ds[|内|中]に[文字列|日付|]valueが含まれるとき[、|]真に[変換|]する	ds.isin([value])	translate: データ列dsに文字列valueが含まれるとき、真に変換する	_	"(NameError(""name 'value' is not defined""), '_')"
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|内|中]に[文字列|日付|]valueが含まれるとき[、|]真に[変換|]する	df[col].isin([value])	translate: データフレームdfのカラムcolに文字列valueが含まれるとき、真に変換する	_	"(NameError(""name 'value' is not defined""), '_')"
translate: [データフレーム]df[|内|中]に[含まれる|存在する][文字列|日付|]valueの[個数|合計][|[を得る|を見る|を調べる]]	df.isin([value]).sum()	translate: データフレームdfに含まれる文字列valueの個数	_	"(NameError(""name 'value' is not defined""), '_')"
translate: [データフレーム]df[|内|中]に[含まれる|存在する][文字列|日付|]value[の個数]をカウントする	df.isin([value]).sum()	translate: データフレームdfに含まれる文字列valueの個数をカウントする	_	"(NameError(""name 'value' is not defined""), '_')"
translate: データ列ds[|内|中]に[含まれる|存在する][文字列|日付|]valueの[個数|合計][|[を得る|を見る|を調べる]]	ds.isin([value]).sum()	translate: データ列dsに含まれる文字列valueの個数	_	"(NameError(""name 'value' is not defined""), '_')"
translate: データ列ds[|内|中]に[含まれる|存在する][文字列|日付|]value[の個数]をカウントする	ds.isin([value]).sum()	translate: データ列dsに含まれる文字列valueの個数をカウントする	_	"(NameError(""name 'value' is not defined""), '_')"
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|内|中]に[含まれる|存在する][文字列|日付|]valueの[個数|合計][|[を得る|を見る|を調べる]]	df[col].isin([value]).sum()	translate: データフレームdfのカラムcolに含まれる文字列valueの個数	_	"(NameError(""name 'value' is not defined""), '_')"
translate: [データフレーム]dfの[[カラム|列]|文字列]col[|内|中]に[含まれる|存在する][文字列|日付|]value[の個数]をカウントする	df[col].isin([value]).sum()	translate: データフレームdfのカラムcolに含まれる文字列valueの個数をカウントする	_	"(NameError(""name 'value' is not defined""), '_')"
translate: [データフレーム]df内のカテゴリデータをダミー変数[に変換|化]する	pd.get_dummies(df)	translate: データフレームdf内のカテゴリデータをダミー変数に変換する	_	    A  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 3 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colをダミー変数[化|に変換]する	pd.get_dummies(df[col])	translate: データフレームdfのカラムcolをダミー変数に変換する	_	    1  ...\n0   1  ...\n.. ..  ...\n\n[2 rows x 2 columns]
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableをダミー変数[化|に変換]する	pd.get_dummies(iterable)	translate: リストiterableをダミー変数化する	_	    0  ...\n0   1  ...\n.. ..  ...\n\n[4 rows x 4 columns]
translate: {最初のカテゴリーを除外し[て[、|]]|xを}ダミー変数[に変換|化]する	pd.get_dummies(x, drop_first=True)	translate: 最初のカテゴリーを除外して、xをダミー変数に変換する	_	"(TypeError(""object of type 'float' has no len()""), '_')"
translate: {NaNも加えて|xを}ダミー変数[に変換|化]する	pd.get_dummies(x, dummy_na=True)	translate: NaNも加えてxをダミー変数に変換する	_	   1.5  ...\n0  1    ...\n\n[1 rows x 2 columns]
translate: [データフレーム]dfの[[カラム|列]|文字列]colをカテゴリデータに[変換|]する	df[col].astype(object)	translate: データフレームdfのカラムcolをカテゴリデータに変換する	_	0    1\n    ..\nName: A, Length: 2, dtype: object
translate: データ列dsをカテゴリデータに[変換|]する	ds.astype(object)	translate: データ列dsをカテゴリデータに変換する	_	0    1\n    ..\nName: A, Length: 2, dtype: object
translate: [データフレーム]dfの[[カラム|列]|文字列]colを[0と1|1と0]に[マップする|変換する]	df[col].map({s: 1, s2: 0})	translate: データフレームdfのカラムcolを0と1にマップする	_	0   NaN\n     ..\nName: A, Length: 2, dtype: float64
translate: データ列dsを[0と1|1と0]に[マップする|変換する]	ds.map({s: 1, s2: 0})	translate: データ列dsを0と1にマップする	_	0   NaN\n     ..\nName: A, Length: 2, dtype: float64
translate: [データフレーム]dfの[[カラム|列]|文字列]colからユニークな[要素|値]を抽出し[、|]リスト化する	df[col].unique().tolist()	translate: データフレームdfの文字列colからユニークな要素を抽出し、リスト化する	_	[1, 4]
translate: データ列dsからユニークな[要素|値]を抽出し[、|]リスト化する	ds.unique().tolist()	translate: データ列dsからユニークな要素を抽出し、リスト化する	_	[1, 4]
translate: データ列dsとデータ列ds2から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())	translate: データ列dsとデータ列ds2から重複を取り除く	_	{1, 2.2, 4, 5.8}
translate: [データフレーム]dfの[[カラム|列]|文字列]col2をty型に変換し[、|][|[新しく|新たに|]|[データフレーム]dfの][[カラム|列]|文字列]col[に代入する|[と|に]する]	df[col] = df[col2].astype(ty)	translate: データフレームdfのカラムcol2をty型に変換し、カラムcolに代入する	_	(SyntaxError('invalid syntax', ('<string>', 1, 9, 'df[col] = df[col2].astype(ty)')), '_')
translate: [乱数シード|乱数生成系列|シード]を初期化する	random.seed()	translate: 乱数シードを初期化する	import random;_	None
translate: [システム時刻で|毎回異なるように]乱数を初期化する	random.seed()	translate: システム時刻で乱数を初期化する	import random;_	None
translate: {[乱数シード|乱数生成系列|シード]を|nで}初期化する	random.seed(n)	translate: nで乱数シードを初期化する	import random;random.seed(0);_	None
translate: {[乱数シード|乱数生成系列|シード]を|nで}固定化する	random.seed(n)	translate: nでシードを固定化する	import random;random.seed(0);_	None
translate: サイコロ[|を[得る|求める]]	random.randint(1, 6)	translate: サイコロ	import random;random.seed(0);_	4
translate: nからn2までの[整数乱数|ランダムな整数[|値]][|を[得る|求める]]	random.randint(n, n2)	translate: nからn2までの整数乱数	import random;random.seed(0);_	2
translate: n〜n2の範囲の[整数乱数|ランダムな整数[|値]][|を[得る|求める]]	random.randint(n, n2)	translate: n〜n2の範囲の整数乱数	import random;random.seed(0);_	2
translate: [0から|]n[未満]までの[整数乱数|ランダムな整数[|値]][|を[得る|求める]]	random.randrange(n)	translate: 0からn未満までの整数乱数	import random;random.seed(0);_	0
translate: nからn2[未満|]までの[整数乱数|ランダムな整数[|値]][|を[得る|求める]]	random.randrange(n, n2)	translate: nからn2未満までの整数乱数	import random;random.seed(0);_	2
translate: nからn2未満の間でn3ステップの整数群から[整数乱数|ランダムな整数[|値]][|を[得る|求める]]	random.randrange(n, n2, n3)	translate: nからn2未満の間でn3ステップの整数群から整数乱数	import random;random.seed(0);_	(ValueError('empty range for randrange()'), 'import random;random.seed(0);_')
translate: [疑似|]乱数[|を生成する|を[得る|求める]]	random.random()	translate: 疑似乱数	import random;random.seed(0);_	0.8444218515250481
translate: xからx2の間の一様な[疑似|]乱数[|を生成する|を[得る|求める]]	random.uniform(x, x2)	translate: xからx2の間の一様な疑似乱数	import random;random.seed(0);_	2.766632777287572
translate: 正規分布で[疑似|]乱数[|を生成する|を[得る|求める]]	random.normalvariate(mu=0.5, sigma=0.2)	translate: 正規分布で疑似乱数	import random;random.seed(0);_	0.46322635578134835
translate: 平均x[、|]標準偏差x2の正規分布で[疑似|]乱数[|を生成する|を[得る|求める]]	random.normalvariate(x, x2)	translate: 平均x、標準偏差x2の正規分布で疑似乱数	import random;random.seed(0);_	0.9483953367202252
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableから[[ひとつ|一つ]|1個]ランダムに選ぶ	random.choice(iterable)	translate: リストiterableからひとつランダムに選ぶ	import random;random.seed(0);_	4
translate: アルファベットから[[ひとつ|一つ]|[一|１|1]文字]ランダムに選ぶ	random.choice(string.alphabet)	translate: アルファベットからひとつランダムに選ぶ	import string,random;random.seed(0);_	"(AttributeError(""module 'string' has no attribute 'alphabet'""), 'import string,random;random.seed(0);_')"
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableからn個[、|]ランダムに選ぶ	random.choices(iterable, k=n)	translate: リストiterableからn個、ランダムに選ぶ	import random;random.seed(0);_	[4]
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableから[サンプリングする|ランダムに選ぶ]	random.sample(iterable)	translate: リストiterableからサンプリングする	import random;random.seed(0);_	"(TypeError(""sample() missing 1 required positional argument: 'k'""), 'import random;random.seed(0);_')"
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableからn個[、|][サンプリングする|ランダムに選ぶ]	random.sample(iterable, k=n)	translate: リストiterableからn個、サンプリングする	import random;random.seed(0);_	[4]
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableから重複なく[、|]n個ランダムに選ぶ	random.sample(iterable, k=n)	translate: リストiterableから重複なく、n個ランダムに選ぶ	import random;random.seed(0);_	[4]
translate: リストalistを[ランダムに|]シャッフルする	random.shuffle(alist)	translate: リストalistをランダムにシャッフルする	import random;random.seed(0);_	None
translate: 空[の|][集合|セット][|を[得る|[[作る|作成する]|[|新規]生成する|[用意|準備]する]]]	set()	translate: 空の集合	_	set()
translate: [[リスト|タプル|配列]|列|イテラブル|]iterable[の|から][集合|セット][|を[得る|[[作る|作成する]|[|新規]生成する|[用意|準備]する]]]	set(iterable)	translate: リストiterableのセット	_	{0, 1, 2, 4}
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableから重複を取り除く	set(iterable)	translate: iterableから重複を取り除く	_	{0, 1, 2, 4}
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableを[集合|セット]に[変換|]する	set(iterable)	translate: リストiterableを集合に変換する	_	{0, 1, 2, 4}
translate: {セットstに|[文字列|オブジェクト|]elementを}追加する	st.add(element)	translate: セットstにオブジェクトelementを追加する	st=set([1,2]);_;st	{1, 2}
translate: {セットstに|[[リスト|タプル|配列]|列|イテラブル|]iterableの要素を[全て|]}追加する	st.update(iterable)	translate: セットstにリストiterableの要素を全て追加する	st=set([1,2]);_;st	{0, 1, 2, 4}
translate: {セットstに|[[リスト|タプル|配列]|列|イテラブル|]iterableを}追加[更新|]する	st.update(iterable)	translate: セットstにイテラブルiterableを追加更新する	st=set([1,2]);_;st	{0, 1, 2, 4}
translate: {セットstから|[文字列|オブジェクト|]elementを}[取り除く|除く|除去する]	st.remove(element)	translate: セットstから文字列elementを取り除く	st=set([1,2]);_;st	{1}
translate: {セットstから|エラーなく}[文字列|オブジェクト|]elementを[取り除く|除く|除去する]	st.discard(element)	translate: セットstからエラーなく文字列elementを取り除く	st=set([1,2]);_;st	{1}
translate: セットstから[全[ての|]要素を|要素を全て][[取り除く|除く|除去する]|消す]	st.clear()	translate: セットstから全ての要素を取り除く	st=set([1,2]);_;st	set()
translate: セットstを[空|空集合]にする	st.clear()	translate: セットstを空集合にする	st=set([1,2]);_;st	set()
translate: セットstをセットst2との[共通要素|インターセクション][だけ|のみ]に[更新|]する	st.intersection_update(st2)	translate: セットstをセットst2との共通要素だけに更新する	st=set([1,2]);st2=set([1,3]);_;st	{1}
translate: セットstからセットst2[の要素|]を[全て|][取り除く|除く|除去する]	st.difference_update(st2)	translate: セットstからセットst2の要素を全て取り除く	st=set([1,2]);st2=set([1,3]);_;st	{2}
translate: セットstからセットst2との共通要素を[全て|][取り除く|除く|除去する]	st.symmetric_difference_update(st2)	translate: セットstからセットst2との共通要素を全て取り除く	st=set([1,2]);st2=set([1,3]);_;st	{2, 3}
translate: セットstから[任意の要素を|何でもいいから[ひとつ|一つ]][取り出す|[取り除く|除く|除去する]]	st.pop()	translate: セットstから任意の要素を取り出す	st=set([1,2]);_	1
translate: セットstとセットst2の[和集合|ユニオン][|を[求める|計算する|算出する]|を得る]	st.union(st2)	translate: セットstとセットst2のユニオン	st=set([1,2]);st2=set([1,3]);_	{1, 2, 3}
translate: セットst ∪ st2	st.union(st2)	translate: セットst ∪ st2	st=set([1,2]);st2=set([1,3]);_	{1, 2, 3}
translate: セットstとセットst2の[積集合|共通部分|[交わり|交差]|インターセクション][|を[求める|計算する|算出する]|を得る]	st.intersection(st2)	translate: セットstとセットst2の積集合	st=set([1,2]);st2=set([1,3]);_	{1}
translate: セットstとセットst2に共通する要素からなる集合[|を[求める|計算する|算出する]|を得る]	st.intersection(st2)	translate: セットstとセットst2に共通する要素からなる集合	st=set([1,2]);st2=set([1,3]);_	{1}
translate: セットst ∩ st2	st.intersection(st2)	translate: セットst ∩ st2	st=set([1,2]);st2=set([1,3]);_	{1}
translate: リストalistとリストalist2の[積集合|共通りスト|インターセクション][|を[求める|計算する|算出する]|を得る]	list(set(alist) & set(alist2))	translate: リストalistとリストalist2の積集合	_	[]
translate: セットstとセットst2の[差集合|差][|を[求める|計算する|算出する]|を得る]	st.difference(st2)	translate: セットstとセットst2の差集合を求める	st=set([1,2]);st2=set([1]);_	{2}
translate: セットstに含まれ[、|]セットst2に含まれない集合[|を[求める|計算する|算出する]|を得る]	st.difference(st2)	translate: セットstに含まれ、セットst2に含まれない集合	st=set([1,2]);st2=set([1]);_	{2}
translate: セットstからセットst2を引いた[差集合|差][|を[求める|計算する|算出する]|を得る]	st.difference(st2)	translate: セットstからセットst2を引いた差集合	st=set([1,2]);st2=set([1]);_	{2}
translate: セットstにおけるセットst2の補集合[|を[求める|計算する|算出する]|を得る]	st.difference(st2)	translate: セットstにおけるセットst2の補集合を求める	st=set([1,2]);st2=set([1]);_	{2}
translate: セットst ＼ st2	st.difference(st2)	translate: セットst ＼ st2	st=set([1,2]);st2=set([1]);_	{2}
translate: セットstとセットst2の[対称差集合|対称差][|を[求める|計算する|算出する]|を得る]	st.symmetric_difference(st2)	translate: セットstとセットst2の対称差集合	st=set([1,2]);st2=set([1]);_	{2}
translate: セットstとast2のいずれか一方だけの集合[|を[求める|計算する|算出する]|を得る]	st.symmetric_difference(st2)	translate: セットstとast2のいずれか一方だけの集合	st=set([1,2]);st2=set([1]);_	{2}
translate: [文字列|オブジェクト|]element[が|は]セットstの[メンバー|要素][|に含まれる][か[|どうか][調べる||[確認|判定|テスト]する]|]	element in st	translate: 文字列elementがセットstのメンバーか調べる	st=set([1,2]);_	True
translate: [文字列|オブジェクト|]element[が|は]セットstに含まれる[か[|どうか][調べる||[確認|判定|テスト]する]|]	element in st	translate: 文字列elementがセットstに含まれるか調べる	st=set([1,2]);_	True
translate: [文字列|オブジェクト|]element ∈ st	element in st	translate: 文字列element ∈ st	st=set([1,2]);_	True
translate: [文字列|オブジェクト|]element[が|は]セットstの[メンバー|要素][でない|に含まれない][か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in st	translate: 文字列elementがセットstのメンバーでないか調べる	st=set([1,2]);_	False
translate: [文字列|オブジェクト|]element[が|は]セットstに含まれない[か[|どうか][調べる||[確認|判定|テスト]する]|]	element not in st	translate: 文字列elementがセットstに含まれないか調べる	st=set([1,2]);_	False
translate: [文字列|オブジェクト|]element ∉ st	element not in st	translate: 文字列element ∉ st	st=set([1,2]);_	False
translate: セットst[が|は]セットst2の[部分集合|下位集合|サブセット][か[|どうか][調べる||[確認|判定|テスト]する]|]	st.issubset(st2)	translate: セットstがセットst2の部分集合か調べる	st=set([1,2]);st2=set([1]);_	False
translate: セットstの全ての要素がセットst2に含まれる[か[|どうか][調べる||[確認|判定|テスト]する]|]	st.issubset(st2)	translate: セットstの全ての要素がセットst2に含まれるか調べる	st=set([1,2]);st2=set([1]);_	False
translate: セットst ⊆ st2	st.issubset(st2)	translate: セットst ⊆ st2	st=set([1,2]);st2=set([1]);_	False
translate: セットst[が|は]セットst2の真[部分集合|下位集合|サブセット][か[|どうか][調べる||[確認|判定|テスト]する]|]	st < st2	translate: セットstがセットst2の真部分集合か調べる	st=set([1,2]);st2=set([1]);_	False
translate: セットst ⊂ st2	st < st2	translate: セットst ⊂ st2	st=set([1,2]);st2=set([1]);_	False
translate: セットst[が|は]セットst2の[上位集合|スーパーセット][か[|どうか][調べる||[確認|判定|テスト]する]|]	st.issuperset(st2)	translate: セットstがセットst2の上位集合か調べる	st=set([1,2]);st2=set([1]);_	True
translate: セットst ⊇ st2	st.issuperset(st2)	translate: セットst ⊇ st2	st=set([1,2]);st2=set([1]);_	True
translate: セットstがセットst2の真[上位集合|スーパーセット][か[|どうか][調べる||[確認|判定|テスト]する]|]	st > st2	translate: セットstがセットst2の真上位集合か調べる	st=set([1,2]);st2=set([1]);_	True
translate: セットst ⊃ st2	st > st2	translate: セットst ⊃ st2	st=set([1,2]);st2=set([1]);_	True
translate: セットst[が|は]セットst2と共通の要素を持たない[か[|どうか][調べる||[確認|判定|テスト]する]|]	st.isdisjoint(st2)	translate: セットstはセットst2と共通の要素を持たないか調べる	st=set([1,2]);st2=set([1]);_	False
translate: セットst[が|は]セットst2と交わりを持たない[か[|どうか][調べる||[確認|判定|テスト]する]|]	st.isdisjoint(st2)	translate: セットstがセットst2と交わりを持たない	st=set([1,2]);st2=set([1]);_	False
translate: セットst[が|は]セットst2と互いに素[か[|どうか][調べる||[確認|判定|テスト]する]|]	st.isdisjoint(st2)	translate: セットstがセットst2と互いに素か調べる	st=set([1,2]);st2=set([1]);_	False
translate: セットstとセットst2[が|は]互いに素[か[|どうか][調べる||[確認|判定|テスト]する]|]	st.isdisjoint(st2)	translate: セットstとセットst2が互いに素か	st=set([1,2]);st2=set([1]);_	False
translate: セットstの[濃度|要素数][|を[求める|計算する|算出する]]	len(st)	translate: セットstの濃度	st=set([1,2]);_	2
translate: セットstが[空|空集合][か[|どうか][調べる||[確認|判定|テスト]する]|]	len(st) == 0	translate: セットstが空か調べる	st=set([1,2]);_	False
translate: セットstが[空|空集合]でない[か[|どうか][調べる||[確認|判定|テスト]する]|]	len(st) != 0	translate: セットstが空でないか調べる	st=set([1,2]);_	True
translate: セットstの浅いコピー[|を[[作る|作成する]|[|新規]生成する|[用意|準備]する]]	st.copy()	translate: セットstの浅いコピー	st=set([1,2]);_	{1, 2}
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableのイミュータブルな[集合|セット][|を得る|を[[作る|作成する]|[|新規]生成する|[用意|準備]する]]	frozenset(iterable)	translate: リストiterableのイミュータブルな集合	_	frozenset({0, 1, 2, 4})
translate: [[リスト|タプル|配列]|列|イテラブル|]iterableを[イミュータブルな|変更不能な|更新不能な][集合|セット]に[変換|]する	frozenset(iterable)	translate: 列iterableをイミュータブルな集合にする	_	frozenset({0, 1, 2, 4})
translate: セットstの[イミュータブル|変更不能|更新不能]版	frozenset(st)	translate: セットstのイミュータブル版	st=set([1,2]);_	frozenset({1, 2})
translate: セットstを[イミュータブルな|変更不能な|更新不能な][セット|集合]に[変換|]する	frozenset(st)	translate: セットstをイミュータブルなセットに変換する	st=set([1,2]);_	frozenset({1, 2})
translate: セットstを[イミュータブル|変更不能|更新不能]に[変換|]する	frozenset(st)	translate: セットstをイミュータブルに変換する	st=set([1,2]);_	frozenset({1, 2})
translate: セットstをリストに[変換|]する	list(st)	translate: セットstをリストに変換する	st=set([1,2]);_	[1, 2]
translate: セットstを[タプル|組]に[変換|]する	tuple(st)	translate: セットstをタプルに変換する	st=set([1,2]);_	(1, 2)
translate: リストalist[の|から]重複を[取り除く|除く|除去する]	sorted(set(alist), key=alist.index)	translate: リストalistの重複を除く	_	[1, 2, 3]
translate: 空文字[|を得る]	''	translate: 空文字	_	
translate: 改行[|文字][|を得る]	'\n'	translate: 改行	_	\n
translate: タブ[|文字][|を得る]	'\t'	translate: タブ	_	"	"
translate: 空白[|文字][|を得る]	' '	translate: 空白	_	 
translate: [全ての|全][アルファベット|英字][|を[得る|[使う|[使用する|用いる]]]]	string.ascii_letters	translate: 全てのアルファベット	import string;_	abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
translate: [全ての|全]小文字[|を[得る|[使う|[使用する|用いる]]]]	string.ascii_lowercase	translate: 全ての小文字	import string;_	abcdefghijklmnopqrstuvwxyz
translate: [全ての|全]大文字[|を[得る|[使う|[使用する|用いる]]]]	string.ascii_uppercase	translate: 全ての大文字	import string;_	ABCDEFGHIJKLMNOPQRSTUVWXYZ
translate: [全ての|全]数字[|を[得る|[使う|[使用する|用いる]]]]	string.digits	translate: 全ての数字	import string;_	0123456789
translate: [全ての|全]十六進数字[|を[得る|[使う|[使用する|用いる]]]]	string.hexdigits	translate: 全ての十六進数字	import string;_	0123456789abcdefABCDEF
translate: [全ての|全][８|八]進数字[|を[得る|[使う|[使用する|用いる]]]]	string.octdigits	translate: 全ての８進数字	import string;_	01234567
translate: [全ての|全]句読点文字[|を[得る|[使う|[使用する|用いる]]]]	string.punctuation	translate: 全ての句読点文字	import string;repr(_)	"'!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'"
translate: [全ての|全]印字[|可能な]文字[|を[得る|[使う|[使用する|用いる]]]]	string.printable	translate: 全ての印字文字	import string;repr(_)	"'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'"
translate: [全ての|全]空白文字[|を[得る|[使う|[使用する|用いる]]]]	string.whitespace	translate: 全ての空白文字	import string;repr(_)	' \t\n\r\x0b\x0c'
translate: 文字コードnを文字[|列]に[変換|]する	chr(n)	translate: 文字コードnを文字に変換する	_	
translate: [文字コード|ユニコード|ASCIIコード]nの文字[|を得る]	chr(n)	translate: 文字コードnの文字	_	
translate: 文字列s2の文字コード[|を得る]	ord(s2)	translate: 文字列s2の文字コード	_	97
translate: 文字列sを[全て|][大文字|英大文字]に[変換|]する	s.upper()	translate: 文字列sを全て大文字に変換する	_	 ABC ABC 123あ
translate: 文字列s[の|[内|中]の]小文字を[大文字|英大文字]に[変換|]する	s.upper()	translate: 文字列sの小文字を大文字に変換する	_	 ABC ABC 123あ
translate: 文字列sを[全て|][小文字|英小文字]に[変換|]する	s.lower()	translate: 文字列sを全て小文字に変換する	_	 abc abc 123あ
translate: 文字列s[の|[内|中]の][大文字|英大文字]を[小文字|英小文字]に[変換|]する	s.lower()	translate: 文字列sの大文字を小文字に変換する	_	 abc abc 123あ
translate: 文字列sを[全て|][小文字|英小文字]に[変換|]する	s.casefold()	translate: 文字列sを全て小文字にする	_	 abc abc 123あ
translate: 文字列sを[積極的に|特殊文字も含め][小文字|英小文字]に[変換|]する	s.casefold()	translate: 文字列sを積極的に英小文字に変換する	_	 abc abc 123あ
translate: 文字列sを[文字リスト|文字のリスト]に[変換|]する	list(s)	translate: 文字列sを文字リストに変換する	_	[' ', 'A', 'B', 'C', ' ', 'a', 'b', 'c', ' ', '1', '2', '3', 'あ']
translate: 文字列sの[文字リスト|文字のリスト][|を得る]	list(s)	translate: 文字列sの文字リスト	_	[' ', 'A', 'B', 'C', ' ', 'a', 'b', 'c', ' ', '1', '2', '3', 'あ']
translate: {文字列sを|空白で}[区切って|分割し[、|て]][文字列リスト|文字列のリスト|リスト]に[変換|]する	s.split()	translate: 空白で文字列sを区切って文字列リストに変換する	_	['ABC', 'abc', '123あ']
translate: {文字列sを|空白[で|によって|を[用い|使っ]て]}[区切る|分割する]	s.split()	translate: 空白で文字列sを区切る	_	['ABC', 'abc', '123あ']
translate: {文字列sを|空白[で|によって|を[用い|使っ]て]}[区切って|分割し[、|て]][整数リスト|整数のリスト|[|整]数列]に[変換|]する	map(int, s.split())	translate: 文字列sを空白で区切って整数リストに変換する	list(_)	"(ValueError(""invalid literal for int() with base 10: 'ABC'""), 'list(_)')"
translate: {文字列sを|文字列s2で}[区切って|分割し[、|て]][文字列リスト|文字列のリスト|リスト]に[変換|]する	s.split(s2)	translate: 文字列sを文字列s2で区切って文字列リストに変換する	_	[' ABC ', 'bc 123あ']
translate: {文字列sを|文字列s2[で|によって|を[用い|使っ]て]}[区切る|分割する]	s.split(s2)	translate: 文字列sを文字列s2で区切る	_	[' ABC ', 'bc 123あ']
translate: {文字列sを|カンマで}[分割し|区切り][、|][文字列リスト|文字列のリスト|リスト]に[変換|]する	s.split(',')	translate: カンマで文字列sを分割し、文字列リストに変換する	_	[' ABC abc 123あ']
translate: {文字列sを|カンマ[で|によって|を[用い|使っ]て]}[区切る|分割する]	s.split(',')	translate: カンマで文字列sを区切る	_	[' ABC abc 123あ']
translate: {文字列sを|コロンで}[分割し|区切り][、|][文字列リスト|文字列のリスト|リスト]に[変換|]する	s.split(':')	translate: 文字列sをコロンで分割し、文字列リストに変換する	_	[' ABC abc 123あ']
translate: {文字列sを|コロン[で|によって|を[用い|使っ]て]}[区切る|分割する]	s.split(':')	translate: 文字列sをコロンで区切る	_	[' ABC abc 123あ']
translate: {文字列sを|改行で}[分割し|区切り][、|][文字列リスト|文字列のリスト|リスト]に[変換|]する	s.splitlines()	translate: 文字列sを改行で分割し、文字列リストに変換する	_	[' ABC abc 123あ']
translate: {文字列sを|改行[で|によって|を[用い|使っ]て]}[区切る|分割する]	s.splitlines()	translate: 文字列sを改行で区切る	_	[' ABC abc 123あ']
translate: {文字列sを|[末尾|最後|右]から|空白で}[区切る|分割する]	s.rsplit()	translate: 文字列sを末尾から空白で区切る	_	['ABC', 'abc', '123あ']
translate: {文字列sを|[末尾|最後|右]から|文字列s2で}[区切る|分割する]	s.rsplit(s2)	translate: 文字列s2で文字列sを末尾から区切る	_	[' ABC ', 'bc 123あ']
translate: {文字列sを|[|最初の]文字列s2で}[二分する|[二|]分割する|二つに分ける]	s.partition(s2)	translate: 文字列s2で文字列sを二分する	_	(' ABC ', 'a', 'bc 123あ')
translate: {文字列sを|最後の文字列s2で}[二分する|[二|]分割する|二つに分ける]	s.rpartition(s2)	translate: 文字列sを最後の文字列s2で二分する	_	(' ABC ', 'a', 'bc 123あ')
translate: {文字列sを|[|最初の]文字列s2で}[二分し|二つに区切って][、|][前半の|最初の|先頭の]文字列を得る	s.partition(s2)[0]	translate: 文字列sを文字列s2で二分し、前半の文字列を得る	_	 ABC 
translate: {文字列sを|[|最初の]文字列s2で}[分けた|に分割した][とき|時|場合]の[前半の|最初の|先頭の]文字列[|を得る|を取り出す]	s.partition(s2)[0]	translate: 文字列s2で文字列sを分けたときの前半の文字列	_	 ABC 
translate: {文字列sを[|最初の]文字列s2で}[二分し|二つに区切って][、|][、|][後半の|残りの]文字列を得る	s.partition(s2)[-1]	translate: 文字列sを文字列s2で二分し、後半の文字列を得る	_	bc 123あ
translate: {文字列sを|[|最初の]文字列s2で}[分けた|に分割した][とき|時|場合]の[後半の|残りの]文字列[|を得る|を取り出す]	s.partition(s2)[-1]	translate: 文字列sを文字列s2で分けたときの後半の文字列	_	bc 123あ
translate: {文字列sを|最後の文字列s2で}[二分し|二つに区切って][、|][前半の|最初の|先頭の]文字列を得る	s.rpartition(s2)[0]	translate: 文字列sを最後の文字列s2で二分し、前半の文字列を得る	_	 ABC 
translate: {文字列sを|最後の文字列s2で}[分けた|に分割した][とき|時|場合]の[前半の|最初の|先頭の]文字列[|を得る|を取り出す]	s.rpartition(s2)[0]	translate: 最後の文字列s2で文字列sを分けた時の前半の文字列	_	 ABC 
translate: {文字列sを最後の文字列s2で}[二分し|二つに区切って][、|][、|][後半の|残りの]文字列を得る	s.rpartition(s2)[-1]	translate: 文字列sを最後の文字列s2で二分し、、後半の文字列を得る	_	bc 123あ
translate: {文字列sを最後の文字列s2で}[分けた|に分割した][とき|時|場合]の[後半の|残りの]文字列[|を得る|を取り出す]	s.rpartition(s2)[-1]	translate: 文字列sを最後の文字列s2で分けたときの後半の文字列	_	bc 123あ
translate: {文字列s[の|[内|中]の]文字列s2を|文字列s3に}[全て|][置き換える|置換する]	s.replace(s2, s3)	translate: 文字列sの文字列s2を文字列s3に全て置き換える	_	 ABC 123bc 123あ
translate: 文字列sにおいて{文字列s2を|文字列s3に}[全て|][置き換える|置換する]	s.replace(s2, s3)	translate: 文字列sにおいて文字列s3に文字列s2を全て置き換える	_	 ABC 123bc 123あ
translate: {文字列s[内|中]の文字列s2を|[|最大]n回[だけ|のみ]|文字列s3に}[置き換える|置換する]	s.replace(s2, s3, n)	translate: 文字列s3にn回だけ文字列s内の文字列s2を置き換える	_	 ABC 123bc 123あ
translate: 文字列sから文字列s2を[全て|][取り除く|除く|除去する|消す]	s.replace(s2, '')	translate: 文字列sから文字列s2を全て取り除く	_	 ABC bc 123あ
translate: 文字列s[の|[内|中]の]タブ文字をn個の空白に[[置き換える|置換する]|する]	s.expandtabs(tabsize=n)	translate: 文字列sのタブ文字をn個の空白に置き換える	_	 ABC abc 123あ
translate: 文字列sの両端から[|不要な|余分な][空白|改行]を[取り除く|除く|除去する|消す]	s.strip()	translate: 文字列sの両端から空白を取り除く	_	ABC abc 123あ
translate: 文字列sをトリムする	s.strip()	translate: 文字列sをトリムする	_	ABC abc 123あ
translate: 文字列sの両端から文字列s2を[取り除く|除く|除去する|消す]	s.strip(s2)	translate: 文字列sの両端から文字列s2を取り除く	_	 ABC abc 123あ
translate: 文字列sの両端から改行を[取り除く|除く|除去する|消す]	s.strip('\n')	translate: 文字列sの両端から改行を取り除く	_	 ABC abc 123あ
translate: 文字列sの[左[側|端]|先頭]から[|不要な|余分な][空白|改行]を[取り除く|除く|除去する|消す]	s.lstrip()	translate: 文字列sの左側から空白を消す	_	ABC abc 123あ
translate: 文字列sを左トリムする	s.lstrip()	translate: 文字列sを左トリムする	_	ABC abc 123あ
translate: 文字列sの[左[側|端]|先頭]から文字列s2を[取り除く|除く|除去する|消す]	s.lstrip(s2)	translate: 文字列sの左側から文字列s2を取り除く	_	 ABC abc 123あ
translate: 文字列sの[右[側|端]|末尾]から[|不要な|余分な][空白|改行]を[取り除く|除く|除去する|消す]	s.rstrip()	translate: 文字列sの右側から空白を取り除く	_	 ABC abc 123あ
translate: 文字列sの[右[側|端]|末尾]から文字列s2を[取り除く|除く|除去する|消す]	s.rstrip(s2)	translate: 文字列sの右側から文字列s2を取り除く	_	 ABC abc 123あ
translate: 文字列sを右トリムする	s.rstrip(s2)	translate: 文字列sを右トリムする	_	 ABC abc 123あ
translate: {文字列sを|[長さ|文字数|幅]nで}[パディング|ゼロ埋め]する	s.zfill(n)	translate: 文字列sを長さnでパディングする	_	 ABC abc 123あ
translate: {整数nを|ゼロ[パディング|埋め][で|によって|を[用い|使っ]て]}n2桁の文字列に[変換|]する	str(n).zfill(n2)	translate: 整数nをゼロパディングでn2桁の文字列に変換する	_	001
translate: {文字列sを|[長さ|文字数|幅]nで}[センタリング|中央寄せ][に|]する	s.center(n)	translate: 長さnで文字列sをセンタリングする	_	 ABC abc 123あ
translate: {文字列sを|[長さ|文字数|幅]nで}左寄せ[に|]する	s.ljust(n)	translate: 文字列sを長さnで左寄せにする	_	 ABC abc 123あ
translate: {文字列sを|[長さ|文字数|幅]nで}右寄せ[に|]する	s.rjust(n)	translate: 長さnで文字列sを右寄せにする	_	 ABC abc 123あ
translate: 文字列sをキャピタライズする	s.capitalize()	translate: 文字列sをキャピタライズする	_	 abc abc 123あ
translate: 文字列sの先頭だけ[大文字|英大文字]化する	s.capitalize()	translate: 文字列sの先頭だけ大文字化する	_	 abc abc 123あ
translate: 文字列sの[大文字|英大文字]と[小文字|英小文字]を[交換する|逆にする|入れ替える]	s.swapcase()	translate: 文字列sの英大文字と小文字を交換する	_	 abc ABC 123あ
translate: 文字列sがリストalist内のいづれ[か[|どうか][調べる||[確認|判定|テスト]する]|]	s in alist	translate: 文字列sがリストalist内のいづれか調べる	_	False
translate: {文字列s[の中|[|中|内]]に|文字列s2が}[含まれる|ある|存在する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s2 in s	translate: 文字列sの中に文字列s2が含まれるか調べる	_	True
translate: {文字列s[の中|[|中|内]]に|文字列s2が}[含まれない|ない|存在しない][か[|どうか][調べる||[確認|判定|テスト]する]|]	s2 not in s	translate: 文字列sの中に文字列s2が含まれないか調べる	_	False
translate: {文字列s[[の中|[|中|内]]|]から|文字列s2を}[探す|見つける]	s.find(s2)	translate: 文字列sの中から文字列s2を探す	_	5
translate: {文字列sの[先頭|最初|左[側|端]]から|文字列s2を}[探す|見つける]	s.find(s2)	translate: 文字列s2を文字列sの最初から探す	_	5
translate: {文字列sのn[|番目][以降に|より後に|から先に]|文字列s2が}[含まれる|ある|存在する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, start=n) != -1	translate: 文字列s2が文字列sのn以降に含まれるか調べる	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn番目[以降に|より後に|から先に]|文字列s2が}[含まれない|ない|存在しない][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, start=n) == -1	translate: 文字列sのn番目以降に文字列s2が含まれないか調べる	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn番目[より前に|以前に]|文字列s2が}[含まれる|ある|存在する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, end=n) != -1	translate: 文字列sのn番目より前に文字列s2が含まれるか調べる	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn番目[より前に|以前に]|文字列s2が}[含まれない|ない|存在しない][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, end=n) == -1	translate: 文字列s2が文字列sのn番目より前に含まれないかどうか	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn番目とn2番目の間に|文字列s2が}[含まれる|ある|存在する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, start=n, end=n2) != -1	translate: 文字列sのn番目とn2番目の間に文字列s2が含まれるか調べる	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn[|番目]からとn2[|番目]までの[間|範囲]に|文字列s2が}[含まれる|ある|存在する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, start=n, end=n2) != -1	translate: 文字列s2が文字列sのnからとn2までの間に含まれるか調べる	_	(TypeError('find() takes no keyword arguments'), '_')
translate: 文字列sのn番目とn2番目の間に文字列s2が[含まれない|ない|存在しない][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, start=n, end=n2) == -1	translate: 文字列sのn番目とn2番目の間に文字列s2が含まれないか調べる	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn[|番目]からとn2[|番目]までの[間|範囲]に|文字列s2が}[含まれない|ない|存在しない][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.find(s2, start=n, end=n2) == -1	translate: 文字列sのnからとn2までの間に文字列s2が含まれないか確認する	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのn[番目|]から|文字列s2を}探す	s.find(s2, start=n)	translate: 文字列sのn番目から文字列s2を探す	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sのnからn2[まで|]の[間|範囲]で|文字列s2を}探す	s.find(s2, start=n, end=n2)	translate: 文字列sのnからn2までの間で文字列s2を探す	_	(TypeError('find() takes no keyword arguments'), '_')
translate: {文字列sの[末尾|最後|後ろ|右[側|端]]から|文字列s2を}[探す|見つける]	s.rfind(s2)	translate: 文字列s2を文字列sの末尾から探す	_	5
translate: ssを[連結する|結合する|繋げる]	''.join(ss)	translate: ssを連結する	_	"(NameError(""name 'ss' is not defined""), '_')"
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableを|文字列[に変換し|とし]て}[連結する|結合する|繋げる]	''.join(map(str, iterable))	translate: リストiterableを文字列に変換して連結する	_	0124
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableを|カンマ区切りで}[連結する|結合する|繋げる]	','.join(map(str, iterable))	translate: カンマ区切りでリストiterableを連結する	_	0,1,2,4
translate: {[[リスト|タプル|配列]|列|イテラブル|]iterableを|文字列sで}[連結する|結合する|繋げる]	s.join(map(str, iterable))	translate: リストiterableを文字列sで連結する	_	0 ABC abc 123あ1 ABC abc 123あ2 ABC abc 123あ4
translate: 文字列s[の|[内|中]の]文字列s2の[出現回数|登場回数][|を[カウントする|数える]]	s.count(s2)	translate: 文字列sの文字列s2の出現回数	_	1
translate: 文字列s[の|[内|中]の]文字列s2を[カウントする|数える]	s.count(s2)	translate: 文字列sの文字列s2をカウントする	_	1
translate: 文字列sのnからn2[までの範囲|の[範囲|間]]で文字列s2の[出現回数|登場回数][|を[カウントする|数える]]	s.count(s2, start=n, end=n2)	translate: 文字列sのnからn2までの範囲で文字列s2の出現回数	_	(TypeError('count() takes no keyword arguments'), '_')
translate: 文字列sのnからn2[までの範囲|の[範囲|間]]で文字列s2を[カウントする|数える]	s.count(s2, start=n, end=n2)	translate: 文字列sのnからn2までの範囲で文字列s2をカウントする	_	(TypeError('count() takes no keyword arguments'), '_')
translate: {文字列sが|文字列s2で}[始まる|開始する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.startswith(s2)	translate: 文字列sが文字列s2で始まるか調べる	_	False
translate: 文字列sの[接頭辞|先頭|プレフィックス|左[側|端]][が|は]文字列s2[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.startswith(s2)	translate: 文字列sの接頭辞が文字列s2か調べる	_	False
translate: {文字列sのn番目が|文字列s2で}[始まる|開始する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.startswith(s2, n)	translate: 文字列sのn番目が文字列s2で始まるか調べる	_	False
translate: {文字列sが|文字列s2で}[終わる|終了する][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.endswith(s2)	translate: 文字列sが文字列s2で終わるか調べる	_	False
translate: 文字列sの[接尾辞|末尾|サフィックス|右[側|端]][が|は]文字列s2[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.endswith(s2)	translate: 文字列sの接尾辞が文字列s2か調べる	_	False
translate: {[|[安全に|エラーなく]]|文字列sの[接頭辞|先頭|プレフィックス|左[側|端]]から|文字列s2を}[取り除く|除く|除去する|消す]	s.removeprefix(s2)	translate: 文字列sの接頭辞から文字列s2を取り除く	_	 ABC abc 123あ
translate: {[|[安全に|エラーなく]]|文字列sの[接尾辞|末尾|サフィックス|右[側|端]]から|文字列s2を}[取り除く|除く|除去する|消す]	s.removesuffix(s2)	translate: 文字列sの接尾辞から文字列s2を取り除く	_	 ABC abc 123あ
translate: {ファイル名filenameが|CSVファイル}[か[|どうか][調べる||[確認|判定|テスト]する]|]	filename.endswith('.csv')	translate: ファイル名filenameがCSVファイルか調べる	_	False
translate: 文字列sが[全て|][大文字|英大文字][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isupper()	translate: 文字列sが全て大文字か確認する	_	False
translate: 文字列sが[全て|][小文字|英小文字][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.islower()	translate: 文字列sが全て小文字か調べる	_	False
translate: 文字列sが[全て|]数字[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isdigit()	translate: 文字列sが全て数字か調べる	_	False
translate: 文字列sが[全て|][アルファベット|英字][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isalpha()	translate: 文字列sが全てアルファベットか調べる	_	False
translate: 文字列sが[全て|]英数字[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isalnum()	translate: 文字列sが全て英数字か調べる	_	False
translate: 文字列sが[全て|][アスキー文字|ASCII文字][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isascii()	translate: 文字列sが全てアスキー文字か調べる	_	False
translate: 文字列sが[全て|]空白[文字|][からなる|][か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isspace()	translate: 文字列sが空白文字からなるか調べる	_	False
translate: 文字列s[は|が][全て|]十進数字[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isdecimal()	translate: 文字列sは全て十進数字か	_	False
translate: 文字列s[は|が][全て|]数値[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isnumeric()	translate: 文字列sは全て数値か調べる	_	False
translate: {文字列s内に|[ひとつでも|][大文字|英大文字]が}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.isupper() for c in s)	translate: 文字列s内にひとつでも大文字が含まれるか調べる	_	True
translate: {文字列s内に|[ひとつでも|][小文字|英小文字]が}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.islower() for c in s)	translate: ひとつでも小文字が文字列s内に含まれるか調べる	_	True
translate: {文字列s内に|[ひとつでも|]数字が}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.isdigit() for c in s)	translate: 文字列s内にひとつでも数字が含まれるか調べる	_	True
translate: {文字列s内に|[ひとつでも|]アルファベットが}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.isalpha() for c in s)	translate: 文字列s内にひとつでもアルファベットが含まれるか調べる	_	True
translate: {文字列s内に|[ひとつでも|]英数字が}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.isalnum() for c in s)	translate: 文字列s内にひとつでも英数字があるかどうか調べる	_	True
translate: {文字列s内に|[ひとつでも|]空白が}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.isspace() for c in s)	translate: 文字列s内にひとつでも空白が含まれるか調べる	_	True
translate: {文字列s内に|[ひとつでも|]isasciiが}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(c.アスキー文字() for c in s)	translate: ひとつでもisasciiが文字列s内に含まれるか調べる	_	"(AttributeError(""'str' object has no attribute 'アスキー文字'""), '_')"
translate: {文字列s内に|[ひとつでも|]非[アスキー文字|ASCII文字]が}[含まれる|ある][か[|どうか][調べる||[確認|判定|テスト]する]|]	any(not c.isascii() for c in s)	translate: 文字列s内にひとつでも非アスキー文字が含まれるか調べる	_	True
translate: 文字列s[は|が][全て|]識別子名[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isidentifier()	translate: 文字列sは全て識別子名か調べる	_	False
translate: 文字列s[は|が]キーワード[か[|どうか][調べる||[確認|判定|テスト]する]|]	keyword.iskeyword(s)	translate: 文字列sはキーワードか調べる	import keyword;_	False
translate: 文字列s[は|が][全て|]印字できる[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.isprintable()	translate: 文字列sは全て印字できるか調べる	_	True
translate: 文字列s[は|が]タイトルケース[か[|どうか][調べる||[確認|判定|テスト]する]|]	s.istitle()	translate: 文字列sはタイトルケースか	_	False
translate: 文字列sを[UTF8で]バイト列に[変換|]する	s.encode(encoding='utf-8', errors='strict')	translate: 文字列sをUTF8でバイト列に変換する	_	b' ABC abc 123\xe3\x81\x82'
translate: 文字列sをSJIS[の|で]バイト列に[変換|]する	s.encode(encoding='sjis', errors='ignore')	translate: 文字列sをSJISのバイト列に変換する	_	b' ABC abc 123\x82\xa0'
translate: {文字列sを|ユニコードエスケープで}バイト列に[変換|]する	s.encode(encoding='unicode_escape')	translate: 文字列sをユニコードエスケープでバイト列に変換する	_	b' ABC abc 123\\u3042'
translate: {文字列sを|[エンコーディング|文字コード]nameで}バイト列に[変換|]する	s.encode(encoding=name)	translate: 文字列sをエンコーディングnameでバイト列に変換する	_	"(NameError(""name 'name' is not defined""), '_')"
translate: {エラーを無視して|文字列sを}バイト列に[変換|]する	s.encode(errors='ignore')	translate: エラーを無視して文字列sをバイト列に変換する	_	b' ABC abc 123\xe3\x81\x82'
translate: 書式textを{リストalistを|引数として}[フォーマットする|文字列整形する]	text.format(*alist)	translate: 書式textをリストalistを引数としてフォーマットする	text='<{}>';_	<1>
translate: 書式textをmappingで[フォーマットする|文字列整形する]	text.format_map(mapping)	translate: 書式textをmappingでフォーマットする	text='<{}>';mapping={};_	"(ValueError('Format string contains positional fields'), ""text='<{}>';mapping={};_"")"
translate: 文字列sの[長さ|文字数|大きさ][|を得る]	len(s)	translate: 文字列sの長さ	_	13
translate: 文字列sの[[先頭|最初|左[側|端]]|最初][|の文字][|を得る]	s[0]	translate: 文字列sの先頭	_	 
translate: 文字列sの[[末尾|最後|後ろ|右[側|端]]|最後][|の文字][|を得る]	s[-1]	translate: 文字列sの末尾	_	あ
translate: 文字列sのn番目[|の文字][|を得る]	s[n]	translate: 文字列sのn番目	_	A
translate: 文字列sと文字列s2を比較する	s == s2	translate: 文字列sと文字列s2を比較する	_	False
translate: 文字列sと文字列s2[は|が][同じ|等しい][か[|どうか][調べる||[確認|判定|テスト]する]|]	s == s2	translate: 文字列sと文字列s2は同じか調べる	_	False
translate: 文字列s[が|は]文字列s2と[同じ|等しい]か比較する	s == s2	translate: 文字列sが文字列s2と同じか比較する	_	False
translate: 文字列sと文字列s2を[[大文字|英大文字][小文字|英小文字]|ケース]を無視して比較する	s.casefold() == s2.casefold()	translate: 文字列sと文字列s2を大文字小文字を無視して比較する	_	False
translate: 文字列sが[片仮名|カタカナ][か[|どうか][調べる||[確認|判定|テスト]する]|]	('ァ' <= s <= 'ン')	translate: 文字列sが片仮名か調べる	_	False
translate: 文字列sが[平仮名|ひらがな][か[|どうか][調べる||[確認|判定|テスト]する]|]	('ぁ' <= s <= 'ん')	translate: 文字列sが平仮名か調べる	_	False
translate: 文字列sが漢字[か[|どうか][調べる||[確認|判定|テスト]する]|]	('一' <= s <= '鿐')	translate: 文字列sが漢字か調べる	_	False
translate: {文字列s[|内|中]に|漢字が}[[含まれる|ある]|使われている][か[|どうか][調べる||[確認|判定|テスト]する]|]	re.search('[\u4E00-\u9FD0]', s)	translate: 漢字が文字列sに含まれるか調べる	_	None
translate: {文字列s[|内|中]に|日本語が}[[含まれる|ある]|使われている][か[|どうか][調べる||[確認|判定|テスト]する]|]	re.search('[あ-んア-ン一-鿐]', s)	translate: 文字列sに日本語が含まれるか調べる	_	<re.Match object; span=(12, 13), match='あ'>
translate: 文字列sの[片仮名|カタカナ]を[平仮名|ひらがな]に[変換|]する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])	translate: 文字列sの片仮名を平仮名に変換する	_	 ABC abc 123あ
translate: 文字列sの[平仮名|ひらがな]を[片仮名|カタカナ]に[変換|]する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])	translate: 文字列sの平仮名を片仮名に変換する	_	 ABC abc 123ア
translate: 文字列sの全角数字を半角数字に[変換|]する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))	translate: 文字列sの全角数字を半角数字に変換する	_	 ABC abc 123あ
translate: [代数計算|[シンボル|記号]計算|数式処理][|ライブラリ]を[使う|[使用する|用いる]]	import sympy	translate: 代数計算を使う	_;type(sympy)	<class 'module'>
translate: 文字列sを[シンボル|記号]に[変換|]する	sympy.symbol(s)	translate: 文字列sをシンボルにする	_	"(NameError(""name 'sympy' is not defined""), '_')"
translate: 文字列sを[[シンボル|記号]|変数][に|化]して[、|]zとして参照する	z = sympy.symbol(s)	translate: 文字列sをシンボル化して、zとして参照する	_	(SyntaxError('invalid syntax', ('<string>', 1, 3, 'z = sympy.symbol(s)')), '_')
translate: 式eの変数zにnを代入する	e.subs(z, n)	translate: 式eの変数zにnを代入する	import sympy;z=sympy.Symbol('z');e=z**2;_	1
translate: 式eの変数zに式e2を代入する	e.subs(z, e2)	translate: 式eの変数zに式e2を代入する	import sympy;z=sympy.Symbol('z');e=z**2;e2=(z+1);_	(z + 1)**2
translate: 式eの変数zを式e2で置き換える	e.subs(z, e2)	translate: 式eの変数zを式e2で置き換える	import sympy;z=sympy.Symbol('z');e=z**2;e2=(z+1);_	(z + 1)**2
translate: 式eを展開する	sympy.expand(e)	translate: 式eを展開する	import sympy;z=sympy.Symbol('z');e=z**2;_	z**2
translate: 式eを因数分解する	sympy.factor(e)	translate: 式eを因数分解する	import sympy;z=sympy.Symbol('z');e=z**2;_	z**2
translate: 式eを簡単化する	sympy.sympify(e)	translate: 式eを簡単化する	import sympy;z=sympy.Symbol('z');e=z**2;_	z**2
translate: 式eを部分分数に展開する	sympy.apart(e)	translate: 式eを部分分数に展開する	import sympy;z=sympy.Symbol('z');e=z**2;_	z**2
translate: 方程式e[=0|][を解く|の解を[求める|計算する|算出する]]	sympy.solve(e)	translate: 方程式e=0を解く	import sympy;z=sympy.Symbol('z');e=z**2;_	[0]
translate: 方程式e[=0|]の変数zの解を[求める|計算する|算出する]	sympy.solve(e, z)	translate: 方程式e=0の変数zの解を求める	import sympy;z=sympy.Symbol('z');e=z**2;_	[0]
translate: 連立方程式e[=0|],式e2[|=0]の解を[求める|計算する|算出する]	sympy.solve([e, e2])	translate: 連立方程式e=0,式e2の解を求める	import sympy;z=sympy.Symbol('z');e=z**2;_	"(NameError(""name 'e2' is not defined""), ""import sympy;z=sympy.Symbol('z');e=z**2;_"")"
translate: 式eの変数z[→|->]0の極限[|を[求める|計算する|算出する]]	sympy.limit(e, z, 0)	translate: 式eの変数z→0の極限	import sympy;z=sympy.Symbol('z');e=z**2;_	0
translate: 式eの変数zが無限大に近づく[とき|時|場合]の極限[|を[求める|計算する|算出する]]	sympy.limit(e, z, oo)	translate: 式eの変数zが無限大に近づくときの極限	import sympy;z=sympy.Symbol('z');e=z**2;_	"(NameError(""name 'oo' is not defined""), ""import sympy;z=sympy.Symbol('z');e=z**2;_"")"
translate: 式e[を微分する|の微分[|を[求める|計算する|算出する]]]	sympy.diff(e)	translate: 式eの微分	import sympy;z=sympy.Symbol('z');e=z**2;_	2*z
translate: 式e[をXについて微分する|の変数zを微分[|を[求める|計算する|算出する]]]	sympy.diff(e, z)	translate: 式eをXについて微分する	import sympy;z=sympy.Symbol('z');e=z**2;_	2*z
translate: 式eを変数zについてn階微分する	sympy.diff(e, z, n)	translate: 式eを変数zについてn階微分する	import sympy;z=sympy.Symbol('z');e=z**2;_	2*z
translate: 式eの変数zについてのn階微分[|を[求める|計算する|算出する]]]	sympy.diff(e, z, n)	translate: 式eの変数zについてのn階微分	import sympy;z=sympy.Symbol('z');e=z**2;_	2*z
translate: 式e[を[積分|インテグラル]する|の[積分|インテグラル][|を[求める|計算する|算出する]]]	sympy.integrate(e)	translate: 式eを積分する	import sympy;z=sympy.Symbol('z');e=z**2;_	z**3/3
translate: 式e[を変数zについて[積分|インテグラル]する|の変数zを[積分|インテグラル][|を[求める|計算する|算出する]]]	sympy.integrate(e, z)	translate: 式eを変数zについて積分する	import sympy;z=sympy.Symbol('z');e=z**2;_	z**3/3
translate: 式e[を数値計算する|の数値[|を[求める|計算する|算出する]]]	float(e)	translate: 式eを数値計算する	import sympy;e=sympy.pi/2;_	1.5707963267948966
translate: 式eの平方根の式を[求める|計算する|算出する]	sympy.sqrt(e)	translate: 式eの平方根の式を求める	import sympy;z=sympy.Symbol('z');e=z**2;_	sqrt(z**2)
translate: 変数zの平方根の式を[求める|計算する|算出する]	sympy.sqrt(z)	translate: 変数zの平方根の式を求める	import sympy;z=sympy.Symbol('z');e=z**2;_	sqrt(z)
translate: オイラーの等式を[使う|[使用する|用いる]]	sympy.E**(sympy.I * sympy.pi) == -1	translate: オイラーの等式を使う	_	"(NameError(""name 'sympy' is not defined""), '_')"
translate: 式eの総和[|を[求める|計算する|算出する]]	sympy.summation(e, (z, 1, N))	translate: 式eの総和	import sympy;z,N=sympy.Symbol('z N');e=z**2;_	"(TypeError('cannot unpack non-iterable Symbol object'), ""import sympy;z,N=sympy.Symbol('z N');e=z**2;_"")"
translate: [プラットホーム|環境|OS]のバイトオーダ[|を[知る|調べる|使う]]	sys.byteorder	translate: プラットホームのバイトオーダ	_	little
translate: [デフォルトの|]エンコーディング[|を[知る|調べる|使う]]	sys.getdefaultencoding()	translate: デフォルトのエンコーディング	_	utf-8
translate: [オブジェクト|]objの参照カウント[|を[知る|調べる|使う]]	sys.getrefcount(obj)-1	translate: オブジェクトobjの参照カウント	_	129
translate: [オブジェクト|]objのバイトサイズ[|を[知る|調べる|使う]]	sys.getsizeof(obj)	translate: オブジェクトobjのバイトサイズ	_	48
translate: alt(最大再帰数|スタックの最大[長|の深さ])	sys.getrecursionlimit()	translate: alt(最大再帰数|スタックの最大長)	_	1000
translate: [現在の|]最大再帰数[|を[知る|調べる|使う]]	sys.getrecursionlimit()	translate: 現在の最大再帰数	_	1000
translate: 再帰エラーを防ぐ	sys.setrecursionlimit(1000000)	translate: 再帰エラーを防ぐ	_	None
translate: 最大再帰数の上限を上げる	sys.setrecursionlimit(1000000)	translate: 最大再帰数の上限を上げる	_	None
translate: 最大再帰数をn[に設定する|に変更する|に[セット|指定]する|にする]	sys.setrecursionlimit(n)	translate: 最大再帰数をnに変更する	n=5000;_	None
translate: 再帰エラーを防ぐため[に|][、|]上限をn[に設定する|に変更する|に[セット|指定]する|にする]	sys.setrecursionlimit(n)	translate: 再帰エラーを防ぐために、上限をnに設定する	n=5000;_	None
translate: 文字列sを隔離する	sys.intern(s)	translate: 文字列sを隔離する	_	 ABC abc 123あ
translate: [プラットフォームの|][符号付きの|]最大整数値[|を[知る|調べる|使う]]	sys.maxsize	translate: プラットフォームの符号付きの最大整数値	_	9223372036854775807
translate: [プラットフォームの|]ユニコード最大[コードポイント|文字コード][|を[知る|調べる|使う]]	sys.maxunicode	translate: プラットフォームのユニコード最大コードポイント	_	1114111
translate: [プラットホーム|環境|OS][|を[知る|調べる|使う]]	sys.platform	translate: プラットホーム	_	darwin
translate: [スクリプト名|スクリプトファイル名][|を[得る]]	sys.argv[0]	translate: スクリプト名	_	multiese2.py
translate: コマンドの第一引数[|を[得る]]	sys.argv[1]	translate: コマンドの第一引数	_	_builtins.py
translate: コマンドのn番目の引数[|を[得る]]	sys.argv[n]	translate: コマンドのn番目の引数	_	_builtins.py
translate: コマンド引数をリストとして[|[得る]]	sys.argv[1:]	translate: コマンド引数をリストとして	_	['_builtins.py', '_collections.py', '_datetime2.py', '_dict.py', '_file.py', '_float.py', '_fractions.py', '_int.py', '_itertools.py', '_list.py', '_math.py', '_object.py', '_pandas.py', '_random2.py', '_set.py', '_str.py', '_sympy.py', '_sys.py']
translate: Pythonパスに'/path/to/whatever'を追加する	sys.path.append('/path/to/whatever')	translate: Pythonパスに'/path/to/whatever'を追加する	_	None
translate: 標準入力[|を[[得る]|[使う|[使用する|用いる]]]]	sys.stdin	translate: 標準入力	type(_)	<class '_io.TextIOWrapper'>
translate: 標準出力[|を[[得る]|[使う|[使用する|用いる]]]]	sys.stdout	translate: 標準出力	type(_)	<class '_io.TextIOWrapper'>
translate: 標準エラー[|を[[得る]|[使う|[使用する|用いる]]]]	sys.stderr	translate: 標準エラー	type(_)	<class '_io.TextIOWrapper'>
translate: 標準入力から1文字[だけ|][読む|読み込む]	sys.stdin.read(1)	translate: 標準入力から1文字だけ読む	None	None
translate: 標準入力から1行[だけ|][読む|読み込む]	sys.stdin.readline()	translate: 標準入力から1行だけ読む	None	None
translate: 標準入力から1行[だけ|]読み込んで[、|]改行を取り除く	sys.stdin.readline().rstrip()	translate: 標準入力から1行だけ読み込んで、改行を取り除く	None	None
translate: 標準出力をフラッシュする	sys.stdout.flush()	translate: 標準出力をフラッシュする	_	None
translate: プログラムを[正しく|正常[に|]|適切に]終了する	sys.exit()	translate: プログラムを正しく終了する	None	None
translate: プログラムを正常終了する	sys.exit(0)	translate: プログラムを正常終了する	None	None
translate: プログラムを異常終了する	sys.exit(1)	translate: プログラムを異常終了する	None	None
